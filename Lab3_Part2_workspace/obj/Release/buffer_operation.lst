                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module buffer_operation
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _clear_buffer_PARM_2
                                     12 	.globl _putchar
                                     13 	.globl _getchar
                                     14 	.globl _printf_tiny
                                     15 	.globl _TF1
                                     16 	.globl _TR1
                                     17 	.globl _TF0
                                     18 	.globl _TR0
                                     19 	.globl _IE1
                                     20 	.globl _IT1
                                     21 	.globl _IE0
                                     22 	.globl _IT0
                                     23 	.globl _SM0
                                     24 	.globl _SM1
                                     25 	.globl _SM2
                                     26 	.globl _REN
                                     27 	.globl _TB8
                                     28 	.globl _RB8
                                     29 	.globl _TI
                                     30 	.globl _RI
                                     31 	.globl _CY
                                     32 	.globl _AC
                                     33 	.globl _F0
                                     34 	.globl _RS1
                                     35 	.globl _RS0
                                     36 	.globl _OV
                                     37 	.globl _F1
                                     38 	.globl _P
                                     39 	.globl _RD
                                     40 	.globl _WR
                                     41 	.globl _T1
                                     42 	.globl _T0
                                     43 	.globl _INT1
                                     44 	.globl _INT0
                                     45 	.globl _TXD0
                                     46 	.globl _TXD
                                     47 	.globl _RXD0
                                     48 	.globl _RXD
                                     49 	.globl _P3_7
                                     50 	.globl _P3_6
                                     51 	.globl _P3_5
                                     52 	.globl _P3_4
                                     53 	.globl _P3_3
                                     54 	.globl _P3_2
                                     55 	.globl _P3_1
                                     56 	.globl _P3_0
                                     57 	.globl _P2_7
                                     58 	.globl _P2_6
                                     59 	.globl _P2_5
                                     60 	.globl _P2_4
                                     61 	.globl _P2_3
                                     62 	.globl _P2_2
                                     63 	.globl _P2_1
                                     64 	.globl _P2_0
                                     65 	.globl _P1_7
                                     66 	.globl _P1_6
                                     67 	.globl _P1_5
                                     68 	.globl _P1_4
                                     69 	.globl _P1_3
                                     70 	.globl _P1_2
                                     71 	.globl _P1_1
                                     72 	.globl _P1_0
                                     73 	.globl _P0_7
                                     74 	.globl _P0_6
                                     75 	.globl _P0_5
                                     76 	.globl _P0_4
                                     77 	.globl _P0_3
                                     78 	.globl _P0_2
                                     79 	.globl _P0_1
                                     80 	.globl _P0_0
                                     81 	.globl _PS
                                     82 	.globl _PT1
                                     83 	.globl _PX1
                                     84 	.globl _PT0
                                     85 	.globl _PX0
                                     86 	.globl _EA
                                     87 	.globl _ES
                                     88 	.globl _ET1
                                     89 	.globl _EX1
                                     90 	.globl _ET0
                                     91 	.globl _EX0
                                     92 	.globl _BREG_F7
                                     93 	.globl _BREG_F6
                                     94 	.globl _BREG_F5
                                     95 	.globl _BREG_F4
                                     96 	.globl _BREG_F3
                                     97 	.globl _BREG_F2
                                     98 	.globl _BREG_F1
                                     99 	.globl _BREG_F0
                                    100 	.globl _P5_7
                                    101 	.globl _P5_6
                                    102 	.globl _P5_5
                                    103 	.globl _P5_4
                                    104 	.globl _P5_3
                                    105 	.globl _P5_2
                                    106 	.globl _P5_1
                                    107 	.globl _P5_0
                                    108 	.globl _P4_7
                                    109 	.globl _P4_6
                                    110 	.globl _P4_5
                                    111 	.globl _P4_4
                                    112 	.globl _P4_3
                                    113 	.globl _P4_2
                                    114 	.globl _P4_1
                                    115 	.globl _P4_0
                                    116 	.globl _PX0L
                                    117 	.globl _PT0L
                                    118 	.globl _PX1L
                                    119 	.globl _PT1L
                                    120 	.globl _PSL
                                    121 	.globl _PT2L
                                    122 	.globl _PPCL
                                    123 	.globl _EC
                                    124 	.globl _CCF0
                                    125 	.globl _CCF1
                                    126 	.globl _CCF2
                                    127 	.globl _CCF3
                                    128 	.globl _CCF4
                                    129 	.globl _CR
                                    130 	.globl _CF
                                    131 	.globl _TF2
                                    132 	.globl _EXF2
                                    133 	.globl _RCLK
                                    134 	.globl _TCLK
                                    135 	.globl _EXEN2
                                    136 	.globl _TR2
                                    137 	.globl _C_T2
                                    138 	.globl _CP_RL2
                                    139 	.globl _T2CON_7
                                    140 	.globl _T2CON_6
                                    141 	.globl _T2CON_5
                                    142 	.globl _T2CON_4
                                    143 	.globl _T2CON_3
                                    144 	.globl _T2CON_2
                                    145 	.globl _T2CON_1
                                    146 	.globl _T2CON_0
                                    147 	.globl _PT2
                                    148 	.globl _ET2
                                    149 	.globl _TMOD
                                    150 	.globl _TL1
                                    151 	.globl _TL0
                                    152 	.globl _TH1
                                    153 	.globl _TH0
                                    154 	.globl _TCON
                                    155 	.globl _SP
                                    156 	.globl _SCON
                                    157 	.globl _SBUF0
                                    158 	.globl _SBUF
                                    159 	.globl _PSW
                                    160 	.globl _PCON
                                    161 	.globl _P3
                                    162 	.globl _P2
                                    163 	.globl _P1
                                    164 	.globl _P0
                                    165 	.globl _IP
                                    166 	.globl _IE
                                    167 	.globl _DP0L
                                    168 	.globl _DPL
                                    169 	.globl _DP0H
                                    170 	.globl _DPH
                                    171 	.globl _B
                                    172 	.globl _ACC
                                    173 	.globl _EECON
                                    174 	.globl _KBF
                                    175 	.globl _KBE
                                    176 	.globl _KBLS
                                    177 	.globl _BRL
                                    178 	.globl _BDRCON
                                    179 	.globl _T2MOD
                                    180 	.globl _SPDAT
                                    181 	.globl _SPSTA
                                    182 	.globl _SPCON
                                    183 	.globl _SADEN
                                    184 	.globl _SADDR
                                    185 	.globl _WDTPRG
                                    186 	.globl _WDTRST
                                    187 	.globl _P5
                                    188 	.globl _P4
                                    189 	.globl _IPH1
                                    190 	.globl _IPL1
                                    191 	.globl _IPH0
                                    192 	.globl _IPL0
                                    193 	.globl _IEN1
                                    194 	.globl _IEN0
                                    195 	.globl _CMOD
                                    196 	.globl _CL
                                    197 	.globl _CH
                                    198 	.globl _CCON
                                    199 	.globl _CCAPM4
                                    200 	.globl _CCAPM3
                                    201 	.globl _CCAPM2
                                    202 	.globl _CCAPM1
                                    203 	.globl _CCAPM0
                                    204 	.globl _CCAP4L
                                    205 	.globl _CCAP3L
                                    206 	.globl _CCAP2L
                                    207 	.globl _CCAP1L
                                    208 	.globl _CCAP0L
                                    209 	.globl _CCAP4H
                                    210 	.globl _CCAP3H
                                    211 	.globl _CCAP2H
                                    212 	.globl _CCAP1H
                                    213 	.globl _CCAP0H
                                    214 	.globl _CKCON1
                                    215 	.globl _CKCON0
                                    216 	.globl _CKRL
                                    217 	.globl _AUXR1
                                    218 	.globl _AUXR
                                    219 	.globl _TH2
                                    220 	.globl _TL2
                                    221 	.globl _RCAP2H
                                    222 	.globl _RCAP2L
                                    223 	.globl _T2CON
                                    224 	.globl _clear_buffer
                                    225 	.globl _fetch_buffer_size
                                    226 ;--------------------------------------------------------
                                    227 ; special function registers
                                    228 ;--------------------------------------------------------
                                    229 	.area RSEG    (ABS,DATA)
      000000                        230 	.org 0x0000
                           0000C8   231 _T2CON	=	0x00c8
                           0000CA   232 _RCAP2L	=	0x00ca
                           0000CB   233 _RCAP2H	=	0x00cb
                           0000CC   234 _TL2	=	0x00cc
                           0000CD   235 _TH2	=	0x00cd
                           00008E   236 _AUXR	=	0x008e
                           0000A2   237 _AUXR1	=	0x00a2
                           000097   238 _CKRL	=	0x0097
                           00008F   239 _CKCON0	=	0x008f
                           0000AF   240 _CKCON1	=	0x00af
                           0000FA   241 _CCAP0H	=	0x00fa
                           0000FB   242 _CCAP1H	=	0x00fb
                           0000FC   243 _CCAP2H	=	0x00fc
                           0000FD   244 _CCAP3H	=	0x00fd
                           0000FE   245 _CCAP4H	=	0x00fe
                           0000EA   246 _CCAP0L	=	0x00ea
                           0000EB   247 _CCAP1L	=	0x00eb
                           0000EC   248 _CCAP2L	=	0x00ec
                           0000ED   249 _CCAP3L	=	0x00ed
                           0000EE   250 _CCAP4L	=	0x00ee
                           0000DA   251 _CCAPM0	=	0x00da
                           0000DB   252 _CCAPM1	=	0x00db
                           0000DC   253 _CCAPM2	=	0x00dc
                           0000DD   254 _CCAPM3	=	0x00dd
                           0000DE   255 _CCAPM4	=	0x00de
                           0000D8   256 _CCON	=	0x00d8
                           0000F9   257 _CH	=	0x00f9
                           0000E9   258 _CL	=	0x00e9
                           0000D9   259 _CMOD	=	0x00d9
                           0000A8   260 _IEN0	=	0x00a8
                           0000B1   261 _IEN1	=	0x00b1
                           0000B8   262 _IPL0	=	0x00b8
                           0000B7   263 _IPH0	=	0x00b7
                           0000B2   264 _IPL1	=	0x00b2
                           0000B3   265 _IPH1	=	0x00b3
                           0000C0   266 _P4	=	0x00c0
                           0000E8   267 _P5	=	0x00e8
                           0000A6   268 _WDTRST	=	0x00a6
                           0000A7   269 _WDTPRG	=	0x00a7
                           0000A9   270 _SADDR	=	0x00a9
                           0000B9   271 _SADEN	=	0x00b9
                           0000C3   272 _SPCON	=	0x00c3
                           0000C4   273 _SPSTA	=	0x00c4
                           0000C5   274 _SPDAT	=	0x00c5
                           0000C9   275 _T2MOD	=	0x00c9
                           00009B   276 _BDRCON	=	0x009b
                           00009A   277 _BRL	=	0x009a
                           00009C   278 _KBLS	=	0x009c
                           00009D   279 _KBE	=	0x009d
                           00009E   280 _KBF	=	0x009e
                           0000D2   281 _EECON	=	0x00d2
                           0000E0   282 _ACC	=	0x00e0
                           0000F0   283 _B	=	0x00f0
                           000083   284 _DPH	=	0x0083
                           000083   285 _DP0H	=	0x0083
                           000082   286 _DPL	=	0x0082
                           000082   287 _DP0L	=	0x0082
                           0000A8   288 _IE	=	0x00a8
                           0000B8   289 _IP	=	0x00b8
                           000080   290 _P0	=	0x0080
                           000090   291 _P1	=	0x0090
                           0000A0   292 _P2	=	0x00a0
                           0000B0   293 _P3	=	0x00b0
                           000087   294 _PCON	=	0x0087
                           0000D0   295 _PSW	=	0x00d0
                           000099   296 _SBUF	=	0x0099
                           000099   297 _SBUF0	=	0x0099
                           000098   298 _SCON	=	0x0098
                           000081   299 _SP	=	0x0081
                           000088   300 _TCON	=	0x0088
                           00008C   301 _TH0	=	0x008c
                           00008D   302 _TH1	=	0x008d
                           00008A   303 _TL0	=	0x008a
                           00008B   304 _TL1	=	0x008b
                           000089   305 _TMOD	=	0x0089
                                    306 ;--------------------------------------------------------
                                    307 ; special function bits
                                    308 ;--------------------------------------------------------
                                    309 	.area RSEG    (ABS,DATA)
      000000                        310 	.org 0x0000
                           0000AD   311 _ET2	=	0x00ad
                           0000BD   312 _PT2	=	0x00bd
                           0000C8   313 _T2CON_0	=	0x00c8
                           0000C9   314 _T2CON_1	=	0x00c9
                           0000CA   315 _T2CON_2	=	0x00ca
                           0000CB   316 _T2CON_3	=	0x00cb
                           0000CC   317 _T2CON_4	=	0x00cc
                           0000CD   318 _T2CON_5	=	0x00cd
                           0000CE   319 _T2CON_6	=	0x00ce
                           0000CF   320 _T2CON_7	=	0x00cf
                           0000C8   321 _CP_RL2	=	0x00c8
                           0000C9   322 _C_T2	=	0x00c9
                           0000CA   323 _TR2	=	0x00ca
                           0000CB   324 _EXEN2	=	0x00cb
                           0000CC   325 _TCLK	=	0x00cc
                           0000CD   326 _RCLK	=	0x00cd
                           0000CE   327 _EXF2	=	0x00ce
                           0000CF   328 _TF2	=	0x00cf
                           0000DF   329 _CF	=	0x00df
                           0000DE   330 _CR	=	0x00de
                           0000DC   331 _CCF4	=	0x00dc
                           0000DB   332 _CCF3	=	0x00db
                           0000DA   333 _CCF2	=	0x00da
                           0000D9   334 _CCF1	=	0x00d9
                           0000D8   335 _CCF0	=	0x00d8
                           0000AE   336 _EC	=	0x00ae
                           0000BE   337 _PPCL	=	0x00be
                           0000BD   338 _PT2L	=	0x00bd
                           0000BC   339 _PSL	=	0x00bc
                           0000BB   340 _PT1L	=	0x00bb
                           0000BA   341 _PX1L	=	0x00ba
                           0000B9   342 _PT0L	=	0x00b9
                           0000B8   343 _PX0L	=	0x00b8
                           0000C0   344 _P4_0	=	0x00c0
                           0000C1   345 _P4_1	=	0x00c1
                           0000C2   346 _P4_2	=	0x00c2
                           0000C3   347 _P4_3	=	0x00c3
                           0000C4   348 _P4_4	=	0x00c4
                           0000C5   349 _P4_5	=	0x00c5
                           0000C6   350 _P4_6	=	0x00c6
                           0000C7   351 _P4_7	=	0x00c7
                           0000E8   352 _P5_0	=	0x00e8
                           0000E9   353 _P5_1	=	0x00e9
                           0000EA   354 _P5_2	=	0x00ea
                           0000EB   355 _P5_3	=	0x00eb
                           0000EC   356 _P5_4	=	0x00ec
                           0000ED   357 _P5_5	=	0x00ed
                           0000EE   358 _P5_6	=	0x00ee
                           0000EF   359 _P5_7	=	0x00ef
                           0000F0   360 _BREG_F0	=	0x00f0
                           0000F1   361 _BREG_F1	=	0x00f1
                           0000F2   362 _BREG_F2	=	0x00f2
                           0000F3   363 _BREG_F3	=	0x00f3
                           0000F4   364 _BREG_F4	=	0x00f4
                           0000F5   365 _BREG_F5	=	0x00f5
                           0000F6   366 _BREG_F6	=	0x00f6
                           0000F7   367 _BREG_F7	=	0x00f7
                           0000A8   368 _EX0	=	0x00a8
                           0000A9   369 _ET0	=	0x00a9
                           0000AA   370 _EX1	=	0x00aa
                           0000AB   371 _ET1	=	0x00ab
                           0000AC   372 _ES	=	0x00ac
                           0000AF   373 _EA	=	0x00af
                           0000B8   374 _PX0	=	0x00b8
                           0000B9   375 _PT0	=	0x00b9
                           0000BA   376 _PX1	=	0x00ba
                           0000BB   377 _PT1	=	0x00bb
                           0000BC   378 _PS	=	0x00bc
                           000080   379 _P0_0	=	0x0080
                           000081   380 _P0_1	=	0x0081
                           000082   381 _P0_2	=	0x0082
                           000083   382 _P0_3	=	0x0083
                           000084   383 _P0_4	=	0x0084
                           000085   384 _P0_5	=	0x0085
                           000086   385 _P0_6	=	0x0086
                           000087   386 _P0_7	=	0x0087
                           000090   387 _P1_0	=	0x0090
                           000091   388 _P1_1	=	0x0091
                           000092   389 _P1_2	=	0x0092
                           000093   390 _P1_3	=	0x0093
                           000094   391 _P1_4	=	0x0094
                           000095   392 _P1_5	=	0x0095
                           000096   393 _P1_6	=	0x0096
                           000097   394 _P1_7	=	0x0097
                           0000A0   395 _P2_0	=	0x00a0
                           0000A1   396 _P2_1	=	0x00a1
                           0000A2   397 _P2_2	=	0x00a2
                           0000A3   398 _P2_3	=	0x00a3
                           0000A4   399 _P2_4	=	0x00a4
                           0000A5   400 _P2_5	=	0x00a5
                           0000A6   401 _P2_6	=	0x00a6
                           0000A7   402 _P2_7	=	0x00a7
                           0000B0   403 _P3_0	=	0x00b0
                           0000B1   404 _P3_1	=	0x00b1
                           0000B2   405 _P3_2	=	0x00b2
                           0000B3   406 _P3_3	=	0x00b3
                           0000B4   407 _P3_4	=	0x00b4
                           0000B5   408 _P3_5	=	0x00b5
                           0000B6   409 _P3_6	=	0x00b6
                           0000B7   410 _P3_7	=	0x00b7
                           0000B0   411 _RXD	=	0x00b0
                           0000B0   412 _RXD0	=	0x00b0
                           0000B1   413 _TXD	=	0x00b1
                           0000B1   414 _TXD0	=	0x00b1
                           0000B2   415 _INT0	=	0x00b2
                           0000B3   416 _INT1	=	0x00b3
                           0000B4   417 _T0	=	0x00b4
                           0000B5   418 _T1	=	0x00b5
                           0000B6   419 _WR	=	0x00b6
                           0000B7   420 _RD	=	0x00b7
                           0000D0   421 _P	=	0x00d0
                           0000D1   422 _F1	=	0x00d1
                           0000D2   423 _OV	=	0x00d2
                           0000D3   424 _RS0	=	0x00d3
                           0000D4   425 _RS1	=	0x00d4
                           0000D5   426 _F0	=	0x00d5
                           0000D6   427 _AC	=	0x00d6
                           0000D7   428 _CY	=	0x00d7
                           000098   429 _RI	=	0x0098
                           000099   430 _TI	=	0x0099
                           00009A   431 _RB8	=	0x009a
                           00009B   432 _TB8	=	0x009b
                           00009C   433 _REN	=	0x009c
                           00009D   434 _SM2	=	0x009d
                           00009E   435 _SM1	=	0x009e
                           00009F   436 _SM0	=	0x009f
                           000088   437 _IT0	=	0x0088
                           000089   438 _IE0	=	0x0089
                           00008A   439 _IT1	=	0x008a
                           00008B   440 _IE1	=	0x008b
                           00008C   441 _TR0	=	0x008c
                           00008D   442 _TF0	=	0x008d
                           00008E   443 _TR1	=	0x008e
                           00008F   444 _TF1	=	0x008f
                                    445 ;--------------------------------------------------------
                                    446 ; overlayable register banks
                                    447 ;--------------------------------------------------------
                                    448 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        449 	.ds 8
                                    450 ;--------------------------------------------------------
                                    451 ; internal ram data
                                    452 ;--------------------------------------------------------
                                    453 	.area DSEG    (DATA)
      000000                        454 _fetch_buffer_size_keep_taking_inputs_65536_52:
      000000                        455 	.ds 1
      000001                        456 _fetch_buffer_size_invalid_character_added_65536_52:
      000001                        457 	.ds 1
                                    458 ;--------------------------------------------------------
                                    459 ; overlayable items in internal ram
                                    460 ;--------------------------------------------------------
                                    461 	.area	OSEG    (OVR,DATA)
      000000                        462 _clear_buffer_PARM_2:
      000000                        463 	.ds 2
                                    464 ;--------------------------------------------------------
                                    465 ; indirectly addressable internal ram data
                                    466 ;--------------------------------------------------------
                                    467 	.area ISEG    (DATA)
                                    468 ;--------------------------------------------------------
                                    469 ; absolute internal ram data
                                    470 ;--------------------------------------------------------
                                    471 	.area IABS    (ABS,DATA)
                                    472 	.area IABS    (ABS,DATA)
                                    473 ;--------------------------------------------------------
                                    474 ; bit data
                                    475 ;--------------------------------------------------------
                                    476 	.area BSEG    (BIT)
                                    477 ;--------------------------------------------------------
                                    478 ; paged external ram data
                                    479 ;--------------------------------------------------------
                                    480 	.area PSEG    (PAG,XDATA)
                                    481 ;--------------------------------------------------------
                                    482 ; external ram data
                                    483 ;--------------------------------------------------------
                                    484 	.area XSEG    (XDATA)
                                    485 ;--------------------------------------------------------
                                    486 ; absolute external ram data
                                    487 ;--------------------------------------------------------
                                    488 	.area XABS    (ABS,XDATA)
                                    489 ;--------------------------------------------------------
                                    490 ; external initialized ram data
                                    491 ;--------------------------------------------------------
                                    492 	.area XISEG   (XDATA)
                                    493 	.area HOME    (CODE)
                                    494 	.area GSINIT0 (CODE)
                                    495 	.area GSINIT1 (CODE)
                                    496 	.area GSINIT2 (CODE)
                                    497 	.area GSINIT3 (CODE)
                                    498 	.area GSINIT4 (CODE)
                                    499 	.area GSINIT5 (CODE)
                                    500 	.area GSINIT  (CODE)
                                    501 	.area GSFINAL (CODE)
                                    502 	.area CSEG    (CODE)
                                    503 ;--------------------------------------------------------
                                    504 ; global & static initialisations
                                    505 ;--------------------------------------------------------
                                    506 	.area HOME    (CODE)
                                    507 	.area GSINIT  (CODE)
                                    508 	.area GSFINAL (CODE)
                                    509 	.area GSINIT  (CODE)
                                    510 ;--------------------------------------------------------
                                    511 ; Home
                                    512 ;--------------------------------------------------------
                                    513 	.area HOME    (CODE)
                                    514 	.area HOME    (CODE)
                                    515 ;--------------------------------------------------------
                                    516 ; code
                                    517 ;--------------------------------------------------------
                                    518 	.area CSEG    (CODE)
                                    519 ;------------------------------------------------------------
                                    520 ;Allocation info for local variables in function 'clear_buffer'
                                    521 ;------------------------------------------------------------
                                    522 ;size                      Allocated with name '_clear_buffer_PARM_2'
                                    523 ;buffer                    Allocated to registers r5 r6 r7 
                                    524 ;i                         Allocated to registers r3 r4 
                                    525 ;------------------------------------------------------------
                                    526 ;	buffer_operation.c:41: void clear_buffer(char* buffer, int size)
                                    527 ;	-----------------------------------------
                                    528 ;	 function clear_buffer
                                    529 ;	-----------------------------------------
      000000                        530 _clear_buffer:
                           000007   531 	ar7 = 0x07
                           000006   532 	ar6 = 0x06
                           000005   533 	ar5 = 0x05
                           000004   534 	ar4 = 0x04
                           000003   535 	ar3 = 0x03
                           000002   536 	ar2 = 0x02
                           000001   537 	ar1 = 0x01
                           000000   538 	ar0 = 0x00
      000000 AD 82            [24]  539 	mov	r5,dpl
      000002 AE 83            [24]  540 	mov	r6,dph
      000004 AF F0            [24]  541 	mov	r7,b
                                    542 ;	buffer_operation.c:43: for(int i = 0; i < size; i++)
      000006 7B 00            [12]  543 	mov	r3,#0x00
      000008 7C 00            [12]  544 	mov	r4,#0x00
      00000A                        545 00103$:
      00000A C3               [12]  546 	clr	c
      00000B EB               [12]  547 	mov	a,r3
      00000C 95*00            [12]  548 	subb	a,_clear_buffer_PARM_2
      00000E EC               [12]  549 	mov	a,r4
      00000F 64 80            [12]  550 	xrl	a,#0x80
      000011 85*01 F0         [24]  551 	mov	b,(_clear_buffer_PARM_2 + 1)
      000014 63 F0 80         [24]  552 	xrl	b,#0x80
      000017 95 F0            [12]  553 	subb	a,b
      000019 50 19            [24]  554 	jnc	00105$
                                    555 ;	buffer_operation.c:45: buffer[i] = '\0';
      00001B EB               [12]  556 	mov	a,r3
      00001C 2D               [12]  557 	add	a,r5
      00001D F8               [12]  558 	mov	r0,a
      00001E EC               [12]  559 	mov	a,r4
      00001F 3E               [12]  560 	addc	a,r6
      000020 F9               [12]  561 	mov	r1,a
      000021 8F 02            [24]  562 	mov	ar2,r7
      000023 88 82            [24]  563 	mov	dpl,r0
      000025 89 83            [24]  564 	mov	dph,r1
      000027 8A F0            [24]  565 	mov	b,r2
      000029 E4               [12]  566 	clr	a
      00002A 12r00r00         [24]  567 	lcall	__gptrput
                                    568 ;	buffer_operation.c:43: for(int i = 0; i < size; i++)
      00002D 0B               [12]  569 	inc	r3
      00002E BB 00 D9         [24]  570 	cjne	r3,#0x00,00103$
      000031 0C               [12]  571 	inc	r4
      000032 80 D6            [24]  572 	sjmp	00103$
      000034                        573 00105$:
                                    574 ;	buffer_operation.c:47: }
      000034 22               [24]  575 	ret
                                    576 ;------------------------------------------------------------
                                    577 ;Allocation info for local variables in function 'fetch_buffer_size'
                                    578 ;------------------------------------------------------------
                                    579 ;type                      Allocated to registers r7 
                                    580 ;num                       Allocated to registers r4 r5 
                                    581 ;temp                      Allocated to registers r1 r3 
                                    582 ;keep_taking_inputs        Allocated with name '_fetch_buffer_size_keep_taking_inputs_65536_52'
                                    583 ;invalid_character_added   Allocated with name '_fetch_buffer_size_invalid_character_added_65536_52'
                                    584 ;ch                        Allocated to registers r2 
                                    585 ;------------------------------------------------------------
                                    586 ;	buffer_operation.c:49: int fetch_buffer_size(buffer_type type)
                                    587 ;	-----------------------------------------
                                    588 ;	 function fetch_buffer_size
                                    589 ;	-----------------------------------------
      000035                        590 _fetch_buffer_size:
      000035 AF 82            [24]  591 	mov	r7,dpl
                                    592 ;	buffer_operation.c:58: Take_user_input:
      000037 E4               [12]  593 	clr	a
      000038 BF 02 01         [24]  594 	cjne	r7,#0x02,00206$
      00003B 04               [12]  595 	inc	a
      00003C                        596 00206$:
      00003C FE               [12]  597 	mov	r6,a
      00003D                        598 00101$:
                                    599 ;	buffer_operation.c:60: num = 0;
      00003D 7C 00            [12]  600 	mov	r4,#0x00
      00003F 7D 00            [12]  601 	mov	r5,#0x00
                                    602 ;	buffer_operation.c:62: printf_tiny("\n\r");
      000041 C0 07            [24]  603 	push	ar7
      000043 C0 06            [24]  604 	push	ar6
      000045 C0 05            [24]  605 	push	ar5
      000047 C0 04            [24]  606 	push	ar4
      000049 74r00            [12]  607 	mov	a,#___str_0
      00004B C0 E0            [24]  608 	push	acc
      00004D 74s00            [12]  609 	mov	a,#(___str_0 >> 8)
      00004F C0 E0            [24]  610 	push	acc
      000051 12r00r00         [24]  611 	lcall	_printf_tiny
      000054 15 81            [12]  612 	dec	sp
      000056 15 81            [12]  613 	dec	sp
      000058 D0 04            [24]  614 	pop	ar4
      00005A D0 05            [24]  615 	pop	ar5
      00005C D0 06            [24]  616 	pop	ar6
      00005E D0 07            [24]  617 	pop	ar7
                                    618 ;	buffer_operation.c:64: if(type == type_buffer0_and_1)
      000060 EF               [12]  619 	mov	a,r7
      000061 70 5D            [24]  620 	jnz	00105$
                                    621 ;	buffer_operation.c:66: printf_tiny("************* Buffer Size Req **********************\n\r");
      000063 C0 07            [24]  622 	push	ar7
      000065 C0 06            [24]  623 	push	ar6
      000067 C0 05            [24]  624 	push	ar5
      000069 C0 04            [24]  625 	push	ar4
      00006B 74r03            [12]  626 	mov	a,#___str_1
      00006D C0 E0            [24]  627 	push	acc
      00006F 74s00            [12]  628 	mov	a,#(___str_1 >> 8)
      000071 C0 E0            [24]  629 	push	acc
      000073 12r00r00         [24]  630 	lcall	_printf_tiny
      000076 15 81            [12]  631 	dec	sp
      000078 15 81            [12]  632 	dec	sp
                                    633 ;	buffer_operation.c:67: printf_tiny("*  Size should be b/w 64 and 5600 bytes inclusive  *\n\r");
      00007A 74r3A            [12]  634 	mov	a,#___str_2
      00007C C0 E0            [24]  635 	push	acc
      00007E 74s00            [12]  636 	mov	a,#(___str_2 >> 8)
      000080 C0 E0            [24]  637 	push	acc
      000082 12r00r00         [24]  638 	lcall	_printf_tiny
      000085 15 81            [12]  639 	dec	sp
      000087 15 81            [12]  640 	dec	sp
                                    641 ;	buffer_operation.c:68: printf_tiny("*  Digits should be from 0-9                       *\n\r");
      000089 74r71            [12]  642 	mov	a,#___str_3
      00008B C0 E0            [24]  643 	push	acc
      00008D 74s00            [12]  644 	mov	a,#(___str_3 >> 8)
      00008F C0 E0            [24]  645 	push	acc
      000091 12r00r00         [24]  646 	lcall	_printf_tiny
      000094 15 81            [12]  647 	dec	sp
      000096 15 81            [12]  648 	dec	sp
                                    649 ;	buffer_operation.c:69: printf_tiny("*  It should be divisible by 32                    *\n\r");
      000098 74rA8            [12]  650 	mov	a,#___str_4
      00009A C0 E0            [24]  651 	push	acc
      00009C 74s00            [12]  652 	mov	a,#(___str_4 >> 8)
      00009E C0 E0            [24]  653 	push	acc
      0000A0 12r00r00         [24]  654 	lcall	_printf_tiny
      0000A3 15 81            [12]  655 	dec	sp
      0000A5 15 81            [12]  656 	dec	sp
                                    657 ;	buffer_operation.c:70: printf_tiny("****************************************************\n\r");
      0000A7 74rDF            [12]  658 	mov	a,#___str_5
      0000A9 C0 E0            [24]  659 	push	acc
      0000AB 74s00            [12]  660 	mov	a,#(___str_5 >> 8)
      0000AD C0 E0            [24]  661 	push	acc
      0000AF 12r00r00         [24]  662 	lcall	_printf_tiny
      0000B2 15 81            [12]  663 	dec	sp
      0000B4 15 81            [12]  664 	dec	sp
      0000B6 D0 04            [24]  665 	pop	ar4
      0000B8 D0 05            [24]  666 	pop	ar5
      0000BA D0 06            [24]  667 	pop	ar6
      0000BC D0 07            [24]  668 	pop	ar7
      0000BE 80 4F            [24]  669 	sjmp	00106$
      0000C0                        670 00105$:
                                    671 ;	buffer_operation.c:72: else if(type == type_other_buffer)
      0000C0 EE               [12]  672 	mov	a,r6
      0000C1 60 4C            [24]  673 	jz	00106$
                                    674 ;	buffer_operation.c:74: printf_tiny("************* Buffer Size Req **********************\n\r");
      0000C3 C0 07            [24]  675 	push	ar7
      0000C5 C0 06            [24]  676 	push	ar6
      0000C7 C0 05            [24]  677 	push	ar5
      0000C9 C0 04            [24]  678 	push	ar4
      0000CB 74r03            [12]  679 	mov	a,#___str_1
      0000CD C0 E0            [24]  680 	push	acc
      0000CF 74s00            [12]  681 	mov	a,#(___str_1 >> 8)
      0000D1 C0 E0            [24]  682 	push	acc
      0000D3 12r00r00         [24]  683 	lcall	_printf_tiny
      0000D6 15 81            [12]  684 	dec	sp
      0000D8 15 81            [12]  685 	dec	sp
                                    686 ;	buffer_operation.c:75: printf_tiny("*  Size should be b/w 30 and 300 bytes inclusive   *\n\r");
      0000DA 74r16            [12]  687 	mov	a,#___str_6
      0000DC C0 E0            [24]  688 	push	acc
      0000DE 74s01            [12]  689 	mov	a,#(___str_6 >> 8)
      0000E0 C0 E0            [24]  690 	push	acc
      0000E2 12r00r00         [24]  691 	lcall	_printf_tiny
      0000E5 15 81            [12]  692 	dec	sp
      0000E7 15 81            [12]  693 	dec	sp
                                    694 ;	buffer_operation.c:76: printf_tiny("*  Digits should be from 0-9                       *\n\r");
      0000E9 74r71            [12]  695 	mov	a,#___str_3
      0000EB C0 E0            [24]  696 	push	acc
      0000ED 74s00            [12]  697 	mov	a,#(___str_3 >> 8)
      0000EF C0 E0            [24]  698 	push	acc
      0000F1 12r00r00         [24]  699 	lcall	_printf_tiny
      0000F4 15 81            [12]  700 	dec	sp
      0000F6 15 81            [12]  701 	dec	sp
                                    702 ;	buffer_operation.c:77: printf_tiny("****************************************************\n\r");
      0000F8 74rDF            [12]  703 	mov	a,#___str_5
      0000FA C0 E0            [24]  704 	push	acc
      0000FC 74s00            [12]  705 	mov	a,#(___str_5 >> 8)
      0000FE C0 E0            [24]  706 	push	acc
      000100 12r00r00         [24]  707 	lcall	_printf_tiny
      000103 15 81            [12]  708 	dec	sp
      000105 15 81            [12]  709 	dec	sp
      000107 D0 04            [24]  710 	pop	ar4
      000109 D0 05            [24]  711 	pop	ar5
      00010B D0 06            [24]  712 	pop	ar6
      00010D D0 07            [24]  713 	pop	ar7
      00010F                        714 00106$:
                                    715 ;	buffer_operation.c:80: printf_tiny("\n\rEnter a valid buffer size : ");
      00010F C0 07            [24]  716 	push	ar7
      000111 C0 06            [24]  717 	push	ar6
      000113 C0 05            [24]  718 	push	ar5
      000115 C0 04            [24]  719 	push	ar4
      000117 74r4D            [12]  720 	mov	a,#___str_7
      000119 C0 E0            [24]  721 	push	acc
      00011B 74s01            [12]  722 	mov	a,#(___str_7 >> 8)
      00011D C0 E0            [24]  723 	push	acc
      00011F 12r00r00         [24]  724 	lcall	_printf_tiny
      000122 15 81            [12]  725 	dec	sp
      000124 15 81            [12]  726 	dec	sp
      000126 D0 04            [24]  727 	pop	ar4
      000128 D0 05            [24]  728 	pop	ar5
      00012A D0 06            [24]  729 	pop	ar6
      00012C D0 07            [24]  730 	pop	ar7
                                    731 ;	buffer_operation.c:82: keep_taking_inputs = true;
      00012E 75*00 01         [24]  732 	mov	_fetch_buffer_size_keep_taking_inputs_65536_52,#0x01
                                    733 ;	buffer_operation.c:84: invalid_character_added = false;
      000131 75*01 00         [24]  734 	mov	_fetch_buffer_size_invalid_character_added_65536_52,#0x00
                                    735 ;	buffer_operation.c:86: while(keep_taking_inputs)
      000134                        736 00115$:
      000134 E5*00            [12]  737 	mov	a,_fetch_buffer_size_keep_taking_inputs_65536_52
      000136 60 76            [24]  738 	jz	00117$
                                    739 ;	buffer_operation.c:88: char ch = getchar();
      000138 C0 07            [24]  740 	push	ar7
      00013A C0 06            [24]  741 	push	ar6
      00013C C0 05            [24]  742 	push	ar5
      00013E C0 04            [24]  743 	push	ar4
      000140 12r00r00         [24]  744 	lcall	_getchar
      000143 AA 82            [24]  745 	mov	r2,dpl
                                    746 ;	buffer_operation.c:89: putchar(ch);
      000145 8A 01            [24]  747 	mov	ar1,r2
      000147 7B 00            [12]  748 	mov	r3,#0x00
      000149 89 82            [24]  749 	mov	dpl,r1
      00014B 8B 83            [24]  750 	mov	dph,r3
      00014D C0 03            [24]  751 	push	ar3
      00014F C0 02            [24]  752 	push	ar2
      000151 C0 01            [24]  753 	push	ar1
      000153 12r00r00         [24]  754 	lcall	_putchar
      000156 D0 01            [24]  755 	pop	ar1
      000158 D0 02            [24]  756 	pop	ar2
      00015A D0 03            [24]  757 	pop	ar3
      00015C D0 04            [24]  758 	pop	ar4
      00015E D0 05            [24]  759 	pop	ar5
      000160 D0 06            [24]  760 	pop	ar6
      000162 D0 07            [24]  761 	pop	ar7
                                    762 ;	buffer_operation.c:91: if(ch >= '0' && ch <= '9' &&
      000164 BA 30 00         [24]  763 	cjne	r2,#0x30,00211$
      000167                        764 00211$:
      000167 40 38            [24]  765 	jc	00111$
      000169 EA               [12]  766 	mov	a,r2
      00016A 24 C6            [12]  767 	add	a,#0xff - 0x39
      00016C 40 33            [24]  768 	jc	00111$
                                    769 ;	buffer_operation.c:92: invalid_character_added == false)
      00016E E5*01            [12]  770 	mov	a,_fetch_buffer_size_invalid_character_added_65536_52
      000170 70 2F            [24]  771 	jnz	00111$
                                    772 ;	buffer_operation.c:95: temp = ch - '0';
      000172 E9               [12]  773 	mov	a,r1
      000173 24 D0            [12]  774 	add	a,#0xd0
      000175 F9               [12]  775 	mov	r1,a
      000176 EB               [12]  776 	mov	a,r3
      000177 34 FF            [12]  777 	addc	a,#0xff
      000179 FB               [12]  778 	mov	r3,a
                                    779 ;	buffer_operation.c:97: num = num * 10 + temp;
      00017A 8C*00            [24]  780 	mov	__mulint_PARM_2,r4
      00017C 8D*01            [24]  781 	mov	(__mulint_PARM_2 + 1),r5
      00017E 90 00 0A         [24]  782 	mov	dptr,#0x000a
      000181 C0 07            [24]  783 	push	ar7
      000183 C0 06            [24]  784 	push	ar6
      000185 C0 03            [24]  785 	push	ar3
      000187 C0 01            [24]  786 	push	ar1
      000189 12r00r00         [24]  787 	lcall	__mulint
      00018C E5 82            [12]  788 	mov	a,dpl
      00018E 85 83 F0         [24]  789 	mov	b,dph
      000191 D0 01            [24]  790 	pop	ar1
      000193 D0 03            [24]  791 	pop	ar3
      000195 D0 06            [24]  792 	pop	ar6
      000197 D0 07            [24]  793 	pop	ar7
      000199 29               [12]  794 	add	a,r1
      00019A FC               [12]  795 	mov	r4,a
      00019B EB               [12]  796 	mov	a,r3
      00019C 35 F0            [12]  797 	addc	a,b
      00019E FD               [12]  798 	mov	r5,a
      00019F 80 93            [24]  799 	sjmp	00115$
      0001A1                        800 00111$:
                                    801 ;	buffer_operation.c:99: else if(ch == '\r') // enter pressed
      0001A1 BA 0D 05         [24]  802 	cjne	r2,#0x0d,00108$
                                    803 ;	buffer_operation.c:101: keep_taking_inputs = false;
      0001A4 75*00 00         [24]  804 	mov	_fetch_buffer_size_keep_taking_inputs_65536_52,#0x00
      0001A7 80 8B            [24]  805 	sjmp	00115$
      0001A9                        806 00108$:
                                    807 ;	buffer_operation.c:105: invalid_character_added = true;
      0001A9 75*01 01         [24]  808 	mov	_fetch_buffer_size_invalid_character_added_65536_52,#0x01
      0001AC 80 86            [24]  809 	sjmp	00115$
      0001AE                        810 00117$:
                                    811 ;	buffer_operation.c:108: printf_tiny("\n\r");
      0001AE C0 07            [24]  812 	push	ar7
      0001B0 C0 06            [24]  813 	push	ar6
      0001B2 C0 05            [24]  814 	push	ar5
      0001B4 C0 04            [24]  815 	push	ar4
      0001B6 74r00            [12]  816 	mov	a,#___str_0
      0001B8 C0 E0            [24]  817 	push	acc
      0001BA 74s00            [12]  818 	mov	a,#(___str_0 >> 8)
      0001BC C0 E0            [24]  819 	push	acc
      0001BE 12r00r00         [24]  820 	lcall	_printf_tiny
      0001C1 15 81            [12]  821 	dec	sp
      0001C3 15 81            [12]  822 	dec	sp
      0001C5 D0 04            [24]  823 	pop	ar4
      0001C7 D0 05            [24]  824 	pop	ar5
      0001C9 D0 06            [24]  825 	pop	ar6
      0001CB D0 07            [24]  826 	pop	ar7
                                    827 ;	buffer_operation.c:110: if(invalid_character_added)
      0001CD E5*01            [12]  828 	mov	a,_fetch_buffer_size_invalid_character_added_65536_52
      0001CF 60 1A            [24]  829 	jz	00119$
                                    830 ;	buffer_operation.c:112: printf_tiny("\n\rFAILURE: Invalid character added, now enter a valid size\n\r");
      0001D1 C0 07            [24]  831 	push	ar7
      0001D3 C0 06            [24]  832 	push	ar6
      0001D5 74r6C            [12]  833 	mov	a,#___str_8
      0001D7 C0 E0            [24]  834 	push	acc
      0001D9 74s01            [12]  835 	mov	a,#(___str_8 >> 8)
      0001DB C0 E0            [24]  836 	push	acc
      0001DD 12r00r00         [24]  837 	lcall	_printf_tiny
      0001E0 15 81            [12]  838 	dec	sp
      0001E2 15 81            [12]  839 	dec	sp
      0001E4 D0 06            [24]  840 	pop	ar6
      0001E6 D0 07            [24]  841 	pop	ar7
                                    842 ;	buffer_operation.c:113: goto Take_user_input;
      0001E8 02r00r3D         [24]  843 	ljmp	00101$
      0001EB                        844 00119$:
                                    845 ;	buffer_operation.c:116: if(type == type_buffer0_and_1)
      0001EB EF               [12]  846 	mov	a,r7
      0001EC 60 03            [24]  847 	jz	00218$
      0001EE 02r02r7D         [24]  848 	ljmp	00134$
      0001F1                        849 00218$:
                                    850 ;	buffer_operation.c:118: if(num >= 64 && num <= 5600)
      0001F1 C3               [12]  851 	clr	c
      0001F2 EC               [12]  852 	mov	a,r4
      0001F3 94 40            [12]  853 	subb	a,#0x40
      0001F5 ED               [12]  854 	mov	a,r5
      0001F6 64 80            [12]  855 	xrl	a,#0x80
      0001F8 94 80            [12]  856 	subb	a,#0x80
      0001FA 40 67            [24]  857 	jc	00124$
      0001FC 74 E0            [12]  858 	mov	a,#0xe0
      0001FE 9C               [12]  859 	subb	a,r4
      0001FF 74 95            [12]  860 	mov	a,#(0x15 ^ 0x80)
      000201 8D F0            [24]  861 	mov	b,r5
      000203 63 F0 80         [24]  862 	xrl	b,#0x80
      000206 95 F0            [12]  863 	subb	a,b
      000208 40 59            [24]  864 	jc	00124$
                                    865 ;	buffer_operation.c:120: if(num % 32 == 0)
      00020A 75*00 20         [24]  866 	mov	__modsint_PARM_2,#0x20
      00020D 75*01 00         [24]  867 	mov	(__modsint_PARM_2 + 1),#0x00
      000210 8C 82            [24]  868 	mov	dpl,r4
      000212 8D 83            [24]  869 	mov	dph,r5
      000214 C0 07            [24]  870 	push	ar7
      000216 C0 06            [24]  871 	push	ar6
      000218 C0 05            [24]  872 	push	ar5
      00021A C0 04            [24]  873 	push	ar4
      00021C 12r00r00         [24]  874 	lcall	__modsint
      00021F E5 82            [12]  875 	mov	a,dpl
      000221 85 83 F0         [24]  876 	mov	b,dph
      000224 D0 04            [24]  877 	pop	ar4
      000226 D0 05            [24]  878 	pop	ar5
      000228 D0 06            [24]  879 	pop	ar6
      00022A D0 07            [24]  880 	pop	ar7
      00022C 45 F0            [12]  881 	orl	a,b
      00022E 70 19            [24]  882 	jnz	00121$
                                    883 ;	buffer_operation.c:123: printf_tiny("\n\rSUCCESS: Valid divisible by 32 size entered\n\r");
      000230 C0 05            [24]  884 	push	ar5
      000232 C0 04            [24]  885 	push	ar4
      000234 74rA9            [12]  886 	mov	a,#___str_9
      000236 C0 E0            [24]  887 	push	acc
      000238 74s01            [12]  888 	mov	a,#(___str_9 >> 8)
      00023A C0 E0            [24]  889 	push	acc
      00023C 12r00r00         [24]  890 	lcall	_printf_tiny
      00023F 15 81            [12]  891 	dec	sp
      000241 15 81            [12]  892 	dec	sp
      000243 D0 04            [24]  893 	pop	ar4
      000245 D0 05            [24]  894 	pop	ar5
      000247 80 7C            [24]  895 	sjmp	00135$
      000249                        896 00121$:
                                    897 ;	buffer_operation.c:128: printf_tiny("\n\rFAILURE: Input not divisible by 32, enter a valid input\n\r");
      000249 C0 07            [24]  898 	push	ar7
      00024B C0 06            [24]  899 	push	ar6
      00024D 74rD9            [12]  900 	mov	a,#___str_10
      00024F C0 E0            [24]  901 	push	acc
      000251 74s01            [12]  902 	mov	a,#(___str_10 >> 8)
      000253 C0 E0            [24]  903 	push	acc
      000255 12r00r00         [24]  904 	lcall	_printf_tiny
      000258 15 81            [12]  905 	dec	sp
      00025A 15 81            [12]  906 	dec	sp
      00025C D0 06            [24]  907 	pop	ar6
      00025E D0 07            [24]  908 	pop	ar7
                                    909 ;	buffer_operation.c:130: goto Take_user_input;
      000260 02r00r3D         [24]  910 	ljmp	00101$
      000263                        911 00124$:
                                    912 ;	buffer_operation.c:135: printf_tiny("\n\rFAILURE: Input data should be in between 60 to 5600\n\r");
      000263 C0 07            [24]  913 	push	ar7
      000265 C0 06            [24]  914 	push	ar6
      000267 74r15            [12]  915 	mov	a,#___str_11
      000269 C0 E0            [24]  916 	push	acc
      00026B 74s02            [12]  917 	mov	a,#(___str_11 >> 8)
      00026D C0 E0            [24]  918 	push	acc
      00026F 12r00r00         [24]  919 	lcall	_printf_tiny
      000272 15 81            [12]  920 	dec	sp
      000274 15 81            [12]  921 	dec	sp
      000276 D0 06            [24]  922 	pop	ar6
      000278 D0 07            [24]  923 	pop	ar7
                                    924 ;	buffer_operation.c:137: goto Take_user_input;
      00027A 02r00r3D         [24]  925 	ljmp	00101$
      00027D                        926 00134$:
                                    927 ;	buffer_operation.c:140: else if(type == type_other_buffer)
      00027D EE               [12]  928 	mov	a,r6
      00027E 60 45            [24]  929 	jz	00135$
                                    930 ;	buffer_operation.c:142: if(num >= 30 && num <= 300)
      000280 C3               [12]  931 	clr	c
      000281 EC               [12]  932 	mov	a,r4
      000282 94 1E            [12]  933 	subb	a,#0x1e
      000284 ED               [12]  934 	mov	a,r5
      000285 64 80            [12]  935 	xrl	a,#0x80
      000287 94 80            [12]  936 	subb	a,#0x80
      000289 40 27            [24]  937 	jc	00128$
      00028B 74 2C            [12]  938 	mov	a,#0x2c
      00028D 9C               [12]  939 	subb	a,r4
      00028E 74 81            [12]  940 	mov	a,#(0x01 ^ 0x80)
      000290 8D F0            [24]  941 	mov	b,r5
      000292 63 F0 80         [24]  942 	xrl	b,#0x80
      000295 95 F0            [12]  943 	subb	a,b
      000297 40 19            [24]  944 	jc	00128$
                                    945 ;	buffer_operation.c:144: printf_tiny("\n\rSUCCESS: Valid buffer size entered\n\r");
      000299 C0 05            [24]  946 	push	ar5
      00029B C0 04            [24]  947 	push	ar4
      00029D 74r4D            [12]  948 	mov	a,#___str_12
      00029F C0 E0            [24]  949 	push	acc
      0002A1 74s02            [12]  950 	mov	a,#(___str_12 >> 8)
      0002A3 C0 E0            [24]  951 	push	acc
      0002A5 12r00r00         [24]  952 	lcall	_printf_tiny
      0002A8 15 81            [12]  953 	dec	sp
      0002AA 15 81            [12]  954 	dec	sp
      0002AC D0 04            [24]  955 	pop	ar4
      0002AE D0 05            [24]  956 	pop	ar5
      0002B0 80 13            [24]  957 	sjmp	00135$
      0002B2                        958 00128$:
                                    959 ;	buffer_operation.c:148: printf_tiny("\n\rFAILURE: the buffer size should be in range [30, 300] \n\r");
      0002B2 74r74            [12]  960 	mov	a,#___str_13
      0002B4 C0 E0            [24]  961 	push	acc
      0002B6 74s02            [12]  962 	mov	a,#(___str_13 >> 8)
      0002B8 C0 E0            [24]  963 	push	acc
      0002BA 12r00r00         [24]  964 	lcall	_printf_tiny
      0002BD 15 81            [12]  965 	dec	sp
      0002BF 15 81            [12]  966 	dec	sp
                                    967 ;	buffer_operation.c:151: return -1;
      0002C1 90 FF FF         [24]  968 	mov	dptr,#0xffff
      0002C4 22               [24]  969 	ret
      0002C5                        970 00135$:
                                    971 ;	buffer_operation.c:155: return num;
      0002C5 8C 82            [24]  972 	mov	dpl,r4
      0002C7 8D 83            [24]  973 	mov	dph,r5
                                    974 ;	buffer_operation.c:156: }
      0002C9 22               [24]  975 	ret
                                    976 	.area CSEG    (CODE)
                                    977 	.area CONST   (CODE)
                                    978 	.area CONST   (CODE)
      000000                        979 ___str_0:
      000000 0A                     980 	.db 0x0a
      000001 0D                     981 	.db 0x0d
      000002 00                     982 	.db 0x00
                                    983 	.area CSEG    (CODE)
                                    984 	.area CONST   (CODE)
      000003                        985 ___str_1:
      000003 2A 2A 2A 2A 2A 2A 2A   986 	.ascii "************* Buffer Size Req **********************"
             2A 2A 2A 2A 2A 2A 20
             42 75 66 66 65 72 20
             53 69 7A 65 20 52 65
             71 20 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A
      000037 0A                     987 	.db 0x0a
      000038 0D                     988 	.db 0x0d
      000039 00                     989 	.db 0x00
                                    990 	.area CSEG    (CODE)
                                    991 	.area CONST   (CODE)
      00003A                        992 ___str_2:
      00003A 2A 20 20 53 69 7A 65   993 	.ascii "*  Size should be b/w 64 and 5600 bytes inclusive  *"
             20 73 68 6F 75 6C 64
             20 62 65 20 62 2F 77
             20 36 34 20 61 6E 64
             20 35 36 30 30 20 62
             79 74 65 73 20 69 6E
             63 6C 75 73 69 76 65
             20 20 2A
      00006E 0A                     994 	.db 0x0a
      00006F 0D                     995 	.db 0x0d
      000070 00                     996 	.db 0x00
                                    997 	.area CSEG    (CODE)
                                    998 	.area CONST   (CODE)
      000071                        999 ___str_3:
      000071 2A 20 20 44 69 67 69  1000 	.ascii "*  Digits should be from 0-9                       *"
             74 73 20 73 68 6F 75
             6C 64 20 62 65 20 66
             72 6F 6D 20 30 2D 39
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 2A
      0000A5 0A                    1001 	.db 0x0a
      0000A6 0D                    1002 	.db 0x0d
      0000A7 00                    1003 	.db 0x00
                                   1004 	.area CSEG    (CODE)
                                   1005 	.area CONST   (CODE)
      0000A8                       1006 ___str_4:
      0000A8 2A 20 20 49 74 20 73  1007 	.ascii "*  It should be divisible by 32                    *"
             68 6F 75 6C 64 20 62
             65 20 64 69 76 69 73
             69 62 6C 65 20 62 79
             20 33 32 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 2A
      0000DC 0A                    1008 	.db 0x0a
      0000DD 0D                    1009 	.db 0x0d
      0000DE 00                    1010 	.db 0x00
                                   1011 	.area CSEG    (CODE)
                                   1012 	.area CONST   (CODE)
      0000DF                       1013 ___str_5:
      0000DF 2A 2A 2A 2A 2A 2A 2A  1014 	.ascii "****************************************************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A
      000113 0A                    1015 	.db 0x0a
      000114 0D                    1016 	.db 0x0d
      000115 00                    1017 	.db 0x00
                                   1018 	.area CSEG    (CODE)
                                   1019 	.area CONST   (CODE)
      000116                       1020 ___str_6:
      000116 2A 20 20 53 69 7A 65  1021 	.ascii "*  Size should be b/w 30 and 300 bytes inclusive   *"
             20 73 68 6F 75 6C 64
             20 62 65 20 62 2F 77
             20 33 30 20 61 6E 64
             20 33 30 30 20 62 79
             74 65 73 20 69 6E 63
             6C 75 73 69 76 65 20
             20 20 2A
      00014A 0A                    1022 	.db 0x0a
      00014B 0D                    1023 	.db 0x0d
      00014C 00                    1024 	.db 0x00
                                   1025 	.area CSEG    (CODE)
                                   1026 	.area CONST   (CODE)
      00014D                       1027 ___str_7:
      00014D 0A                    1028 	.db 0x0a
      00014E 0D                    1029 	.db 0x0d
      00014F 45 6E 74 65 72 20 61  1030 	.ascii "Enter a valid buffer size : "
             20 76 61 6C 69 64 20
             62 75 66 66 65 72 20
             73 69 7A 65 20 3A 20
      00016B 00                    1031 	.db 0x00
                                   1032 	.area CSEG    (CODE)
                                   1033 	.area CONST   (CODE)
      00016C                       1034 ___str_8:
      00016C 0A                    1035 	.db 0x0a
      00016D 0D                    1036 	.db 0x0d
      00016E 46 41 49 4C 55 52 45  1037 	.ascii "FAILURE: Invalid character added, now enter a valid size"
             3A 20 49 6E 76 61 6C
             69 64 20 63 68 61 72
             61 63 74 65 72 20 61
             64 64 65 64 2C 20 6E
             6F 77 20 65 6E 74 65
             72 20 61 20 76 61 6C
             69 64 20 73 69 7A 65
      0001A6 0A                    1038 	.db 0x0a
      0001A7 0D                    1039 	.db 0x0d
      0001A8 00                    1040 	.db 0x00
                                   1041 	.area CSEG    (CODE)
                                   1042 	.area CONST   (CODE)
      0001A9                       1043 ___str_9:
      0001A9 0A                    1044 	.db 0x0a
      0001AA 0D                    1045 	.db 0x0d
      0001AB 53 55 43 43 45 53 53  1046 	.ascii "SUCCESS: Valid divisible by 32 size entered"
             3A 20 56 61 6C 69 64
             20 64 69 76 69 73 69
             62 6C 65 20 62 79 20
             33 32 20 73 69 7A 65
             20 65 6E 74 65 72 65
             64
      0001D6 0A                    1047 	.db 0x0a
      0001D7 0D                    1048 	.db 0x0d
      0001D8 00                    1049 	.db 0x00
                                   1050 	.area CSEG    (CODE)
                                   1051 	.area CONST   (CODE)
      0001D9                       1052 ___str_10:
      0001D9 0A                    1053 	.db 0x0a
      0001DA 0D                    1054 	.db 0x0d
      0001DB 46 41 49 4C 55 52 45  1055 	.ascii "FAILURE: Input not divisible by 32, enter a valid input"
             3A 20 49 6E 70 75 74
             20 6E 6F 74 20 64 69
             76 69 73 69 62 6C 65
             20 62 79 20 33 32 2C
             20 65 6E 74 65 72 20
             61 20 76 61 6C 69 64
             20 69 6E 70 75 74
      000212 0A                    1056 	.db 0x0a
      000213 0D                    1057 	.db 0x0d
      000214 00                    1058 	.db 0x00
                                   1059 	.area CSEG    (CODE)
                                   1060 	.area CONST   (CODE)
      000215                       1061 ___str_11:
      000215 0A                    1062 	.db 0x0a
      000216 0D                    1063 	.db 0x0d
      000217 46 41 49 4C 55 52 45  1064 	.ascii "FAILURE: Input data should be in between 60 to 5600"
             3A 20 49 6E 70 75 74
             20 64 61 74 61 20 73
             68 6F 75 6C 64 20 62
             65 20 69 6E 20 62 65
             74 77 65 65 6E 20 36
             30 20 74 6F 20 35 36
             30 30
      00024A 0A                    1065 	.db 0x0a
      00024B 0D                    1066 	.db 0x0d
      00024C 00                    1067 	.db 0x00
                                   1068 	.area CSEG    (CODE)
                                   1069 	.area CONST   (CODE)
      00024D                       1070 ___str_12:
      00024D 0A                    1071 	.db 0x0a
      00024E 0D                    1072 	.db 0x0d
      00024F 53 55 43 43 45 53 53  1073 	.ascii "SUCCESS: Valid buffer size entered"
             3A 20 56 61 6C 69 64
             20 62 75 66 66 65 72
             20 73 69 7A 65 20 65
             6E 74 65 72 65 64
      000271 0A                    1074 	.db 0x0a
      000272 0D                    1075 	.db 0x0d
      000273 00                    1076 	.db 0x00
                                   1077 	.area CSEG    (CODE)
                                   1078 	.area CONST   (CODE)
      000274                       1079 ___str_13:
      000274 0A                    1080 	.db 0x0a
      000275 0D                    1081 	.db 0x0d
      000276 46 41 49 4C 55 52 45  1082 	.ascii "FAILURE: the buffer size should be in range [30, 300] "
             3A 20 74 68 65 20 62
             75 66 66 65 72 20 73
             69 7A 65 20 73 68 6F
             75 6C 64 20 62 65 20
             69 6E 20 72 61 6E 67
             65 20 5B 33 30 2C 20
             33 30 30 5D 20
      0002AC 0A                    1083 	.db 0x0a
      0002AD 0D                    1084 	.db 0x0d
      0002AE 00                    1085 	.db 0x00
                                   1086 	.area CSEG    (CODE)
                                   1087 	.area XINIT   (CODE)
                                   1088 	.area CABS    (ABS,CODE)
