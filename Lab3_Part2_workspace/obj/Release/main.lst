                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _clear_buffer_PARM_2
                                     12 	.globl _main
                                     13 	.globl _free_buffers
                                     14 	.globl _fetch_character
                                     15 	.globl _clear_buffer
                                     16 	.globl _flush_buffer0
                                     17 	.globl _flush_buffer0_ASCII
                                     18 	.globl _flush_address
                                     19 	.globl _fetch_buffer_size
                                     20 	.globl _puts_
                                     21 	.globl _gets_
                                     22 	.globl _getchar_
                                     23 	.globl _putchar_
                                     24 	.globl __sdcc_external_startup
                                     25 	.globl _printf_tiny
                                     26 	.globl _free
                                     27 	.globl _malloc
                                     28 	.globl _TF1
                                     29 	.globl _TR1
                                     30 	.globl _TF0
                                     31 	.globl _TR0
                                     32 	.globl _IE1
                                     33 	.globl _IT1
                                     34 	.globl _IE0
                                     35 	.globl _IT0
                                     36 	.globl _SM0
                                     37 	.globl _SM1
                                     38 	.globl _SM2
                                     39 	.globl _REN
                                     40 	.globl _TB8
                                     41 	.globl _RB8
                                     42 	.globl _TI
                                     43 	.globl _RI
                                     44 	.globl _CY
                                     45 	.globl _AC
                                     46 	.globl _F0
                                     47 	.globl _RS1
                                     48 	.globl _RS0
                                     49 	.globl _OV
                                     50 	.globl _F1
                                     51 	.globl _P
                                     52 	.globl _RD
                                     53 	.globl _WR
                                     54 	.globl _T1
                                     55 	.globl _T0
                                     56 	.globl _INT1
                                     57 	.globl _INT0
                                     58 	.globl _TXD0
                                     59 	.globl _TXD
                                     60 	.globl _RXD0
                                     61 	.globl _RXD
                                     62 	.globl _P3_7
                                     63 	.globl _P3_6
                                     64 	.globl _P3_5
                                     65 	.globl _P3_4
                                     66 	.globl _P3_3
                                     67 	.globl _P3_2
                                     68 	.globl _P3_1
                                     69 	.globl _P3_0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _P1_7
                                     79 	.globl _P1_6
                                     80 	.globl _P1_5
                                     81 	.globl _P1_4
                                     82 	.globl _P1_3
                                     83 	.globl _P1_2
                                     84 	.globl _P1_1
                                     85 	.globl _P1_0
                                     86 	.globl _P0_7
                                     87 	.globl _P0_6
                                     88 	.globl _P0_5
                                     89 	.globl _P0_4
                                     90 	.globl _P0_3
                                     91 	.globl _P0_2
                                     92 	.globl _P0_1
                                     93 	.globl _P0_0
                                     94 	.globl _PS
                                     95 	.globl _PT1
                                     96 	.globl _PX1
                                     97 	.globl _PT0
                                     98 	.globl _PX0
                                     99 	.globl _EA
                                    100 	.globl _ES
                                    101 	.globl _ET1
                                    102 	.globl _EX1
                                    103 	.globl _ET0
                                    104 	.globl _EX0
                                    105 	.globl _BREG_F7
                                    106 	.globl _BREG_F6
                                    107 	.globl _BREG_F5
                                    108 	.globl _BREG_F4
                                    109 	.globl _BREG_F3
                                    110 	.globl _BREG_F2
                                    111 	.globl _BREG_F1
                                    112 	.globl _BREG_F0
                                    113 	.globl _P5_7
                                    114 	.globl _P5_6
                                    115 	.globl _P5_5
                                    116 	.globl _P5_4
                                    117 	.globl _P5_3
                                    118 	.globl _P5_2
                                    119 	.globl _P5_1
                                    120 	.globl _P5_0
                                    121 	.globl _P4_7
                                    122 	.globl _P4_6
                                    123 	.globl _P4_5
                                    124 	.globl _P4_4
                                    125 	.globl _P4_3
                                    126 	.globl _P4_2
                                    127 	.globl _P4_1
                                    128 	.globl _P4_0
                                    129 	.globl _PX0L
                                    130 	.globl _PT0L
                                    131 	.globl _PX1L
                                    132 	.globl _PT1L
                                    133 	.globl _PSL
                                    134 	.globl _PT2L
                                    135 	.globl _PPCL
                                    136 	.globl _EC
                                    137 	.globl _CCF0
                                    138 	.globl _CCF1
                                    139 	.globl _CCF2
                                    140 	.globl _CCF3
                                    141 	.globl _CCF4
                                    142 	.globl _CR
                                    143 	.globl _CF
                                    144 	.globl _TF2
                                    145 	.globl _EXF2
                                    146 	.globl _RCLK
                                    147 	.globl _TCLK
                                    148 	.globl _EXEN2
                                    149 	.globl _TR2
                                    150 	.globl _C_T2
                                    151 	.globl _CP_RL2
                                    152 	.globl _T2CON_7
                                    153 	.globl _T2CON_6
                                    154 	.globl _T2CON_5
                                    155 	.globl _T2CON_4
                                    156 	.globl _T2CON_3
                                    157 	.globl _T2CON_2
                                    158 	.globl _T2CON_1
                                    159 	.globl _T2CON_0
                                    160 	.globl _PT2
                                    161 	.globl _ET2
                                    162 	.globl _TMOD
                                    163 	.globl _TL1
                                    164 	.globl _TL0
                                    165 	.globl _TH1
                                    166 	.globl _TH0
                                    167 	.globl _TCON
                                    168 	.globl _SP
                                    169 	.globl _SCON
                                    170 	.globl _SBUF0
                                    171 	.globl _SBUF
                                    172 	.globl _PSW
                                    173 	.globl _PCON
                                    174 	.globl _P3
                                    175 	.globl _P2
                                    176 	.globl _P1
                                    177 	.globl _P0
                                    178 	.globl _IP
                                    179 	.globl _IE
                                    180 	.globl _DP0L
                                    181 	.globl _DPL
                                    182 	.globl _DP0H
                                    183 	.globl _DPH
                                    184 	.globl _B
                                    185 	.globl _ACC
                                    186 	.globl _EECON
                                    187 	.globl _KBF
                                    188 	.globl _KBE
                                    189 	.globl _KBLS
                                    190 	.globl _BRL
                                    191 	.globl _BDRCON
                                    192 	.globl _T2MOD
                                    193 	.globl _SPDAT
                                    194 	.globl _SPSTA
                                    195 	.globl _SPCON
                                    196 	.globl _SADEN
                                    197 	.globl _SADDR
                                    198 	.globl _WDTPRG
                                    199 	.globl _WDTRST
                                    200 	.globl _P5
                                    201 	.globl _P4
                                    202 	.globl _IPH1
                                    203 	.globl _IPL1
                                    204 	.globl _IPH0
                                    205 	.globl _IPL0
                                    206 	.globl _IEN1
                                    207 	.globl _IEN0
                                    208 	.globl _CMOD
                                    209 	.globl _CL
                                    210 	.globl _CH
                                    211 	.globl _CCON
                                    212 	.globl _CCAPM4
                                    213 	.globl _CCAPM3
                                    214 	.globl _CCAPM2
                                    215 	.globl _CCAPM1
                                    216 	.globl _CCAPM0
                                    217 	.globl _CCAP4L
                                    218 	.globl _CCAP3L
                                    219 	.globl _CCAP2L
                                    220 	.globl _CCAP1L
                                    221 	.globl _CCAP0L
                                    222 	.globl _CCAP4H
                                    223 	.globl _CCAP3H
                                    224 	.globl _CCAP2H
                                    225 	.globl _CCAP1H
                                    226 	.globl _CCAP0H
                                    227 	.globl _CKCON1
                                    228 	.globl _CKCON0
                                    229 	.globl _CKRL
                                    230 	.globl _AUXR1
                                    231 	.globl _AUXR
                                    232 	.globl _TH2
                                    233 	.globl _TL2
                                    234 	.globl _RCAP2H
                                    235 	.globl _RCAP2L
                                    236 	.globl _T2CON
                                    237 	.globl _storage_characters_buffer_0
                                    238 	.globl _total_characters
                                    239 	.globl _other_buffer_size
                                    240 	.globl _buffer_0_and_1_size
                                    241 	.globl _num
                                    242 	.globl _new_buffer_index
                                    243 	.globl _new_buffer_size
                                    244 	.globl _new_buffer
                                    245 	.globl _buffer1
                                    246 	.globl _buffer0
                                    247 	.globl _getchar
                                    248 	.globl _putchar
                                    249 ;--------------------------------------------------------
                                    250 ; special function registers
                                    251 ;--------------------------------------------------------
                                    252 	.area RSEG    (ABS,DATA)
      000000                        253 	.org 0x0000
                           0000C8   254 _T2CON	=	0x00c8
                           0000CA   255 _RCAP2L	=	0x00ca
                           0000CB   256 _RCAP2H	=	0x00cb
                           0000CC   257 _TL2	=	0x00cc
                           0000CD   258 _TH2	=	0x00cd
                           00008E   259 _AUXR	=	0x008e
                           0000A2   260 _AUXR1	=	0x00a2
                           000097   261 _CKRL	=	0x0097
                           00008F   262 _CKCON0	=	0x008f
                           0000AF   263 _CKCON1	=	0x00af
                           0000FA   264 _CCAP0H	=	0x00fa
                           0000FB   265 _CCAP1H	=	0x00fb
                           0000FC   266 _CCAP2H	=	0x00fc
                           0000FD   267 _CCAP3H	=	0x00fd
                           0000FE   268 _CCAP4H	=	0x00fe
                           0000EA   269 _CCAP0L	=	0x00ea
                           0000EB   270 _CCAP1L	=	0x00eb
                           0000EC   271 _CCAP2L	=	0x00ec
                           0000ED   272 _CCAP3L	=	0x00ed
                           0000EE   273 _CCAP4L	=	0x00ee
                           0000DA   274 _CCAPM0	=	0x00da
                           0000DB   275 _CCAPM1	=	0x00db
                           0000DC   276 _CCAPM2	=	0x00dc
                           0000DD   277 _CCAPM3	=	0x00dd
                           0000DE   278 _CCAPM4	=	0x00de
                           0000D8   279 _CCON	=	0x00d8
                           0000F9   280 _CH	=	0x00f9
                           0000E9   281 _CL	=	0x00e9
                           0000D9   282 _CMOD	=	0x00d9
                           0000A8   283 _IEN0	=	0x00a8
                           0000B1   284 _IEN1	=	0x00b1
                           0000B8   285 _IPL0	=	0x00b8
                           0000B7   286 _IPH0	=	0x00b7
                           0000B2   287 _IPL1	=	0x00b2
                           0000B3   288 _IPH1	=	0x00b3
                           0000C0   289 _P4	=	0x00c0
                           0000E8   290 _P5	=	0x00e8
                           0000A6   291 _WDTRST	=	0x00a6
                           0000A7   292 _WDTPRG	=	0x00a7
                           0000A9   293 _SADDR	=	0x00a9
                           0000B9   294 _SADEN	=	0x00b9
                           0000C3   295 _SPCON	=	0x00c3
                           0000C4   296 _SPSTA	=	0x00c4
                           0000C5   297 _SPDAT	=	0x00c5
                           0000C9   298 _T2MOD	=	0x00c9
                           00009B   299 _BDRCON	=	0x009b
                           00009A   300 _BRL	=	0x009a
                           00009C   301 _KBLS	=	0x009c
                           00009D   302 _KBE	=	0x009d
                           00009E   303 _KBF	=	0x009e
                           0000D2   304 _EECON	=	0x00d2
                           0000E0   305 _ACC	=	0x00e0
                           0000F0   306 _B	=	0x00f0
                           000083   307 _DPH	=	0x0083
                           000083   308 _DP0H	=	0x0083
                           000082   309 _DPL	=	0x0082
                           000082   310 _DP0L	=	0x0082
                           0000A8   311 _IE	=	0x00a8
                           0000B8   312 _IP	=	0x00b8
                           000080   313 _P0	=	0x0080
                           000090   314 _P1	=	0x0090
                           0000A0   315 _P2	=	0x00a0
                           0000B0   316 _P3	=	0x00b0
                           000087   317 _PCON	=	0x0087
                           0000D0   318 _PSW	=	0x00d0
                           000099   319 _SBUF	=	0x0099
                           000099   320 _SBUF0	=	0x0099
                           000098   321 _SCON	=	0x0098
                           000081   322 _SP	=	0x0081
                           000088   323 _TCON	=	0x0088
                           00008C   324 _TH0	=	0x008c
                           00008D   325 _TH1	=	0x008d
                           00008A   326 _TL0	=	0x008a
                           00008B   327 _TL1	=	0x008b
                           000089   328 _TMOD	=	0x0089
                                    329 ;--------------------------------------------------------
                                    330 ; special function bits
                                    331 ;--------------------------------------------------------
                                    332 	.area RSEG    (ABS,DATA)
      000000                        333 	.org 0x0000
                           0000AD   334 _ET2	=	0x00ad
                           0000BD   335 _PT2	=	0x00bd
                           0000C8   336 _T2CON_0	=	0x00c8
                           0000C9   337 _T2CON_1	=	0x00c9
                           0000CA   338 _T2CON_2	=	0x00ca
                           0000CB   339 _T2CON_3	=	0x00cb
                           0000CC   340 _T2CON_4	=	0x00cc
                           0000CD   341 _T2CON_5	=	0x00cd
                           0000CE   342 _T2CON_6	=	0x00ce
                           0000CF   343 _T2CON_7	=	0x00cf
                           0000C8   344 _CP_RL2	=	0x00c8
                           0000C9   345 _C_T2	=	0x00c9
                           0000CA   346 _TR2	=	0x00ca
                           0000CB   347 _EXEN2	=	0x00cb
                           0000CC   348 _TCLK	=	0x00cc
                           0000CD   349 _RCLK	=	0x00cd
                           0000CE   350 _EXF2	=	0x00ce
                           0000CF   351 _TF2	=	0x00cf
                           0000DF   352 _CF	=	0x00df
                           0000DE   353 _CR	=	0x00de
                           0000DC   354 _CCF4	=	0x00dc
                           0000DB   355 _CCF3	=	0x00db
                           0000DA   356 _CCF2	=	0x00da
                           0000D9   357 _CCF1	=	0x00d9
                           0000D8   358 _CCF0	=	0x00d8
                           0000AE   359 _EC	=	0x00ae
                           0000BE   360 _PPCL	=	0x00be
                           0000BD   361 _PT2L	=	0x00bd
                           0000BC   362 _PSL	=	0x00bc
                           0000BB   363 _PT1L	=	0x00bb
                           0000BA   364 _PX1L	=	0x00ba
                           0000B9   365 _PT0L	=	0x00b9
                           0000B8   366 _PX0L	=	0x00b8
                           0000C0   367 _P4_0	=	0x00c0
                           0000C1   368 _P4_1	=	0x00c1
                           0000C2   369 _P4_2	=	0x00c2
                           0000C3   370 _P4_3	=	0x00c3
                           0000C4   371 _P4_4	=	0x00c4
                           0000C5   372 _P4_5	=	0x00c5
                           0000C6   373 _P4_6	=	0x00c6
                           0000C7   374 _P4_7	=	0x00c7
                           0000E8   375 _P5_0	=	0x00e8
                           0000E9   376 _P5_1	=	0x00e9
                           0000EA   377 _P5_2	=	0x00ea
                           0000EB   378 _P5_3	=	0x00eb
                           0000EC   379 _P5_4	=	0x00ec
                           0000ED   380 _P5_5	=	0x00ed
                           0000EE   381 _P5_6	=	0x00ee
                           0000EF   382 _P5_7	=	0x00ef
                           0000F0   383 _BREG_F0	=	0x00f0
                           0000F1   384 _BREG_F1	=	0x00f1
                           0000F2   385 _BREG_F2	=	0x00f2
                           0000F3   386 _BREG_F3	=	0x00f3
                           0000F4   387 _BREG_F4	=	0x00f4
                           0000F5   388 _BREG_F5	=	0x00f5
                           0000F6   389 _BREG_F6	=	0x00f6
                           0000F7   390 _BREG_F7	=	0x00f7
                           0000A8   391 _EX0	=	0x00a8
                           0000A9   392 _ET0	=	0x00a9
                           0000AA   393 _EX1	=	0x00aa
                           0000AB   394 _ET1	=	0x00ab
                           0000AC   395 _ES	=	0x00ac
                           0000AF   396 _EA	=	0x00af
                           0000B8   397 _PX0	=	0x00b8
                           0000B9   398 _PT0	=	0x00b9
                           0000BA   399 _PX1	=	0x00ba
                           0000BB   400 _PT1	=	0x00bb
                           0000BC   401 _PS	=	0x00bc
                           000080   402 _P0_0	=	0x0080
                           000081   403 _P0_1	=	0x0081
                           000082   404 _P0_2	=	0x0082
                           000083   405 _P0_3	=	0x0083
                           000084   406 _P0_4	=	0x0084
                           000085   407 _P0_5	=	0x0085
                           000086   408 _P0_6	=	0x0086
                           000087   409 _P0_7	=	0x0087
                           000090   410 _P1_0	=	0x0090
                           000091   411 _P1_1	=	0x0091
                           000092   412 _P1_2	=	0x0092
                           000093   413 _P1_3	=	0x0093
                           000094   414 _P1_4	=	0x0094
                           000095   415 _P1_5	=	0x0095
                           000096   416 _P1_6	=	0x0096
                           000097   417 _P1_7	=	0x0097
                           0000A0   418 _P2_0	=	0x00a0
                           0000A1   419 _P2_1	=	0x00a1
                           0000A2   420 _P2_2	=	0x00a2
                           0000A3   421 _P2_3	=	0x00a3
                           0000A4   422 _P2_4	=	0x00a4
                           0000A5   423 _P2_5	=	0x00a5
                           0000A6   424 _P2_6	=	0x00a6
                           0000A7   425 _P2_7	=	0x00a7
                           0000B0   426 _P3_0	=	0x00b0
                           0000B1   427 _P3_1	=	0x00b1
                           0000B2   428 _P3_2	=	0x00b2
                           0000B3   429 _P3_3	=	0x00b3
                           0000B4   430 _P3_4	=	0x00b4
                           0000B5   431 _P3_5	=	0x00b5
                           0000B6   432 _P3_6	=	0x00b6
                           0000B7   433 _P3_7	=	0x00b7
                           0000B0   434 _RXD	=	0x00b0
                           0000B0   435 _RXD0	=	0x00b0
                           0000B1   436 _TXD	=	0x00b1
                           0000B1   437 _TXD0	=	0x00b1
                           0000B2   438 _INT0	=	0x00b2
                           0000B3   439 _INT1	=	0x00b3
                           0000B4   440 _T0	=	0x00b4
                           0000B5   441 _T1	=	0x00b5
                           0000B6   442 _WR	=	0x00b6
                           0000B7   443 _RD	=	0x00b7
                           0000D0   444 _P	=	0x00d0
                           0000D1   445 _F1	=	0x00d1
                           0000D2   446 _OV	=	0x00d2
                           0000D3   447 _RS0	=	0x00d3
                           0000D4   448 _RS1	=	0x00d4
                           0000D5   449 _F0	=	0x00d5
                           0000D6   450 _AC	=	0x00d6
                           0000D7   451 _CY	=	0x00d7
                           000098   452 _RI	=	0x0098
                           000099   453 _TI	=	0x0099
                           00009A   454 _RB8	=	0x009a
                           00009B   455 _TB8	=	0x009b
                           00009C   456 _REN	=	0x009c
                           00009D   457 _SM2	=	0x009d
                           00009E   458 _SM1	=	0x009e
                           00009F   459 _SM0	=	0x009f
                           000088   460 _IT0	=	0x0088
                           000089   461 _IE0	=	0x0089
                           00008A   462 _IT1	=	0x008a
                           00008B   463 _IE1	=	0x008b
                           00008C   464 _TR0	=	0x008c
                           00008D   465 _TF0	=	0x008d
                           00008E   466 _TR1	=	0x008e
                           00008F   467 _TF1	=	0x008f
                                    468 ;--------------------------------------------------------
                                    469 ; overlayable register banks
                                    470 ;--------------------------------------------------------
                                    471 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        472 	.ds 8
                                    473 ;--------------------------------------------------------
                                    474 ; internal ram data
                                    475 ;--------------------------------------------------------
                                    476 	.area DSEG    (DATA)
      000000                        477 _buffer0::
      000000                        478 	.ds 3
      000003                        479 _buffer1::
      000003                        480 	.ds 3
      000006                        481 _new_buffer::
      000006                        482 	.ds 30
      000024                        483 _new_buffer_size::
      000024                        484 	.ds 20
      000038                        485 _new_buffer_index::
      000038                        486 	.ds 2
      00003A                        487 _num::
      00003A                        488 	.ds 2
      00003C                        489 _buffer_0_and_1_size::
      00003C                        490 	.ds 2
      00003E                        491 _other_buffer_size::
      00003E                        492 	.ds 2
      000040                        493 _total_characters::
      000040                        494 	.ds 2
      000042                        495 _storage_characters_buffer_0::
      000042                        496 	.ds 2
      000044                        497 _gets__ch_65536_50:
      000044                        498 	.ds 2
      000046                        499 _fetch_buffer_size_keep_taking_inputs_65536_57:
      000046                        500 	.ds 1
      000047                        501 _fetch_buffer_size_invalid_character_added_65536_57:
      000047                        502 	.ds 1
      000048                        503 _flush_buffer0_ASCII_print_address_65536_79:
      000048                        504 	.ds 1
      000049                        505 _flush_buffer0_print_address_65536_88:
      000049                        506 	.ds 1
      00004A                        507 _main_stay_65536_111:
      00004A                        508 	.ds 1
      00004B                        509 _main_idx_65537_121:
      00004B                        510 	.ds 2
      00004D                        511 _main_ch_131073_122:
      00004D                        512 	.ds 1
      00004E                        513 _main_i_327682_139:
      00004E                        514 	.ds 2
      000050                        515 _main_i_524291_143:
      000050                        516 	.ds 2
                                    517 ;--------------------------------------------------------
                                    518 ; overlayable items in internal ram
                                    519 ;--------------------------------------------------------
                                    520 	.area	OSEG    (OVR,DATA)
                                    521 	.area	OSEG    (OVR,DATA)
                                    522 	.area	OSEG    (OVR,DATA)
      000000                        523 _clear_buffer_PARM_2:
      000000                        524 	.ds 2
                                    525 ;--------------------------------------------------------
                                    526 ; Stack segment in internal ram
                                    527 ;--------------------------------------------------------
                                    528 	.area	SSEG
      000000                        529 __start__stack:
      000000                        530 	.ds	1
                                    531 
                                    532 ;--------------------------------------------------------
                                    533 ; indirectly addressable internal ram data
                                    534 ;--------------------------------------------------------
                                    535 	.area ISEG    (DATA)
                                    536 ;--------------------------------------------------------
                                    537 ; absolute internal ram data
                                    538 ;--------------------------------------------------------
                                    539 	.area IABS    (ABS,DATA)
                                    540 	.area IABS    (ABS,DATA)
                                    541 ;--------------------------------------------------------
                                    542 ; bit data
                                    543 ;--------------------------------------------------------
                                    544 	.area BSEG    (BIT)
                                    545 ;--------------------------------------------------------
                                    546 ; paged external ram data
                                    547 ;--------------------------------------------------------
                                    548 	.area PSEG    (PAG,XDATA)
                                    549 ;--------------------------------------------------------
                                    550 ; external ram data
                                    551 ;--------------------------------------------------------
                                    552 	.area XSEG    (XDATA)
                                    553 ;--------------------------------------------------------
                                    554 ; absolute external ram data
                                    555 ;--------------------------------------------------------
                                    556 	.area XABS    (ABS,XDATA)
                                    557 ;--------------------------------------------------------
                                    558 ; external initialized ram data
                                    559 ;--------------------------------------------------------
                                    560 	.area XISEG   (XDATA)
                                    561 	.area HOME    (CODE)
                                    562 	.area GSINIT0 (CODE)
                                    563 	.area GSINIT1 (CODE)
                                    564 	.area GSINIT2 (CODE)
                                    565 	.area GSINIT3 (CODE)
                                    566 	.area GSINIT4 (CODE)
                                    567 	.area GSINIT5 (CODE)
                                    568 	.area GSINIT  (CODE)
                                    569 	.area GSFINAL (CODE)
                                    570 	.area CSEG    (CODE)
                                    571 ;--------------------------------------------------------
                                    572 ; interrupt vector
                                    573 ;--------------------------------------------------------
                                    574 	.area HOME    (CODE)
      000000                        575 __interrupt_vect:
      000000 02r00r00         [24]  576 	ljmp	__sdcc_gsinit_startup
                                    577 ;--------------------------------------------------------
                                    578 ; global & static initialisations
                                    579 ;--------------------------------------------------------
                                    580 	.area HOME    (CODE)
                                    581 	.area GSINIT  (CODE)
                                    582 	.area GSFINAL (CODE)
                                    583 	.area GSINIT  (CODE)
                                    584 	.globl __sdcc_gsinit_startup
                                    585 	.globl __sdcc_program_startup
                                    586 	.globl __start__stack
                                    587 	.globl __mcs51_genXINIT
                                    588 	.globl __mcs51_genXRAMCLEAR
                                    589 	.globl __mcs51_genRAMCLEAR
                                    590 ;	main.c:11: char* buffer0 = NULL;
      000000 E4               [12]  591 	clr	a
      000001 F5*00            [12]  592 	mov	_buffer0,a
      000003 F5*01            [12]  593 	mov	(_buffer0 + 1),a
                                    594 ;	1-genFromRTrack replaced	mov	(_buffer0 + 2),#0x00
      000005 F5*02            [12]  595 	mov	(_buffer0 + 2),a
                                    596 ;	main.c:12: char* buffer1 = NULL;
      000007 F5*03            [12]  597 	mov	_buffer1,a
      000009 F5*04            [12]  598 	mov	(_buffer1 + 1),a
                                    599 ;	1-genFromRTrack replaced	mov	(_buffer1 + 2),#0x00
      00000B F5*05            [12]  600 	mov	(_buffer1 + 2),a
                                    601 ;	main.c:18: int new_buffer_index = 0;
      00000D F5*38            [12]  602 	mov	_new_buffer_index,a
      00000F F5*39            [12]  603 	mov	(_new_buffer_index + 1),a
                                    604 ;	main.c:20: int num = 0;
      000011 F5*3A            [12]  605 	mov	_num,a
      000013 F5*3B            [12]  606 	mov	(_num + 1),a
                                    607 ;	main.c:22: int buffer_0_and_1_size = 0;
      000015 F5*3C            [12]  608 	mov	_buffer_0_and_1_size,a
      000017 F5*3D            [12]  609 	mov	(_buffer_0_and_1_size + 1),a
                                    610 ;	main.c:24: int other_buffer_size = 0;
      000019 F5*3E            [12]  611 	mov	_other_buffer_size,a
      00001B F5*3F            [12]  612 	mov	(_other_buffer_size + 1),a
                                    613 ;	main.c:28: int total_characters = 0;  // storage + command characters
      00001D F5*40            [12]  614 	mov	_total_characters,a
      00001F F5*41            [12]  615 	mov	(_total_characters + 1),a
                                    616 ;	main.c:31: int storage_characters_buffer_0 = 0;
      000021 F5*42            [12]  617 	mov	_storage_characters_buffer_0,a
      000023 F5*43            [12]  618 	mov	(_storage_characters_buffer_0 + 1),a
                                    619 	.area GSFINAL (CODE)
      000000 02r00r03         [24]  620 	ljmp	__sdcc_program_startup
                                    621 ;--------------------------------------------------------
                                    622 ; Home
                                    623 ;--------------------------------------------------------
                                    624 	.area HOME    (CODE)
                                    625 	.area HOME    (CODE)
      000003                        626 __sdcc_program_startup:
      000003 02r08r23         [24]  627 	ljmp	_main
                                    628 ;	return from main will return to caller
                                    629 ;--------------------------------------------------------
                                    630 ; code
                                    631 ;--------------------------------------------------------
                                    632 	.area CSEG    (CODE)
                                    633 ;------------------------------------------------------------
                                    634 ;Allocation info for local variables in function '_sdcc_external_startup'
                                    635 ;------------------------------------------------------------
                                    636 ;	main.c:61: _sdcc_external_startup()
                                    637 ;	-----------------------------------------
                                    638 ;	 function _sdcc_external_startup
                                    639 ;	-----------------------------------------
      000000                        640 __sdcc_external_startup:
                           000007   641 	ar7 = 0x07
                           000006   642 	ar6 = 0x06
                           000005   643 	ar5 = 0x05
                           000004   644 	ar4 = 0x04
                           000003   645 	ar3 = 0x03
                           000002   646 	ar2 = 0x02
                           000001   647 	ar1 = 0x01
                           000000   648 	ar0 = 0x00
                                    649 ;	main.c:63: AUXR |= (XRS1 | XRS0);
      000000 43 8E 0C         [24]  650 	orl	_AUXR,#0x0c
                                    651 ;	main.c:64: return 0;
      000003 90 00 00         [24]  652 	mov	dptr,#0x0000
                                    653 ;	main.c:65: }
      000006 22               [24]  654 	ret
                                    655 ;------------------------------------------------------------
                                    656 ;Allocation info for local variables in function 'getchar'
                                    657 ;------------------------------------------------------------
                                    658 ;	main.c:67: int getchar (void)
                                    659 ;	-----------------------------------------
                                    660 ;	 function getchar
                                    661 ;	-----------------------------------------
      000007                        662 _getchar:
                                    663 ;	main.c:69: while (!RI); //Wait till the Character is received
      000007                        664 00101$:
                                    665 ;	main.c:70: RI = 0;			// Clear the RI flag
                                    666 ;	assignBit
      000007 10 98 02         [24]  667 	jbc	_RI,00114$
      00000A 80 FB            [24]  668 	sjmp	00101$
      00000C                        669 00114$:
                                    670 ;	main.c:71: return SBUF;  	// Return the Character
      00000C AE 99            [24]  671 	mov	r6,_SBUF
      00000E 7F 00            [12]  672 	mov	r7,#0x00
      000010 8E 82            [24]  673 	mov	dpl,r6
      000012 8F 83            [24]  674 	mov	dph,r7
                                    675 ;	main.c:72: }
      000014 22               [24]  676 	ret
                                    677 ;------------------------------------------------------------
                                    678 ;Allocation info for local variables in function 'putchar'
                                    679 ;------------------------------------------------------------
                                    680 ;c                         Allocated to registers r6 r7 
                                    681 ;------------------------------------------------------------
                                    682 ;	main.c:74: int putchar (int c)
                                    683 ;	-----------------------------------------
                                    684 ;	 function putchar
                                    685 ;	-----------------------------------------
      000015                        686 _putchar:
      000015 AE 82            [24]  687 	mov	r6,dpl
      000017 AF 83            [24]  688 	mov	r7,dph
                                    689 ;	main.c:76: while(!TI); //Wait till the Transmitter is ready
      000019                        690 00101$:
      000019 30 99 FD         [24]  691 	jnb	_TI,00101$
                                    692 ;	main.c:77: SBUF = c; //write character to SBUF
      00001C 8E 99            [24]  693 	mov	_SBUF,r6
                                    694 ;	main.c:78: TI = 0; //Clear the TI flag
                                    695 ;	assignBit
      00001E C2 99            [12]  696 	clr	_TI
                                    697 ;	main.c:79: return c;
      000020 8E 82            [24]  698 	mov	dpl,r6
      000022 8F 83            [24]  699 	mov	dph,r7
                                    700 ;	main.c:80: }
      000024 22               [24]  701 	ret
                                    702 ;------------------------------------------------------------
                                    703 ;Allocation info for local variables in function 'putchar_'
                                    704 ;------------------------------------------------------------
                                    705 ;c                         Allocated to registers r7 
                                    706 ;------------------------------------------------------------
                                    707 ;	main.c:82: int putchar_ (char c)
                                    708 ;	-----------------------------------------
                                    709 ;	 function putchar_
                                    710 ;	-----------------------------------------
      000025                        711 _putchar_:
      000025 AF 82            [24]  712 	mov	r7,dpl
                                    713 ;	main.c:86: while (!TI);
      000027                        714 00101$:
      000027 30 99 FD         [24]  715 	jnb	_TI,00101$
                                    716 ;	main.c:87: SBUF = c;           // load serial port with transmit value
      00002A 8F 99            [24]  717 	mov	_SBUF,r7
                                    718 ;	main.c:88: TI = 0;  // clear TI flag
                                    719 ;	assignBit
      00002C C2 99            [12]  720 	clr	_TI
                                    721 ;	main.c:89: return c;
      00002E 7E 00            [12]  722 	mov	r6,#0x00
      000030 8F 82            [24]  723 	mov	dpl,r7
      000032 8E 83            [24]  724 	mov	dph,r6
                                    725 ;	main.c:90: }
      000034 22               [24]  726 	ret
                                    727 ;------------------------------------------------------------
                                    728 ;Allocation info for local variables in function 'getchar_'
                                    729 ;------------------------------------------------------------
                                    730 ;	main.c:93: char getchar_ ()
                                    731 ;	-----------------------------------------
                                    732 ;	 function getchar_
                                    733 ;	-----------------------------------------
      000035                        734 _getchar_:
                                    735 ;	main.c:99: while (!RI);
      000035                        736 00101$:
                                    737 ;	main.c:101: RI = 0;                         // clear RI flag
                                    738 ;	assignBit
      000035 10 98 02         [24]  739 	jbc	_RI,00114$
      000038 80 FB            [24]  740 	sjmp	00101$
      00003A                        741 00114$:
                                    742 ;	main.c:103: return SBUF;                    // return character from SBUF
      00003A 85 99 82         [24]  743 	mov	dpl,_SBUF
                                    744 ;	main.c:104: }
      00003D 22               [24]  745 	ret
                                    746 ;------------------------------------------------------------
                                    747 ;Allocation info for local variables in function 'gets_'
                                    748 ;------------------------------------------------------------
                                    749 ;ch                        Allocated with name '_gets__ch_65536_50'
                                    750 ;i                         Allocated to registers r1 r2 
                                    751 ;temp                      Allocated to registers 
                                    752 ;c                         Allocated to registers r6 
                                    753 ;------------------------------------------------------------
                                    754 ;	main.c:119: void gets_(__xdata char *ch)
                                    755 ;	-----------------------------------------
                                    756 ;	 function gets_
                                    757 ;	-----------------------------------------
      00003E                        758 _gets_:
      00003E 85 82*44         [24]  759 	mov	_gets__ch_65536_50,dpl
      000041 85 83*45         [24]  760 	mov	(_gets__ch_65536_50 + 1),dph
                                    761 ;	main.c:123: char* temp = ch;
      000044 AB*44            [24]  762 	mov	r3,_gets__ch_65536_50
      000046 AC*45            [24]  763 	mov	r4,(_gets__ch_65536_50 + 1)
      000048 7D 00            [12]  764 	mov	r5,#0x00
                                    765 ;	main.c:125: while( *(ch+i) != '\0' )
      00004A 79 00            [12]  766 	mov	r1,#0x00
      00004C 7A 00            [12]  767 	mov	r2,#0x00
      00004E                        768 00101$:
      00004E E9               [12]  769 	mov	a,r1
      00004F 25*44            [12]  770 	add	a,_gets__ch_65536_50
      000051 F8               [12]  771 	mov	r0,a
      000052 EA               [12]  772 	mov	a,r2
      000053 35*45            [12]  773 	addc	a,(_gets__ch_65536_50 + 1)
      000055 FF               [12]  774 	mov	r7,a
      000056 88 82            [24]  775 	mov	dpl,r0
      000058 8F 83            [24]  776 	mov	dph,r7
      00005A E0               [24]  777 	movx	a,@dptr
      00005B 60 52            [24]  778 	jz	00104$
                                    779 ;	main.c:130: char c = getchar();
      00005D C0 05            [24]  780 	push	ar5
      00005F C0 04            [24]  781 	push	ar4
      000061 C0 03            [24]  782 	push	ar3
      000063 C0 02            [24]  783 	push	ar2
      000065 C0 01            [24]  784 	push	ar1
      000067 12r00r07         [24]  785 	lcall	_getchar
      00006A AE 82            [24]  786 	mov	r6,dpl
      00006C D0 01            [24]  787 	pop	ar1
      00006E D0 02            [24]  788 	pop	ar2
      000070 D0 03            [24]  789 	pop	ar3
      000072 D0 04            [24]  790 	pop	ar4
      000074 D0 05            [24]  791 	pop	ar5
                                    792 ;	main.c:131: putchar(c);
      000076 8E 00            [24]  793 	mov	ar0,r6
      000078 7F 00            [12]  794 	mov	r7,#0x00
      00007A 88 82            [24]  795 	mov	dpl,r0
      00007C 8F 83            [24]  796 	mov	dph,r7
      00007E C0 06            [24]  797 	push	ar6
      000080 C0 05            [24]  798 	push	ar5
      000082 C0 04            [24]  799 	push	ar4
      000084 C0 03            [24]  800 	push	ar3
      000086 C0 02            [24]  801 	push	ar2
      000088 C0 01            [24]  802 	push	ar1
      00008A 12r00r15         [24]  803 	lcall	_putchar
      00008D D0 01            [24]  804 	pop	ar1
      00008F D0 02            [24]  805 	pop	ar2
      000091 D0 03            [24]  806 	pop	ar3
      000093 D0 04            [24]  807 	pop	ar4
      000095 D0 05            [24]  808 	pop	ar5
      000097 D0 06            [24]  809 	pop	ar6
                                    810 ;	main.c:133: *temp = c;
      000099 8B 82            [24]  811 	mov	dpl,r3
      00009B 8C 83            [24]  812 	mov	dph,r4
      00009D 8D F0            [24]  813 	mov	b,r5
      00009F EE               [12]  814 	mov	a,r6
      0000A0 12r00r00         [24]  815 	lcall	__gptrput
      0000A3 A3               [24]  816 	inc	dptr
      0000A4 AB 82            [24]  817 	mov	r3,dpl
      0000A6 AC 83            [24]  818 	mov	r4,dph
                                    819 ;	main.c:135: temp++;
                                    820 ;	main.c:137: i++;
      0000A8 09               [12]  821 	inc	r1
      0000A9 B9 00 A2         [24]  822 	cjne	r1,#0x00,00101$
      0000AC 0A               [12]  823 	inc	r2
      0000AD 80 9F            [24]  824 	sjmp	00101$
      0000AF                        825 00104$:
                                    826 ;	main.c:139: }
      0000AF 22               [24]  827 	ret
                                    828 ;------------------------------------------------------------
                                    829 ;Allocation info for local variables in function 'puts_'
                                    830 ;------------------------------------------------------------
                                    831 ;ch                        Allocated to registers r6 r7 
                                    832 ;temp                      Allocated to registers 
                                    833 ;------------------------------------------------------------
                                    834 ;	main.c:141: void puts_(__xdata char *ch)
                                    835 ;	-----------------------------------------
                                    836 ;	 function puts_
                                    837 ;	-----------------------------------------
      0000B0                        838 _puts_:
      0000B0 AE 82            [24]  839 	mov	r6,dpl
                                    840 ;	main.c:143: char* temp = ch;
      0000B2 AD 83            [24]  841 	mov	r5,dph
      0000B4 7F 00            [12]  842 	mov	r7,#0x00
                                    843 ;	main.c:145: while(*(temp) != '\0' )
      0000B6                        844 00101$:
      0000B6 8E 82            [24]  845 	mov	dpl,r6
      0000B8 8D 83            [24]  846 	mov	dph,r5
      0000BA 8F F0            [24]  847 	mov	b,r7
      0000BC 12r00r00         [24]  848 	lcall	__gptrget
      0000BF FC               [12]  849 	mov	r4,a
      0000C0 60 1C            [24]  850 	jz	00104$
                                    851 ;	main.c:147: putchar(*temp);
      0000C2 7B 00            [12]  852 	mov	r3,#0x00
      0000C4 8C 82            [24]  853 	mov	dpl,r4
      0000C6 8B 83            [24]  854 	mov	dph,r3
      0000C8 C0 07            [24]  855 	push	ar7
      0000CA C0 06            [24]  856 	push	ar6
      0000CC C0 05            [24]  857 	push	ar5
      0000CE 12r00r15         [24]  858 	lcall	_putchar
      0000D1 D0 05            [24]  859 	pop	ar5
      0000D3 D0 06            [24]  860 	pop	ar6
      0000D5 D0 07            [24]  861 	pop	ar7
                                    862 ;	main.c:149: temp++;
      0000D7 0E               [12]  863 	inc	r6
      0000D8 BE 00 DB         [24]  864 	cjne	r6,#0x00,00101$
      0000DB 0D               [12]  865 	inc	r5
      0000DC 80 D8            [24]  866 	sjmp	00101$
      0000DE                        867 00104$:
                                    868 ;	main.c:151: }
      0000DE 22               [24]  869 	ret
                                    870 ;------------------------------------------------------------
                                    871 ;Allocation info for local variables in function 'fetch_buffer_size'
                                    872 ;------------------------------------------------------------
                                    873 ;type                      Allocated to registers r7 
                                    874 ;num                       Allocated to registers r4 r5 
                                    875 ;temp                      Allocated to registers r1 r3 
                                    876 ;keep_taking_inputs        Allocated with name '_fetch_buffer_size_keep_taking_inputs_65536_57'
                                    877 ;invalid_character_added   Allocated with name '_fetch_buffer_size_invalid_character_added_65536_57'
                                    878 ;ch                        Allocated to registers r2 
                                    879 ;------------------------------------------------------------
                                    880 ;	main.c:169: int fetch_buffer_size(buffer_type type)
                                    881 ;	-----------------------------------------
                                    882 ;	 function fetch_buffer_size
                                    883 ;	-----------------------------------------
      0000DF                        884 _fetch_buffer_size:
      0000DF AF 82            [24]  885 	mov	r7,dpl
                                    886 ;	main.c:178: Take_user_input:
      0000E1 E4               [12]  887 	clr	a
      0000E2 BF 02 01         [24]  888 	cjne	r7,#0x02,00206$
      0000E5 04               [12]  889 	inc	a
      0000E6                        890 00206$:
      0000E6 FE               [12]  891 	mov	r6,a
      0000E7                        892 00101$:
                                    893 ;	main.c:180: num = 0;
      0000E7 7C 00            [12]  894 	mov	r4,#0x00
      0000E9 7D 00            [12]  895 	mov	r5,#0x00
                                    896 ;	main.c:182: printf_tiny("\n\r");
      0000EB C0 07            [24]  897 	push	ar7
      0000ED C0 06            [24]  898 	push	ar6
      0000EF C0 05            [24]  899 	push	ar5
      0000F1 C0 04            [24]  900 	push	ar4
      0000F3 74r00            [12]  901 	mov	a,#___str_0
      0000F5 C0 E0            [24]  902 	push	acc
      0000F7 74s00            [12]  903 	mov	a,#(___str_0 >> 8)
      0000F9 C0 E0            [24]  904 	push	acc
      0000FB 12r00r00         [24]  905 	lcall	_printf_tiny
      0000FE 15 81            [12]  906 	dec	sp
      000100 15 81            [12]  907 	dec	sp
      000102 D0 04            [24]  908 	pop	ar4
      000104 D0 05            [24]  909 	pop	ar5
      000106 D0 06            [24]  910 	pop	ar6
      000108 D0 07            [24]  911 	pop	ar7
                                    912 ;	main.c:183: if(type == type_buffer0_and_1)
      00010A EF               [12]  913 	mov	a,r7
      00010B 70 5D            [24]  914 	jnz	00105$
                                    915 ;	main.c:185: printf_tiny("************* Buffer Size Req **********************\n\r");
      00010D C0 07            [24]  916 	push	ar7
      00010F C0 06            [24]  917 	push	ar6
      000111 C0 05            [24]  918 	push	ar5
      000113 C0 04            [24]  919 	push	ar4
      000115 74r03            [12]  920 	mov	a,#___str_1
      000117 C0 E0            [24]  921 	push	acc
      000119 74s00            [12]  922 	mov	a,#(___str_1 >> 8)
      00011B C0 E0            [24]  923 	push	acc
      00011D 12r00r00         [24]  924 	lcall	_printf_tiny
      000120 15 81            [12]  925 	dec	sp
      000122 15 81            [12]  926 	dec	sp
                                    927 ;	main.c:186: printf_tiny("*  Size should be b/w 64 and 5600 bytes inclusive  *\n\r");
      000124 74r3A            [12]  928 	mov	a,#___str_2
      000126 C0 E0            [24]  929 	push	acc
      000128 74s00            [12]  930 	mov	a,#(___str_2 >> 8)
      00012A C0 E0            [24]  931 	push	acc
      00012C 12r00r00         [24]  932 	lcall	_printf_tiny
      00012F 15 81            [12]  933 	dec	sp
      000131 15 81            [12]  934 	dec	sp
                                    935 ;	main.c:187: printf_tiny("*  Digits should be from 0-9                       *\n\r");
      000133 74r71            [12]  936 	mov	a,#___str_3
      000135 C0 E0            [24]  937 	push	acc
      000137 74s00            [12]  938 	mov	a,#(___str_3 >> 8)
      000139 C0 E0            [24]  939 	push	acc
      00013B 12r00r00         [24]  940 	lcall	_printf_tiny
      00013E 15 81            [12]  941 	dec	sp
      000140 15 81            [12]  942 	dec	sp
                                    943 ;	main.c:188: printf_tiny("*  It should be divisible by 32                    *\n\r");
      000142 74rA8            [12]  944 	mov	a,#___str_4
      000144 C0 E0            [24]  945 	push	acc
      000146 74s00            [12]  946 	mov	a,#(___str_4 >> 8)
      000148 C0 E0            [24]  947 	push	acc
      00014A 12r00r00         [24]  948 	lcall	_printf_tiny
      00014D 15 81            [12]  949 	dec	sp
      00014F 15 81            [12]  950 	dec	sp
                                    951 ;	main.c:189: printf_tiny("****************************************************\n\r");
      000151 74rDF            [12]  952 	mov	a,#___str_5
      000153 C0 E0            [24]  953 	push	acc
      000155 74s00            [12]  954 	mov	a,#(___str_5 >> 8)
      000157 C0 E0            [24]  955 	push	acc
      000159 12r00r00         [24]  956 	lcall	_printf_tiny
      00015C 15 81            [12]  957 	dec	sp
      00015E 15 81            [12]  958 	dec	sp
      000160 D0 04            [24]  959 	pop	ar4
      000162 D0 05            [24]  960 	pop	ar5
      000164 D0 06            [24]  961 	pop	ar6
      000166 D0 07            [24]  962 	pop	ar7
      000168 80 4F            [24]  963 	sjmp	00106$
      00016A                        964 00105$:
                                    965 ;	main.c:191: else if(type == type_other_buffer)
      00016A EE               [12]  966 	mov	a,r6
      00016B 60 4C            [24]  967 	jz	00106$
                                    968 ;	main.c:193: printf_tiny("************* Buffer Size Req **********************\n\r");
      00016D C0 07            [24]  969 	push	ar7
      00016F C0 06            [24]  970 	push	ar6
      000171 C0 05            [24]  971 	push	ar5
      000173 C0 04            [24]  972 	push	ar4
      000175 74r03            [12]  973 	mov	a,#___str_1
      000177 C0 E0            [24]  974 	push	acc
      000179 74s00            [12]  975 	mov	a,#(___str_1 >> 8)
      00017B C0 E0            [24]  976 	push	acc
      00017D 12r00r00         [24]  977 	lcall	_printf_tiny
      000180 15 81            [12]  978 	dec	sp
      000182 15 81            [12]  979 	dec	sp
                                    980 ;	main.c:194: printf_tiny("*  Size should be b/w 30 and 300 bytes inclusive   *\n\r");
      000184 74r16            [12]  981 	mov	a,#___str_6
      000186 C0 E0            [24]  982 	push	acc
      000188 74s01            [12]  983 	mov	a,#(___str_6 >> 8)
      00018A C0 E0            [24]  984 	push	acc
      00018C 12r00r00         [24]  985 	lcall	_printf_tiny
      00018F 15 81            [12]  986 	dec	sp
      000191 15 81            [12]  987 	dec	sp
                                    988 ;	main.c:195: printf_tiny("*  Digits should be from 0-9                       *\n\r");
      000193 74r71            [12]  989 	mov	a,#___str_3
      000195 C0 E0            [24]  990 	push	acc
      000197 74s00            [12]  991 	mov	a,#(___str_3 >> 8)
      000199 C0 E0            [24]  992 	push	acc
      00019B 12r00r00         [24]  993 	lcall	_printf_tiny
      00019E 15 81            [12]  994 	dec	sp
      0001A0 15 81            [12]  995 	dec	sp
                                    996 ;	main.c:196: printf_tiny("****************************************************\n\r");
      0001A2 74rDF            [12]  997 	mov	a,#___str_5
      0001A4 C0 E0            [24]  998 	push	acc
      0001A6 74s00            [12]  999 	mov	a,#(___str_5 >> 8)
      0001A8 C0 E0            [24] 1000 	push	acc
      0001AA 12r00r00         [24] 1001 	lcall	_printf_tiny
      0001AD 15 81            [12] 1002 	dec	sp
      0001AF 15 81            [12] 1003 	dec	sp
      0001B1 D0 04            [24] 1004 	pop	ar4
      0001B3 D0 05            [24] 1005 	pop	ar5
      0001B5 D0 06            [24] 1006 	pop	ar6
      0001B7 D0 07            [24] 1007 	pop	ar7
      0001B9                       1008 00106$:
                                   1009 ;	main.c:199: printf_tiny("\n\rEnter a valid buffer size : ");
      0001B9 C0 07            [24] 1010 	push	ar7
      0001BB C0 06            [24] 1011 	push	ar6
      0001BD C0 05            [24] 1012 	push	ar5
      0001BF C0 04            [24] 1013 	push	ar4
      0001C1 74r4D            [12] 1014 	mov	a,#___str_7
      0001C3 C0 E0            [24] 1015 	push	acc
      0001C5 74s01            [12] 1016 	mov	a,#(___str_7 >> 8)
      0001C7 C0 E0            [24] 1017 	push	acc
      0001C9 12r00r00         [24] 1018 	lcall	_printf_tiny
      0001CC 15 81            [12] 1019 	dec	sp
      0001CE 15 81            [12] 1020 	dec	sp
      0001D0 D0 04            [24] 1021 	pop	ar4
      0001D2 D0 05            [24] 1022 	pop	ar5
      0001D4 D0 06            [24] 1023 	pop	ar6
      0001D6 D0 07            [24] 1024 	pop	ar7
                                   1025 ;	main.c:201: keep_taking_inputs = true;
      0001D8 75*46 01         [24] 1026 	mov	_fetch_buffer_size_keep_taking_inputs_65536_57,#0x01
                                   1027 ;	main.c:202: invalid_character_added = false;
      0001DB 75*47 00         [24] 1028 	mov	_fetch_buffer_size_invalid_character_added_65536_57,#0x00
                                   1029 ;	main.c:203: while(keep_taking_inputs)
      0001DE                       1030 00115$:
      0001DE E5*46            [12] 1031 	mov	a,_fetch_buffer_size_keep_taking_inputs_65536_57
      0001E0 60 76            [24] 1032 	jz	00117$
                                   1033 ;	main.c:205: char ch = getchar();
      0001E2 C0 07            [24] 1034 	push	ar7
      0001E4 C0 06            [24] 1035 	push	ar6
      0001E6 C0 05            [24] 1036 	push	ar5
      0001E8 C0 04            [24] 1037 	push	ar4
      0001EA 12r00r07         [24] 1038 	lcall	_getchar
      0001ED AA 82            [24] 1039 	mov	r2,dpl
                                   1040 ;	main.c:206: putchar(ch);
      0001EF 8A 01            [24] 1041 	mov	ar1,r2
      0001F1 7B 00            [12] 1042 	mov	r3,#0x00
      0001F3 89 82            [24] 1043 	mov	dpl,r1
      0001F5 8B 83            [24] 1044 	mov	dph,r3
      0001F7 C0 03            [24] 1045 	push	ar3
      0001F9 C0 02            [24] 1046 	push	ar2
      0001FB C0 01            [24] 1047 	push	ar1
      0001FD 12r00r15         [24] 1048 	lcall	_putchar
      000200 D0 01            [24] 1049 	pop	ar1
      000202 D0 02            [24] 1050 	pop	ar2
      000204 D0 03            [24] 1051 	pop	ar3
      000206 D0 04            [24] 1052 	pop	ar4
      000208 D0 05            [24] 1053 	pop	ar5
      00020A D0 06            [24] 1054 	pop	ar6
      00020C D0 07            [24] 1055 	pop	ar7
                                   1056 ;	main.c:208: if(ch >= '0' && ch <= '9' &&
      00020E BA 30 00         [24] 1057 	cjne	r2,#0x30,00211$
      000211                       1058 00211$:
      000211 40 38            [24] 1059 	jc	00111$
      000213 EA               [12] 1060 	mov	a,r2
      000214 24 C6            [12] 1061 	add	a,#0xff - 0x39
      000216 40 33            [24] 1062 	jc	00111$
                                   1063 ;	main.c:209: invalid_character_added == false)
      000218 E5*47            [12] 1064 	mov	a,_fetch_buffer_size_invalid_character_added_65536_57
      00021A 70 2F            [24] 1065 	jnz	00111$
                                   1066 ;	main.c:212: temp = ch - '0';
      00021C E9               [12] 1067 	mov	a,r1
      00021D 24 D0            [12] 1068 	add	a,#0xd0
      00021F F9               [12] 1069 	mov	r1,a
      000220 EB               [12] 1070 	mov	a,r3
      000221 34 FF            [12] 1071 	addc	a,#0xff
      000223 FB               [12] 1072 	mov	r3,a
                                   1073 ;	main.c:214: num = num * 10 + temp;
      000224 8C*00            [24] 1074 	mov	__mulint_PARM_2,r4
      000226 8D*01            [24] 1075 	mov	(__mulint_PARM_2 + 1),r5
      000228 90 00 0A         [24] 1076 	mov	dptr,#0x000a
      00022B C0 07            [24] 1077 	push	ar7
      00022D C0 06            [24] 1078 	push	ar6
      00022F C0 03            [24] 1079 	push	ar3
      000231 C0 01            [24] 1080 	push	ar1
      000233 12r00r00         [24] 1081 	lcall	__mulint
      000236 E5 82            [12] 1082 	mov	a,dpl
      000238 85 83 F0         [24] 1083 	mov	b,dph
      00023B D0 01            [24] 1084 	pop	ar1
      00023D D0 03            [24] 1085 	pop	ar3
      00023F D0 06            [24] 1086 	pop	ar6
      000241 D0 07            [24] 1087 	pop	ar7
      000243 29               [12] 1088 	add	a,r1
      000244 FC               [12] 1089 	mov	r4,a
      000245 EB               [12] 1090 	mov	a,r3
      000246 35 F0            [12] 1091 	addc	a,b
      000248 FD               [12] 1092 	mov	r5,a
      000249 80 93            [24] 1093 	sjmp	00115$
      00024B                       1094 00111$:
                                   1095 ;	main.c:216: else if(ch == '\r') // enter pressed
      00024B BA 0D 05         [24] 1096 	cjne	r2,#0x0d,00108$
                                   1097 ;	main.c:218: keep_taking_inputs = false;
      00024E 75*46 00         [24] 1098 	mov	_fetch_buffer_size_keep_taking_inputs_65536_57,#0x00
      000251 80 8B            [24] 1099 	sjmp	00115$
      000253                       1100 00108$:
                                   1101 ;	main.c:222: invalid_character_added = true;
      000253 75*47 01         [24] 1102 	mov	_fetch_buffer_size_invalid_character_added_65536_57,#0x01
      000256 80 86            [24] 1103 	sjmp	00115$
      000258                       1104 00117$:
                                   1105 ;	main.c:225: printf_tiny("\n\r");
      000258 C0 07            [24] 1106 	push	ar7
      00025A C0 06            [24] 1107 	push	ar6
      00025C C0 05            [24] 1108 	push	ar5
      00025E C0 04            [24] 1109 	push	ar4
      000260 74r00            [12] 1110 	mov	a,#___str_0
      000262 C0 E0            [24] 1111 	push	acc
      000264 74s00            [12] 1112 	mov	a,#(___str_0 >> 8)
      000266 C0 E0            [24] 1113 	push	acc
      000268 12r00r00         [24] 1114 	lcall	_printf_tiny
      00026B 15 81            [12] 1115 	dec	sp
      00026D 15 81            [12] 1116 	dec	sp
      00026F D0 04            [24] 1117 	pop	ar4
      000271 D0 05            [24] 1118 	pop	ar5
      000273 D0 06            [24] 1119 	pop	ar6
      000275 D0 07            [24] 1120 	pop	ar7
                                   1121 ;	main.c:227: if(invalid_character_added)
      000277 E5*47            [12] 1122 	mov	a,_fetch_buffer_size_invalid_character_added_65536_57
      000279 60 1A            [24] 1123 	jz	00119$
                                   1124 ;	main.c:229: printf_tiny("\n\rFAILURE: Invalid character added, now enter a valid size\n\r");
      00027B C0 07            [24] 1125 	push	ar7
      00027D C0 06            [24] 1126 	push	ar6
      00027F 74r6C            [12] 1127 	mov	a,#___str_8
      000281 C0 E0            [24] 1128 	push	acc
      000283 74s01            [12] 1129 	mov	a,#(___str_8 >> 8)
      000285 C0 E0            [24] 1130 	push	acc
      000287 12r00r00         [24] 1131 	lcall	_printf_tiny
      00028A 15 81            [12] 1132 	dec	sp
      00028C 15 81            [12] 1133 	dec	sp
      00028E D0 06            [24] 1134 	pop	ar6
      000290 D0 07            [24] 1135 	pop	ar7
                                   1136 ;	main.c:230: goto Take_user_input;
      000292 02r00rE7         [24] 1137 	ljmp	00101$
      000295                       1138 00119$:
                                   1139 ;	main.c:233: if(type == type_buffer0_and_1)
      000295 EF               [12] 1140 	mov	a,r7
      000296 60 03            [24] 1141 	jz	00218$
      000298 02r03r27         [24] 1142 	ljmp	00134$
      00029B                       1143 00218$:
                                   1144 ;	main.c:235: if(num >= 64 && num <= 5600)
      00029B C3               [12] 1145 	clr	c
      00029C EC               [12] 1146 	mov	a,r4
      00029D 94 40            [12] 1147 	subb	a,#0x40
      00029F ED               [12] 1148 	mov	a,r5
      0002A0 64 80            [12] 1149 	xrl	a,#0x80
      0002A2 94 80            [12] 1150 	subb	a,#0x80
      0002A4 40 67            [24] 1151 	jc	00124$
      0002A6 74 E0            [12] 1152 	mov	a,#0xe0
      0002A8 9C               [12] 1153 	subb	a,r4
      0002A9 74 95            [12] 1154 	mov	a,#(0x15 ^ 0x80)
      0002AB 8D F0            [24] 1155 	mov	b,r5
      0002AD 63 F0 80         [24] 1156 	xrl	b,#0x80
      0002B0 95 F0            [12] 1157 	subb	a,b
      0002B2 40 59            [24] 1158 	jc	00124$
                                   1159 ;	main.c:237: if(num % 32 == 0)
      0002B4 75*00 20         [24] 1160 	mov	__modsint_PARM_2,#0x20
      0002B7 75*01 00         [24] 1161 	mov	(__modsint_PARM_2 + 1),#0x00
      0002BA 8C 82            [24] 1162 	mov	dpl,r4
      0002BC 8D 83            [24] 1163 	mov	dph,r5
      0002BE C0 07            [24] 1164 	push	ar7
      0002C0 C0 06            [24] 1165 	push	ar6
      0002C2 C0 05            [24] 1166 	push	ar5
      0002C4 C0 04            [24] 1167 	push	ar4
      0002C6 12r00r00         [24] 1168 	lcall	__modsint
      0002C9 E5 82            [12] 1169 	mov	a,dpl
      0002CB 85 83 F0         [24] 1170 	mov	b,dph
      0002CE D0 04            [24] 1171 	pop	ar4
      0002D0 D0 05            [24] 1172 	pop	ar5
      0002D2 D0 06            [24] 1173 	pop	ar6
      0002D4 D0 07            [24] 1174 	pop	ar7
      0002D6 45 F0            [12] 1175 	orl	a,b
      0002D8 70 19            [24] 1176 	jnz	00121$
                                   1177 ;	main.c:240: printf_tiny("\n\rSUCCESS: Valid divisible by 32 size entered\n\r");
      0002DA C0 05            [24] 1178 	push	ar5
      0002DC C0 04            [24] 1179 	push	ar4
      0002DE 74rA9            [12] 1180 	mov	a,#___str_9
      0002E0 C0 E0            [24] 1181 	push	acc
      0002E2 74s01            [12] 1182 	mov	a,#(___str_9 >> 8)
      0002E4 C0 E0            [24] 1183 	push	acc
      0002E6 12r00r00         [24] 1184 	lcall	_printf_tiny
      0002E9 15 81            [12] 1185 	dec	sp
      0002EB 15 81            [12] 1186 	dec	sp
      0002ED D0 04            [24] 1187 	pop	ar4
      0002EF D0 05            [24] 1188 	pop	ar5
      0002F1 80 7C            [24] 1189 	sjmp	00135$
      0002F3                       1190 00121$:
                                   1191 ;	main.c:247: printf_tiny("\n\rFAILURE: Input not divisible by 32, enter a valid input\n\r");
      0002F3 C0 07            [24] 1192 	push	ar7
      0002F5 C0 06            [24] 1193 	push	ar6
      0002F7 74rD9            [12] 1194 	mov	a,#___str_10
      0002F9 C0 E0            [24] 1195 	push	acc
      0002FB 74s01            [12] 1196 	mov	a,#(___str_10 >> 8)
      0002FD C0 E0            [24] 1197 	push	acc
      0002FF 12r00r00         [24] 1198 	lcall	_printf_tiny
      000302 15 81            [12] 1199 	dec	sp
      000304 15 81            [12] 1200 	dec	sp
      000306 D0 06            [24] 1201 	pop	ar6
      000308 D0 07            [24] 1202 	pop	ar7
                                   1203 ;	main.c:249: goto Take_user_input;
      00030A 02r00rE7         [24] 1204 	ljmp	00101$
      00030D                       1205 00124$:
                                   1206 ;	main.c:254: printf_tiny("\n\rFAILURE: Input data should be in between 60 to 5600\n\r");
      00030D C0 07            [24] 1207 	push	ar7
      00030F C0 06            [24] 1208 	push	ar6
      000311 74r15            [12] 1209 	mov	a,#___str_11
      000313 C0 E0            [24] 1210 	push	acc
      000315 74s02            [12] 1211 	mov	a,#(___str_11 >> 8)
      000317 C0 E0            [24] 1212 	push	acc
      000319 12r00r00         [24] 1213 	lcall	_printf_tiny
      00031C 15 81            [12] 1214 	dec	sp
      00031E 15 81            [12] 1215 	dec	sp
      000320 D0 06            [24] 1216 	pop	ar6
      000322 D0 07            [24] 1217 	pop	ar7
                                   1218 ;	main.c:256: goto Take_user_input;
      000324 02r00rE7         [24] 1219 	ljmp	00101$
      000327                       1220 00134$:
                                   1221 ;	main.c:259: else if(type == type_other_buffer)
      000327 EE               [12] 1222 	mov	a,r6
      000328 60 45            [24] 1223 	jz	00135$
                                   1224 ;	main.c:261: if(num >= 30 && num <= 300)
      00032A C3               [12] 1225 	clr	c
      00032B EC               [12] 1226 	mov	a,r4
      00032C 94 1E            [12] 1227 	subb	a,#0x1e
      00032E ED               [12] 1228 	mov	a,r5
      00032F 64 80            [12] 1229 	xrl	a,#0x80
      000331 94 80            [12] 1230 	subb	a,#0x80
      000333 40 27            [24] 1231 	jc	00128$
      000335 74 2C            [12] 1232 	mov	a,#0x2c
      000337 9C               [12] 1233 	subb	a,r4
      000338 74 81            [12] 1234 	mov	a,#(0x01 ^ 0x80)
      00033A 8D F0            [24] 1235 	mov	b,r5
      00033C 63 F0 80         [24] 1236 	xrl	b,#0x80
      00033F 95 F0            [12] 1237 	subb	a,b
      000341 40 19            [24] 1238 	jc	00128$
                                   1239 ;	main.c:263: printf_tiny("\n\rSUCCESS: Valid buffer size entered\n\r");
      000343 C0 05            [24] 1240 	push	ar5
      000345 C0 04            [24] 1241 	push	ar4
      000347 74r4D            [12] 1242 	mov	a,#___str_12
      000349 C0 E0            [24] 1243 	push	acc
      00034B 74s02            [12] 1244 	mov	a,#(___str_12 >> 8)
      00034D C0 E0            [24] 1245 	push	acc
      00034F 12r00r00         [24] 1246 	lcall	_printf_tiny
      000352 15 81            [12] 1247 	dec	sp
      000354 15 81            [12] 1248 	dec	sp
      000356 D0 04            [24] 1249 	pop	ar4
      000358 D0 05            [24] 1250 	pop	ar5
      00035A 80 13            [24] 1251 	sjmp	00135$
      00035C                       1252 00128$:
                                   1253 ;	main.c:267: printf_tiny("\n\rFAILURE: the buffer size should be in range [30, 300] \n\r");
      00035C 74r74            [12] 1254 	mov	a,#___str_13
      00035E C0 E0            [24] 1255 	push	acc
      000360 74s02            [12] 1256 	mov	a,#(___str_13 >> 8)
      000362 C0 E0            [24] 1257 	push	acc
      000364 12r00r00         [24] 1258 	lcall	_printf_tiny
      000367 15 81            [12] 1259 	dec	sp
      000369 15 81            [12] 1260 	dec	sp
                                   1261 ;	main.c:270: return -1;
      00036B 90 FF FF         [24] 1262 	mov	dptr,#0xffff
      00036E 22               [24] 1263 	ret
      00036F                       1264 00135$:
                                   1265 ;	main.c:274: return num;
      00036F 8C 82            [24] 1266 	mov	dpl,r4
      000371 8D 83            [24] 1267 	mov	dph,r5
                                   1268 ;	main.c:275: }
      000373 22               [24] 1269 	ret
                                   1270 ;------------------------------------------------------------
                                   1271 ;Allocation info for local variables in function 'flush_address'
                                   1272 ;------------------------------------------------------------
                                   1273 ;address                   Allocated to registers r6 r7 
                                   1274 ;------------------------------------------------------------
                                   1275 ;	main.c:277: void flush_address(int address)
                                   1276 ;	-----------------------------------------
                                   1277 ;	 function flush_address
                                   1278 ;	-----------------------------------------
      000374                       1279 _flush_address:
      000374 AE 82            [24] 1280 	mov	r6,dpl
      000376 AF 83            [24] 1281 	mov	r7,dph
                                   1282 ;	main.c:279: if(address > 4095)
      000378 C3               [12] 1283 	clr	c
      000379 74 FF            [12] 1284 	mov	a,#0xff
      00037B 9E               [12] 1285 	subb	a,r6
      00037C 74 8F            [12] 1286 	mov	a,#(0x0f ^ 0x80)
      00037E 8F F0            [24] 1287 	mov	b,r7
      000380 63 F0 80         [24] 1288 	xrl	b,#0x80
      000383 95 F0            [12] 1289 	subb	a,b
      000385 50 16            [24] 1290 	jnc	00111$
                                   1291 ;	main.c:281: printf_tiny("%x", address);
      000387 C0 06            [24] 1292 	push	ar6
      000389 C0 07            [24] 1293 	push	ar7
      00038B 74rAF            [12] 1294 	mov	a,#___str_14
      00038D C0 E0            [24] 1295 	push	acc
      00038F 74s02            [12] 1296 	mov	a,#(___str_14 >> 8)
      000391 C0 E0            [24] 1297 	push	acc
      000393 12r00r00         [24] 1298 	lcall	_printf_tiny
      000396 E5 81            [12] 1299 	mov	a,sp
      000398 24 FC            [12] 1300 	add	a,#0xfc
      00039A F5 81            [12] 1301 	mov	sp,a
      00039C 22               [24] 1302 	ret
      00039D                       1303 00111$:
                                   1304 ;	main.c:283: else if (address > 255)
      00039D C3               [12] 1305 	clr	c
      00039E 74 FF            [12] 1306 	mov	a,#0xff
      0003A0 9E               [12] 1307 	subb	a,r6
      0003A1 74 80            [12] 1308 	mov	a,#(0x00 ^ 0x80)
      0003A3 8F F0            [24] 1309 	mov	b,r7
      0003A5 63 F0 80         [24] 1310 	xrl	b,#0x80
      0003A8 95 F0            [12] 1311 	subb	a,b
      0003AA 50 16            [24] 1312 	jnc	00108$
                                   1313 ;	main.c:285: printf_tiny("0%x", address);
      0003AC C0 06            [24] 1314 	push	ar6
      0003AE C0 07            [24] 1315 	push	ar7
      0003B0 74rB2            [12] 1316 	mov	a,#___str_15
      0003B2 C0 E0            [24] 1317 	push	acc
      0003B4 74s02            [12] 1318 	mov	a,#(___str_15 >> 8)
      0003B6 C0 E0            [24] 1319 	push	acc
      0003B8 12r00r00         [24] 1320 	lcall	_printf_tiny
      0003BB E5 81            [12] 1321 	mov	a,sp
      0003BD 24 FC            [12] 1322 	add	a,#0xfc
      0003BF F5 81            [12] 1323 	mov	sp,a
      0003C1 22               [24] 1324 	ret
      0003C2                       1325 00108$:
                                   1326 ;	main.c:287: else if (address > 15)
      0003C2 C3               [12] 1327 	clr	c
      0003C3 74 0F            [12] 1328 	mov	a,#0x0f
      0003C5 9E               [12] 1329 	subb	a,r6
      0003C6 74 80            [12] 1330 	mov	a,#(0x00 ^ 0x80)
      0003C8 8F F0            [24] 1331 	mov	b,r7
      0003CA 63 F0 80         [24] 1332 	xrl	b,#0x80
      0003CD 95 F0            [12] 1333 	subb	a,b
      0003CF 50 16            [24] 1334 	jnc	00105$
                                   1335 ;	main.c:289: printf_tiny("00%x", address);
      0003D1 C0 06            [24] 1336 	push	ar6
      0003D3 C0 07            [24] 1337 	push	ar7
      0003D5 74rB6            [12] 1338 	mov	a,#___str_16
      0003D7 C0 E0            [24] 1339 	push	acc
      0003D9 74s02            [12] 1340 	mov	a,#(___str_16 >> 8)
      0003DB C0 E0            [24] 1341 	push	acc
      0003DD 12r00r00         [24] 1342 	lcall	_printf_tiny
      0003E0 E5 81            [12] 1343 	mov	a,sp
      0003E2 24 FC            [12] 1344 	add	a,#0xfc
      0003E4 F5 81            [12] 1345 	mov	sp,a
      0003E6 22               [24] 1346 	ret
      0003E7                       1347 00105$:
                                   1348 ;	main.c:291: else if (address <=15 && address>=0)
      0003E7 C3               [12] 1349 	clr	c
      0003E8 74 0F            [12] 1350 	mov	a,#0x0f
      0003EA 9E               [12] 1351 	subb	a,r6
      0003EB 74 80            [12] 1352 	mov	a,#(0x00 ^ 0x80)
      0003ED 8F F0            [24] 1353 	mov	b,r7
      0003EF 63 F0 80         [24] 1354 	xrl	b,#0x80
      0003F2 95 F0            [12] 1355 	subb	a,b
      0003F4 40 19            [24] 1356 	jc	00113$
      0003F6 EF               [12] 1357 	mov	a,r7
      0003F7 20 E7 15         [24] 1358 	jb	acc.7,00113$
                                   1359 ;	main.c:293: printf_tiny("000%x", address);
      0003FA C0 06            [24] 1360 	push	ar6
      0003FC C0 07            [24] 1361 	push	ar7
      0003FE 74rBB            [12] 1362 	mov	a,#___str_17
      000400 C0 E0            [24] 1363 	push	acc
      000402 74s02            [12] 1364 	mov	a,#(___str_17 >> 8)
      000404 C0 E0            [24] 1365 	push	acc
      000406 12r00r00         [24] 1366 	lcall	_printf_tiny
      000409 E5 81            [12] 1367 	mov	a,sp
      00040B 24 FC            [12] 1368 	add	a,#0xfc
      00040D F5 81            [12] 1369 	mov	sp,a
      00040F                       1370 00113$:
                                   1371 ;	main.c:295: }
      00040F 22               [24] 1372 	ret
                                   1373 ;------------------------------------------------------------
                                   1374 ;Allocation info for local variables in function 'flush_buffer0_ASCII'
                                   1375 ;------------------------------------------------------------
                                   1376 ;itr                       Allocated to registers r6 r7 
                                   1377 ;print_address             Allocated with name '_flush_buffer0_ASCII_print_address_65536_79'
                                   1378 ;temp_buffer0              Allocated to registers 
                                   1379 ;temp                      Allocated to registers 
                                   1380 ;------------------------------------------------------------
                                   1381 ;	main.c:297: void flush_buffer0_ASCII()
                                   1382 ;	-----------------------------------------
                                   1383 ;	 function flush_buffer0_ASCII
                                   1384 ;	-----------------------------------------
      000410                       1385 _flush_buffer0_ASCII:
                                   1386 ;	main.c:301: bool print_address = true;
      000410 75*48 01         [24] 1387 	mov	_flush_buffer0_ASCII_print_address_65536_79,#0x01
                                   1388 ;	main.c:304: char** temp_buffer0 = new_buffer;
                                   1389 ;	main.c:306: while(itr < buffer_0_and_1_size)
      000413 7E 00            [12] 1390 	mov	r6,#0x00
      000415 7F 00            [12] 1391 	mov	r7,#0x00
      000417                       1392 00112$:
      000417 C3               [12] 1393 	clr	c
      000418 EE               [12] 1394 	mov	a,r6
      000419 95*3C            [12] 1395 	subb	a,_buffer_0_and_1_size
      00041B EF               [12] 1396 	mov	a,r7
      00041C 64 80            [12] 1397 	xrl	a,#0x80
      00041E 85*3D F0         [24] 1398 	mov	b,(_buffer_0_and_1_size + 1)
      000421 63 F0 80         [24] 1399 	xrl	b,#0x80
      000424 95 F0            [12] 1400 	subb	a,b
      000426 40 01            [24] 1401 	jc	00142$
      000428 22               [24] 1402 	ret
      000429                       1403 00142$:
                                   1404 ;	main.c:309: if(print_address)
      000429 E5*48            [12] 1405 	mov	a,_flush_buffer0_ASCII_print_address_65536_79
      00042B 60 29            [24] 1406 	jz	00102$
                                   1407 ;	main.c:311: print_address = false;
      00042D 75*48 00         [24] 1408 	mov	_flush_buffer0_ASCII_print_address_65536_79,#0x00
                                   1409 ;	main.c:315: temp = (int) (buffer0+itr);
      000430 EE               [12] 1410 	mov	a,r6
      000431 25*00            [12] 1411 	add	a,_buffer0
      000433 FB               [12] 1412 	mov	r3,a
      000434 EF               [12] 1413 	mov	a,r7
      000435 35*01            [12] 1414 	addc	a,(_buffer0 + 1)
      000437 FC               [12] 1415 	mov	r4,a
      000438 8B 82            [24] 1416 	mov	dpl,r3
      00043A 8C 83            [24] 1417 	mov	dph,r4
                                   1418 ;	main.c:326: flush_address(temp);printf_tiny(":");
      00043C C0 07            [24] 1419 	push	ar7
      00043E C0 06            [24] 1420 	push	ar6
      000440 12r03r74         [24] 1421 	lcall	_flush_address
      000443 74rC1            [12] 1422 	mov	a,#___str_18
      000445 C0 E0            [24] 1423 	push	acc
      000447 74s02            [12] 1424 	mov	a,#(___str_18 >> 8)
      000449 C0 E0            [24] 1425 	push	acc
      00044B 12r00r00         [24] 1426 	lcall	_printf_tiny
      00044E 15 81            [12] 1427 	dec	sp
      000450 15 81            [12] 1428 	dec	sp
      000452 D0 06            [24] 1429 	pop	ar6
      000454 D0 07            [24] 1430 	pop	ar7
      000456                       1431 00102$:
                                   1432 ;	main.c:332: if(temp_buffer0[0][itr] == '0' || temp_buffer0[0][itr]  == '\0')
      000456 AB*06            [24] 1433 	mov	r3,(_new_buffer + 0)
      000458 AC*07            [24] 1434 	mov	r4,(_new_buffer + 1)
      00045A AD*08            [24] 1435 	mov	r5,(_new_buffer + 2)
      00045C EE               [12] 1436 	mov	a,r6
      00045D 2B               [12] 1437 	add	a,r3
      00045E FB               [12] 1438 	mov	r3,a
      00045F EF               [12] 1439 	mov	a,r7
      000460 3C               [12] 1440 	addc	a,r4
      000461 FC               [12] 1441 	mov	r4,a
      000462 8B 82            [24] 1442 	mov	dpl,r3
      000464 8C 83            [24] 1443 	mov	dph,r4
      000466 8D F0            [24] 1444 	mov	b,r5
      000468 12r00r00         [24] 1445 	lcall	__gptrget
      00046B FD               [12] 1446 	mov	r5,a
      00046C BD 30 02         [24] 1447 	cjne	r5,#0x30,00144$
      00046F 80 03            [24] 1448 	sjmp	00106$
      000471                       1449 00144$:
      000471 ED               [12] 1450 	mov	a,r5
      000472 70 19            [24] 1451 	jnz	00107$
      000474                       1452 00106$:
                                   1453 ;	main.c:334: printf_tiny(" 00");
      000474 C0 07            [24] 1454 	push	ar7
      000476 C0 06            [24] 1455 	push	ar6
      000478 74rC3            [12] 1456 	mov	a,#___str_19
      00047A C0 E0            [24] 1457 	push	acc
      00047C 74s02            [12] 1458 	mov	a,#(___str_19 >> 8)
      00047E C0 E0            [24] 1459 	push	acc
      000480 12r00r00         [24] 1460 	lcall	_printf_tiny
      000483 15 81            [12] 1461 	dec	sp
      000485 15 81            [12] 1462 	dec	sp
      000487 D0 06            [24] 1463 	pop	ar6
      000489 D0 07            [24] 1464 	pop	ar7
      00048B 80 47            [24] 1465 	sjmp	00108$
      00048D                       1466 00107$:
                                   1467 ;	main.c:342: if(temp_buffer0[0][itr] <= 9)
      00048D ED               [12] 1468 	mov	a,r5
      00048E 24 F6            [12] 1469 	add	a,#0xff - 0x09
      000490 40 23            [24] 1470 	jc	00104$
                                   1471 ;	main.c:344: printf_tiny(" 0%d", temp_buffer0[0][itr]);
      000492 8D 03            [24] 1472 	mov	ar3,r5
      000494 7C 00            [12] 1473 	mov	r4,#0x00
      000496 C0 07            [24] 1474 	push	ar7
      000498 C0 06            [24] 1475 	push	ar6
      00049A C0 03            [24] 1476 	push	ar3
      00049C C0 04            [24] 1477 	push	ar4
      00049E 74rC7            [12] 1478 	mov	a,#___str_20
      0004A0 C0 E0            [24] 1479 	push	acc
      0004A2 74s02            [12] 1480 	mov	a,#(___str_20 >> 8)
      0004A4 C0 E0            [24] 1481 	push	acc
      0004A6 12r00r00         [24] 1482 	lcall	_printf_tiny
      0004A9 E5 81            [12] 1483 	mov	a,sp
      0004AB 24 FC            [12] 1484 	add	a,#0xfc
      0004AD F5 81            [12] 1485 	mov	sp,a
      0004AF D0 06            [24] 1486 	pop	ar6
      0004B1 D0 07            [24] 1487 	pop	ar7
      0004B3 80 1F            [24] 1488 	sjmp	00108$
      0004B5                       1489 00104$:
                                   1490 ;	main.c:348: printf_tiny(" %d", temp_buffer0[0][itr]);
      0004B5 7C 00            [12] 1491 	mov	r4,#0x00
      0004B7 C0 07            [24] 1492 	push	ar7
      0004B9 C0 06            [24] 1493 	push	ar6
      0004BB C0 05            [24] 1494 	push	ar5
      0004BD C0 04            [24] 1495 	push	ar4
      0004BF 74rCC            [12] 1496 	mov	a,#___str_21
      0004C1 C0 E0            [24] 1497 	push	acc
      0004C3 74s02            [12] 1498 	mov	a,#(___str_21 >> 8)
      0004C5 C0 E0            [24] 1499 	push	acc
      0004C7 12r00r00         [24] 1500 	lcall	_printf_tiny
      0004CA E5 81            [12] 1501 	mov	a,sp
      0004CC 24 FC            [12] 1502 	add	a,#0xfc
      0004CE F5 81            [12] 1503 	mov	sp,a
      0004D0 D0 06            [24] 1504 	pop	ar6
      0004D2 D0 07            [24] 1505 	pop	ar7
      0004D4                       1506 00108$:
                                   1507 ;	main.c:353: if((itr+1) % 16 == 0)
      0004D4 8E 82            [24] 1508 	mov	dpl,r6
      0004D6 8F 83            [24] 1509 	mov	dph,r7
      0004D8 A3               [24] 1510 	inc	dptr
      0004D9 75*00 10         [24] 1511 	mov	__modsint_PARM_2,#0x10
      0004DC 75*01 00         [24] 1512 	mov	(__modsint_PARM_2 + 1),#0x00
      0004DF C0 07            [24] 1513 	push	ar7
      0004E1 C0 06            [24] 1514 	push	ar6
      0004E3 12r00r00         [24] 1515 	lcall	__modsint
      0004E6 E5 82            [12] 1516 	mov	a,dpl
      0004E8 85 83 F0         [24] 1517 	mov	b,dph
      0004EB D0 06            [24] 1518 	pop	ar6
      0004ED D0 07            [24] 1519 	pop	ar7
      0004EF 45 F0            [12] 1520 	orl	a,b
      0004F1 70 1A            [24] 1521 	jnz	00111$
                                   1522 ;	main.c:355: printf_tiny("\n\r");
      0004F3 C0 07            [24] 1523 	push	ar7
      0004F5 C0 06            [24] 1524 	push	ar6
      0004F7 74r00            [12] 1525 	mov	a,#___str_0
      0004F9 C0 E0            [24] 1526 	push	acc
      0004FB 74s00            [12] 1527 	mov	a,#(___str_0 >> 8)
      0004FD C0 E0            [24] 1528 	push	acc
      0004FF 12r00r00         [24] 1529 	lcall	_printf_tiny
      000502 15 81            [12] 1530 	dec	sp
      000504 15 81            [12] 1531 	dec	sp
      000506 D0 06            [24] 1532 	pop	ar6
      000508 D0 07            [24] 1533 	pop	ar7
                                   1534 ;	main.c:357: print_address = true;
      00050A 75*48 01         [24] 1535 	mov	_flush_buffer0_ASCII_print_address_65536_79,#0x01
      00050D                       1536 00111$:
                                   1537 ;	main.c:360: itr++;
      00050D 0E               [12] 1538 	inc	r6
      00050E BE 00 01         [24] 1539 	cjne	r6,#0x00,00148$
      000511 0F               [12] 1540 	inc	r7
      000512                       1541 00148$:
                                   1542 ;	main.c:362: }
      000512 02r04r17         [24] 1543 	ljmp	00112$
                                   1544 ;------------------------------------------------------------
                                   1545 ;Allocation info for local variables in function 'flush_buffer0'
                                   1546 ;------------------------------------------------------------
                                   1547 ;itr                       Allocated to registers r6 r7 
                                   1548 ;print_address             Allocated with name '_flush_buffer0_print_address_65536_88'
                                   1549 ;temp_buffer0              Allocated to registers 
                                   1550 ;temp                      Allocated to registers 
                                   1551 ;------------------------------------------------------------
                                   1552 ;	main.c:363: void flush_buffer0()
                                   1553 ;	-----------------------------------------
                                   1554 ;	 function flush_buffer0
                                   1555 ;	-----------------------------------------
      000515                       1556 _flush_buffer0:
                                   1557 ;	main.c:367: bool print_address = true;
      000515 75*49 01         [24] 1558 	mov	_flush_buffer0_print_address_65536_88,#0x01
                                   1559 ;	main.c:370: char** temp_buffer0 = new_buffer;
                                   1560 ;	main.c:372: while(itr < buffer_0_and_1_size)
      000518 7E 00            [12] 1561 	mov	r6,#0x00
      00051A 7F 00            [12] 1562 	mov	r7,#0x00
      00051C                       1563 00112$:
      00051C C3               [12] 1564 	clr	c
      00051D EE               [12] 1565 	mov	a,r6
      00051E 95*3C            [12] 1566 	subb	a,_buffer_0_and_1_size
      000520 EF               [12] 1567 	mov	a,r7
      000521 64 80            [12] 1568 	xrl	a,#0x80
      000523 85*3D F0         [24] 1569 	mov	b,(_buffer_0_and_1_size + 1)
      000526 63 F0 80         [24] 1570 	xrl	b,#0x80
      000529 95 F0            [12] 1571 	subb	a,b
      00052B 40 01            [24] 1572 	jc	00142$
      00052D 22               [24] 1573 	ret
      00052E                       1574 00142$:
                                   1575 ;	main.c:375: if(print_address)
      00052E E5*49            [12] 1576 	mov	a,_flush_buffer0_print_address_65536_88
      000530 60 29            [24] 1577 	jz	00102$
                                   1578 ;	main.c:377: print_address = false;
      000532 75*49 00         [24] 1579 	mov	_flush_buffer0_print_address_65536_88,#0x00
                                   1580 ;	main.c:381: temp = (int) (buffer0+itr);
      000535 EE               [12] 1581 	mov	a,r6
      000536 25*00            [12] 1582 	add	a,_buffer0
      000538 FB               [12] 1583 	mov	r3,a
      000539 EF               [12] 1584 	mov	a,r7
      00053A 35*01            [12] 1585 	addc	a,(_buffer0 + 1)
      00053C FC               [12] 1586 	mov	r4,a
      00053D 8B 82            [24] 1587 	mov	dpl,r3
      00053F 8C 83            [24] 1588 	mov	dph,r4
                                   1589 ;	main.c:392: flush_address(temp);printf_tiny(":");
      000541 C0 07            [24] 1590 	push	ar7
      000543 C0 06            [24] 1591 	push	ar6
      000545 12r03r74         [24] 1592 	lcall	_flush_address
      000548 74rC1            [12] 1593 	mov	a,#___str_18
      00054A C0 E0            [24] 1594 	push	acc
      00054C 74s02            [12] 1595 	mov	a,#(___str_18 >> 8)
      00054E C0 E0            [24] 1596 	push	acc
      000550 12r00r00         [24] 1597 	lcall	_printf_tiny
      000553 15 81            [12] 1598 	dec	sp
      000555 15 81            [12] 1599 	dec	sp
      000557 D0 06            [24] 1600 	pop	ar6
      000559 D0 07            [24] 1601 	pop	ar7
      00055B                       1602 00102$:
                                   1603 ;	main.c:398: if(temp_buffer0[0][itr] == '0' || temp_buffer0[0][itr]  == '\0')
      00055B AB*06            [24] 1604 	mov	r3,(_new_buffer + 0)
      00055D AC*07            [24] 1605 	mov	r4,(_new_buffer + 1)
      00055F AD*08            [24] 1606 	mov	r5,(_new_buffer + 2)
      000561 EE               [12] 1607 	mov	a,r6
      000562 2B               [12] 1608 	add	a,r3
      000563 FB               [12] 1609 	mov	r3,a
      000564 EF               [12] 1610 	mov	a,r7
      000565 3C               [12] 1611 	addc	a,r4
      000566 FC               [12] 1612 	mov	r4,a
      000567 8B 82            [24] 1613 	mov	dpl,r3
      000569 8C 83            [24] 1614 	mov	dph,r4
      00056B 8D F0            [24] 1615 	mov	b,r5
      00056D 12r00r00         [24] 1616 	lcall	__gptrget
      000570 FD               [12] 1617 	mov	r5,a
      000571 BD 30 02         [24] 1618 	cjne	r5,#0x30,00144$
      000574 80 03            [24] 1619 	sjmp	00106$
      000576                       1620 00144$:
      000576 ED               [12] 1621 	mov	a,r5
      000577 70 19            [24] 1622 	jnz	00107$
      000579                       1623 00106$:
                                   1624 ;	main.c:400: printf_tiny(" 00");
      000579 C0 07            [24] 1625 	push	ar7
      00057B C0 06            [24] 1626 	push	ar6
      00057D 74rC3            [12] 1627 	mov	a,#___str_19
      00057F C0 E0            [24] 1628 	push	acc
      000581 74s02            [12] 1629 	mov	a,#(___str_19 >> 8)
      000583 C0 E0            [24] 1630 	push	acc
      000585 12r00r00         [24] 1631 	lcall	_printf_tiny
      000588 15 81            [12] 1632 	dec	sp
      00058A 15 81            [12] 1633 	dec	sp
      00058C D0 06            [24] 1634 	pop	ar6
      00058E D0 07            [24] 1635 	pop	ar7
      000590 80 47            [24] 1636 	sjmp	00108$
      000592                       1637 00107$:
                                   1638 ;	main.c:408: if(temp_buffer0[0][itr] <= 9)
      000592 ED               [12] 1639 	mov	a,r5
      000593 24 F6            [12] 1640 	add	a,#0xff - 0x09
      000595 40 23            [24] 1641 	jc	00104$
                                   1642 ;	main.c:410: printf_tiny(" 0%x", temp_buffer0[0][itr]);
      000597 8D 03            [24] 1643 	mov	ar3,r5
      000599 7C 00            [12] 1644 	mov	r4,#0x00
      00059B C0 07            [24] 1645 	push	ar7
      00059D C0 06            [24] 1646 	push	ar6
      00059F C0 03            [24] 1647 	push	ar3
      0005A1 C0 04            [24] 1648 	push	ar4
      0005A3 74rD0            [12] 1649 	mov	a,#___str_22
      0005A5 C0 E0            [24] 1650 	push	acc
      0005A7 74s02            [12] 1651 	mov	a,#(___str_22 >> 8)
      0005A9 C0 E0            [24] 1652 	push	acc
      0005AB 12r00r00         [24] 1653 	lcall	_printf_tiny
      0005AE E5 81            [12] 1654 	mov	a,sp
      0005B0 24 FC            [12] 1655 	add	a,#0xfc
      0005B2 F5 81            [12] 1656 	mov	sp,a
      0005B4 D0 06            [24] 1657 	pop	ar6
      0005B6 D0 07            [24] 1658 	pop	ar7
      0005B8 80 1F            [24] 1659 	sjmp	00108$
      0005BA                       1660 00104$:
                                   1661 ;	main.c:414: printf_tiny(" %x", temp_buffer0[0][itr]);
      0005BA 7C 00            [12] 1662 	mov	r4,#0x00
      0005BC C0 07            [24] 1663 	push	ar7
      0005BE C0 06            [24] 1664 	push	ar6
      0005C0 C0 05            [24] 1665 	push	ar5
      0005C2 C0 04            [24] 1666 	push	ar4
      0005C4 74rD5            [12] 1667 	mov	a,#___str_23
      0005C6 C0 E0            [24] 1668 	push	acc
      0005C8 74s02            [12] 1669 	mov	a,#(___str_23 >> 8)
      0005CA C0 E0            [24] 1670 	push	acc
      0005CC 12r00r00         [24] 1671 	lcall	_printf_tiny
      0005CF E5 81            [12] 1672 	mov	a,sp
      0005D1 24 FC            [12] 1673 	add	a,#0xfc
      0005D3 F5 81            [12] 1674 	mov	sp,a
      0005D5 D0 06            [24] 1675 	pop	ar6
      0005D7 D0 07            [24] 1676 	pop	ar7
      0005D9                       1677 00108$:
                                   1678 ;	main.c:419: if((itr+1) % 16 == 0)
      0005D9 8E 82            [24] 1679 	mov	dpl,r6
      0005DB 8F 83            [24] 1680 	mov	dph,r7
      0005DD A3               [24] 1681 	inc	dptr
      0005DE 75*00 10         [24] 1682 	mov	__modsint_PARM_2,#0x10
      0005E1 75*01 00         [24] 1683 	mov	(__modsint_PARM_2 + 1),#0x00
      0005E4 C0 07            [24] 1684 	push	ar7
      0005E6 C0 06            [24] 1685 	push	ar6
      0005E8 12r00r00         [24] 1686 	lcall	__modsint
      0005EB E5 82            [12] 1687 	mov	a,dpl
      0005ED 85 83 F0         [24] 1688 	mov	b,dph
      0005F0 D0 06            [24] 1689 	pop	ar6
      0005F2 D0 07            [24] 1690 	pop	ar7
      0005F4 45 F0            [12] 1691 	orl	a,b
      0005F6 70 1A            [24] 1692 	jnz	00111$
                                   1693 ;	main.c:421: printf_tiny("\n\r");
      0005F8 C0 07            [24] 1694 	push	ar7
      0005FA C0 06            [24] 1695 	push	ar6
      0005FC 74r00            [12] 1696 	mov	a,#___str_0
      0005FE C0 E0            [24] 1697 	push	acc
      000600 74s00            [12] 1698 	mov	a,#(___str_0 >> 8)
      000602 C0 E0            [24] 1699 	push	acc
      000604 12r00r00         [24] 1700 	lcall	_printf_tiny
      000607 15 81            [12] 1701 	dec	sp
      000609 15 81            [12] 1702 	dec	sp
      00060B D0 06            [24] 1703 	pop	ar6
      00060D D0 07            [24] 1704 	pop	ar7
                                   1705 ;	main.c:423: print_address = true;
      00060F 75*49 01         [24] 1706 	mov	_flush_buffer0_print_address_65536_88,#0x01
      000612                       1707 00111$:
                                   1708 ;	main.c:426: itr++;
      000612 0E               [12] 1709 	inc	r6
      000613 BE 00 01         [24] 1710 	cjne	r6,#0x00,00148$
      000616 0F               [12] 1711 	inc	r7
      000617                       1712 00148$:
                                   1713 ;	main.c:428: }
      000617 02r05r1C         [24] 1714 	ljmp	00112$
                                   1715 ;------------------------------------------------------------
                                   1716 ;Allocation info for local variables in function 'clear_buffer'
                                   1717 ;------------------------------------------------------------
                                   1718 ;size                      Allocated with name '_clear_buffer_PARM_2'
                                   1719 ;buffer                    Allocated to registers r5 r6 r7 
                                   1720 ;i                         Allocated to registers r3 r4 
                                   1721 ;------------------------------------------------------------
                                   1722 ;	main.c:430: void clear_buffer(char* buffer, int size )
                                   1723 ;	-----------------------------------------
                                   1724 ;	 function clear_buffer
                                   1725 ;	-----------------------------------------
      00061A                       1726 _clear_buffer:
      00061A AD 82            [24] 1727 	mov	r5,dpl
      00061C AE 83            [24] 1728 	mov	r6,dph
      00061E AF F0            [24] 1729 	mov	r7,b
                                   1730 ;	main.c:432: for(int i = 0; i < size; i++)
      000620 7B 00            [12] 1731 	mov	r3,#0x00
      000622 7C 00            [12] 1732 	mov	r4,#0x00
      000624                       1733 00103$:
      000624 C3               [12] 1734 	clr	c
      000625 EB               [12] 1735 	mov	a,r3
      000626 95*00            [12] 1736 	subb	a,_clear_buffer_PARM_2
      000628 EC               [12] 1737 	mov	a,r4
      000629 64 80            [12] 1738 	xrl	a,#0x80
      00062B 85*01 F0         [24] 1739 	mov	b,(_clear_buffer_PARM_2 + 1)
      00062E 63 F0 80         [24] 1740 	xrl	b,#0x80
      000631 95 F0            [12] 1741 	subb	a,b
      000633 50 19            [24] 1742 	jnc	00105$
                                   1743 ;	main.c:434: buffer[i] = '\0';
      000635 EB               [12] 1744 	mov	a,r3
      000636 2D               [12] 1745 	add	a,r5
      000637 F8               [12] 1746 	mov	r0,a
      000638 EC               [12] 1747 	mov	a,r4
      000639 3E               [12] 1748 	addc	a,r6
      00063A F9               [12] 1749 	mov	r1,a
      00063B 8F 02            [24] 1750 	mov	ar2,r7
      00063D 88 82            [24] 1751 	mov	dpl,r0
      00063F 89 83            [24] 1752 	mov	dph,r1
      000641 8A F0            [24] 1753 	mov	b,r2
      000643 E4               [12] 1754 	clr	a
      000644 12r00r00         [24] 1755 	lcall	__gptrput
                                   1756 ;	main.c:432: for(int i = 0; i < size; i++)
      000647 0B               [12] 1757 	inc	r3
      000648 BB 00 D9         [24] 1758 	cjne	r3,#0x00,00103$
      00064B 0C               [12] 1759 	inc	r4
      00064C 80 D6            [24] 1760 	sjmp	00103$
      00064E                       1761 00105$:
                                   1762 ;	main.c:436: }
      00064E 22               [24] 1763 	ret
                                   1764 ;------------------------------------------------------------
                                   1765 ;Allocation info for local variables in function 'fetch_character'
                                   1766 ;------------------------------------------------------------
                                   1767 ;character                 Allocated to registers r5 r6 r7 
                                   1768 ;ret                       Allocated to registers r6 r7 
                                   1769 ;ch                        Allocated to registers r3 
                                   1770 ;------------------------------------------------------------
                                   1771 ;	main.c:438: int fetch_character(char * character)
                                   1772 ;	-----------------------------------------
                                   1773 ;	 function fetch_character
                                   1774 ;	-----------------------------------------
      00064F                       1775 _fetch_character:
      00064F AD 82            [24] 1776 	mov	r5,dpl
      000651 AE 83            [24] 1777 	mov	r6,dph
      000653 AF F0            [24] 1778 	mov	r7,b
                                   1779 ;	main.c:440: printf_tiny("|***********************************************|\n\r");
      000655 C0 07            [24] 1780 	push	ar7
      000657 C0 06            [24] 1781 	push	ar6
      000659 C0 05            [24] 1782 	push	ar5
      00065B 74rD9            [12] 1783 	mov	a,#___str_24
      00065D C0 E0            [24] 1784 	push	acc
      00065F 74s02            [12] 1785 	mov	a,#(___str_24 >> 8)
      000661 C0 E0            [24] 1786 	push	acc
      000663 12r00r00         [24] 1787 	lcall	_printf_tiny
      000666 15 81            [12] 1788 	dec	sp
      000668 15 81            [12] 1789 	dec	sp
                                   1790 ;	main.c:441: printf_tiny("|************ USER Interfase *******************|\n\r");
      00066A 74r0D            [12] 1791 	mov	a,#___str_25
      00066C C0 E0            [24] 1792 	push	acc
      00066E 74s03            [12] 1793 	mov	a,#(___str_25 >> 8)
      000670 C0 E0            [24] 1794 	push	acc
      000672 12r00r00         [24] 1795 	lcall	_printf_tiny
      000675 15 81            [12] 1796 	dec	sp
      000677 15 81            [12] 1797 	dec	sp
                                   1798 ;	main.c:442: printf_tiny("|  Choose a character from the below options    |\n\r");
      000679 74r41            [12] 1799 	mov	a,#___str_26
      00067B C0 E0            [24] 1800 	push	acc
      00067D 74s03            [12] 1801 	mov	a,#(___str_26 >> 8)
      00067F C0 E0            [24] 1802 	push	acc
      000681 12r00r00         [24] 1803 	lcall	_printf_tiny
      000684 15 81            [12] 1804 	dec	sp
      000686 15 81            [12] 1805 	dec	sp
                                   1806 ;	main.c:443: printf_tiny("|  a-z  | Character to store in the buffer      |\n\r");
      000688 74r75            [12] 1807 	mov	a,#___str_27
      00068A C0 E0            [24] 1808 	push	acc
      00068C 74s03            [12] 1809 	mov	a,#(___str_27 >> 8)
      00068E C0 E0            [24] 1810 	push	acc
      000690 12r00r00         [24] 1811 	lcall	_printf_tiny
      000693 15 81            [12] 1812 	dec	sp
      000695 15 81            [12] 1813 	dec	sp
                                   1814 ;	main.c:444: printf_tiny("|  +    | Allocate a new buffer                 |\n\r");
      000697 74rA9            [12] 1815 	mov	a,#___str_28
      000699 C0 E0            [24] 1816 	push	acc
      00069B 74s03            [12] 1817 	mov	a,#(___str_28 >> 8)
      00069D C0 E0            [24] 1818 	push	acc
      00069F 12r00r00         [24] 1819 	lcall	_printf_tiny
      0006A2 15 81            [12] 1820 	dec	sp
      0006A4 15 81            [12] 1821 	dec	sp
                                   1822 ;	main.c:445: printf_tiny("|  -    | Delete a buffer                       |\n\r");
      0006A6 74rDD            [12] 1823 	mov	a,#___str_29
      0006A8 C0 E0            [24] 1824 	push	acc
      0006AA 74s03            [12] 1825 	mov	a,#(___str_29 >> 8)
      0006AC C0 E0            [24] 1826 	push	acc
      0006AE 12r00r00         [24] 1827 	lcall	_printf_tiny
      0006B1 15 81            [12] 1828 	dec	sp
      0006B3 15 81            [12] 1829 	dec	sp
                                   1830 ;	main.c:446: printf_tiny("|  ?    | Display the heap report               |\n\r");
      0006B5 74r11            [12] 1831 	mov	a,#___str_30
      0006B7 C0 E0            [24] 1832 	push	acc
      0006B9 74s04            [12] 1833 	mov	a,#(___str_30 >> 8)
      0006BB C0 E0            [24] 1834 	push	acc
      0006BD 12r00r00         [24] 1835 	lcall	_printf_tiny
      0006C0 15 81            [12] 1836 	dec	sp
      0006C2 15 81            [12] 1837 	dec	sp
                                   1838 ;	main.c:447: printf_tiny("|  =    | Display contents of Buffer_0          |\n\r");
      0006C4 74r45            [12] 1839 	mov	a,#___str_31
      0006C6 C0 E0            [24] 1840 	push	acc
      0006C8 74s04            [12] 1841 	mov	a,#(___str_31 >> 8)
      0006CA C0 E0            [24] 1842 	push	acc
      0006CC 12r00r00         [24] 1843 	lcall	_printf_tiny
      0006CF 15 81            [12] 1844 	dec	sp
      0006D1 15 81            [12] 1845 	dec	sp
                                   1846 ;	main.c:448: printf_tiny("|  @    | Free all the buffers                  |\n\r");
      0006D3 74r79            [12] 1847 	mov	a,#___str_32
      0006D5 C0 E0            [24] 1848 	push	acc
      0006D7 74s04            [12] 1849 	mov	a,#(___str_32 >> 8)
      0006D9 C0 E0            [24] 1850 	push	acc
      0006DB 12r00r00         [24] 1851 	lcall	_printf_tiny
      0006DE 15 81            [12] 1852 	dec	sp
      0006E0 15 81            [12] 1853 	dec	sp
                                   1854 ;	main.c:449: printf_tiny("|***********************************************|\n\r");
      0006E2 74rD9            [12] 1855 	mov	a,#___str_24
      0006E4 C0 E0            [24] 1856 	push	acc
      0006E6 74s02            [12] 1857 	mov	a,#(___str_24 >> 8)
      0006E8 C0 E0            [24] 1858 	push	acc
      0006EA 12r00r00         [24] 1859 	lcall	_printf_tiny
      0006ED 15 81            [12] 1860 	dec	sp
      0006EF 15 81            [12] 1861 	dec	sp
                                   1862 ;	main.c:450: printf_tiny("|***********************************************|\n\r");
      0006F1 74rD9            [12] 1863 	mov	a,#___str_24
      0006F3 C0 E0            [24] 1864 	push	acc
      0006F5 74s02            [12] 1865 	mov	a,#(___str_24 >> 8)
      0006F7 C0 E0            [24] 1866 	push	acc
      0006F9 12r00r00         [24] 1867 	lcall	_printf_tiny
      0006FC 15 81            [12] 1868 	dec	sp
      0006FE 15 81            [12] 1869 	dec	sp
                                   1870 ;	main.c:454: printf_tiny("\n\rEnter a character: ");
      000700 74rAD            [12] 1871 	mov	a,#___str_33
      000702 C0 E0            [24] 1872 	push	acc
      000704 74s04            [12] 1873 	mov	a,#(___str_33 >> 8)
      000706 C0 E0            [24] 1874 	push	acc
      000708 12r00r00         [24] 1875 	lcall	_printf_tiny
      00070B 15 81            [12] 1876 	dec	sp
      00070D 15 81            [12] 1877 	dec	sp
                                   1878 ;	main.c:456: char ch = getchar();
      00070F 12r00r07         [24] 1879 	lcall	_getchar
      000712 AB 82            [24] 1880 	mov	r3,dpl
      000714 D0 05            [24] 1881 	pop	ar5
      000716 D0 06            [24] 1882 	pop	ar6
      000718 D0 07            [24] 1883 	pop	ar7
                                   1884 ;	main.c:458: *character = ch;
      00071A 8D 82            [24] 1885 	mov	dpl,r5
      00071C 8E 83            [24] 1886 	mov	dph,r6
      00071E 8F F0            [24] 1887 	mov	b,r7
      000720 EB               [12] 1888 	mov	a,r3
      000721 12r00r00         [24] 1889 	lcall	__gptrput
                                   1890 ;	main.c:459: putchar(ch);putchar(' ');
      000724 8B 06            [24] 1891 	mov	ar6,r3
      000726 7F 00            [12] 1892 	mov	r7,#0x00
      000728 8E 82            [24] 1893 	mov	dpl,r6
      00072A 8F 83            [24] 1894 	mov	dph,r7
      00072C C0 03            [24] 1895 	push	ar3
      00072E 12r00r15         [24] 1896 	lcall	_putchar
      000731 90 00 20         [24] 1897 	mov	dptr,#0x0020
      000734 12r00r15         [24] 1898 	lcall	_putchar
                                   1899 ;	main.c:461: printf_tiny("\n\r\n\r");
      000737 74rC3            [12] 1900 	mov	a,#___str_34
      000739 C0 E0            [24] 1901 	push	acc
      00073B 74s04            [12] 1902 	mov	a,#(___str_34 >> 8)
      00073D C0 E0            [24] 1903 	push	acc
      00073F 12r00r00         [24] 1904 	lcall	_printf_tiny
      000742 15 81            [12] 1905 	dec	sp
      000744 15 81            [12] 1906 	dec	sp
      000746 D0 03            [24] 1907 	pop	ar3
                                   1908 ;	main.c:463: if(ch == '\r')
      000748 BB 0D 1D         [24] 1909 	cjne	r3,#0x0d,00113$
                                   1910 ;	main.c:465: ret = type_enter_pressed;
      00074B 7E 03            [12] 1911 	mov	r6,#0x03
      00074D 7F 00            [12] 1912 	mov	r7,#0x00
                                   1913 ;	main.c:467: printf_tiny("Enter is pressed straight away, enter a valid character\n\r");
      00074F C0 07            [24] 1914 	push	ar7
      000751 C0 06            [24] 1915 	push	ar6
      000753 74rC8            [12] 1916 	mov	a,#___str_35
      000755 C0 E0            [24] 1917 	push	acc
      000757 74s04            [12] 1918 	mov	a,#(___str_35 >> 8)
      000759 C0 E0            [24] 1919 	push	acc
      00075B 12r00r00         [24] 1920 	lcall	_printf_tiny
      00075E 15 81            [12] 1921 	dec	sp
      000760 15 81            [12] 1922 	dec	sp
      000762 D0 06            [24] 1923 	pop	ar6
      000764 D0 07            [24] 1924 	pop	ar7
      000766 80 66            [24] 1925 	sjmp	00114$
      000768                       1926 00113$:
                                   1927 ;	main.c:470: else if(ch >= 'a' && ch <= 'z')
      000768 BB 61 00         [24] 1928 	cjne	r3,#0x61,00147$
      00076B                       1929 00147$:
      00076B 40 22            [24] 1930 	jc	00109$
      00076D EB               [12] 1931 	mov	a,r3
      00076E 24 85            [12] 1932 	add	a,#0xff - 0x7a
      000770 40 1D            [24] 1933 	jc	00109$
                                   1934 ;	main.c:472: ret = type_storage_characters;
      000772 7E 00            [12] 1935 	mov	r6,#0x00
      000774 7F 00            [12] 1936 	mov	r7,#0x00
                                   1937 ;	main.c:474: printf_tiny("Storage character entered\n\r\n\r");
      000776 C0 07            [24] 1938 	push	ar7
      000778 C0 06            [24] 1939 	push	ar6
      00077A 74r02            [12] 1940 	mov	a,#___str_36
      00077C C0 E0            [24] 1941 	push	acc
      00077E 74s05            [12] 1942 	mov	a,#(___str_36 >> 8)
      000780 C0 E0            [24] 1943 	push	acc
      000782 12r00r00         [24] 1944 	lcall	_printf_tiny
      000785 15 81            [12] 1945 	dec	sp
      000787 15 81            [12] 1946 	dec	sp
      000789 D0 06            [24] 1947 	pop	ar6
      00078B D0 07            [24] 1948 	pop	ar7
      00078D 80 3F            [24] 1949 	sjmp	00114$
      00078F                       1950 00109$:
                                   1951 ;	main.c:477: else if( ch == '+' ||
      00078F BB 2B 02         [24] 1952 	cjne	r3,#0x2b,00150$
      000792 80 12            [24] 1953 	sjmp	00101$
      000794                       1954 00150$:
                                   1955 ;	main.c:478: ch == '-' ||
      000794 BB 2D 02         [24] 1956 	cjne	r3,#0x2d,00151$
      000797 80 0D            [24] 1957 	sjmp	00101$
      000799                       1958 00151$:
                                   1959 ;	main.c:479: ch == '?' ||
      000799 BB 3F 02         [24] 1960 	cjne	r3,#0x3f,00152$
      00079C 80 08            [24] 1961 	sjmp	00101$
      00079E                       1962 00152$:
                                   1963 ;	main.c:480: ch == '=' ||
      00079E BB 3D 02         [24] 1964 	cjne	r3,#0x3d,00153$
      0007A1 80 03            [24] 1965 	sjmp	00101$
      0007A3                       1966 00153$:
                                   1967 ;	main.c:481: ch == '@')
      0007A3 BB 40 15         [24] 1968 	cjne	r3,#0x40,00102$
      0007A6                       1969 00101$:
                                   1970 ;	main.c:483: printf_tiny("Command character entered\n\r\n\r");
      0007A6 74r20            [12] 1971 	mov	a,#___str_37
      0007A8 C0 E0            [24] 1972 	push	acc
      0007AA 74s05            [12] 1973 	mov	a,#(___str_37 >> 8)
      0007AC C0 E0            [24] 1974 	push	acc
      0007AE 12r00r00         [24] 1975 	lcall	_printf_tiny
      0007B1 15 81            [12] 1976 	dec	sp
      0007B3 15 81            [12] 1977 	dec	sp
                                   1978 ;	main.c:485: ret = type_command_characters;
      0007B5 7E 02            [12] 1979 	mov	r6,#0x02
      0007B7 7F 00            [12] 1980 	mov	r7,#0x00
      0007B9 80 13            [24] 1981 	sjmp	00114$
      0007BB                       1982 00102$:
                                   1983 ;	main.c:489: printf_tiny("Not a valid character for the system\n\r\n\r");
      0007BB 74r3E            [12] 1984 	mov	a,#___str_38
      0007BD C0 E0            [24] 1985 	push	acc
      0007BF 74s05            [12] 1986 	mov	a,#(___str_38 >> 8)
      0007C1 C0 E0            [24] 1987 	push	acc
      0007C3 12r00r00         [24] 1988 	lcall	_printf_tiny
      0007C6 15 81            [12] 1989 	dec	sp
      0007C8 15 81            [12] 1990 	dec	sp
                                   1991 ;	main.c:491: ret = type_invalid;
      0007CA 7E FF            [12] 1992 	mov	r6,#0xff
      0007CC 7F FF            [12] 1993 	mov	r7,#0xff
      0007CE                       1994 00114$:
                                   1995 ;	main.c:494: return ret;
      0007CE 8E 82            [24] 1996 	mov	dpl,r6
      0007D0 8F 83            [24] 1997 	mov	dph,r7
                                   1998 ;	main.c:495: }
      0007D2 22               [24] 1999 	ret
                                   2000 ;------------------------------------------------------------
                                   2001 ;Allocation info for local variables in function 'free_buffers'
                                   2002 ;------------------------------------------------------------
                                   2003 ;itr                       Allocated to registers r6 r7 
                                   2004 ;------------------------------------------------------------
                                   2005 ;	main.c:497: void free_buffers()
                                   2006 ;	-----------------------------------------
                                   2007 ;	 function free_buffers
                                   2008 ;	-----------------------------------------
      0007D3                       2009 _free_buffers:
                                   2010 ;	main.c:501: while(itr < new_buffer_index)
      0007D3 7E 00            [12] 2011 	mov	r6,#0x00
      0007D5 7F 00            [12] 2012 	mov	r7,#0x00
      0007D7                       2013 00101$:
      0007D7 C3               [12] 2014 	clr	c
      0007D8 EE               [12] 2015 	mov	a,r6
      0007D9 95*38            [12] 2016 	subb	a,_new_buffer_index
      0007DB EF               [12] 2017 	mov	a,r7
      0007DC 64 80            [12] 2018 	xrl	a,#0x80
      0007DE 85*39 F0         [24] 2019 	mov	b,(_new_buffer_index + 1)
      0007E1 63 F0 80         [24] 2020 	xrl	b,#0x80
      0007E4 95 F0            [12] 2021 	subb	a,b
      0007E6 50 3A            [24] 2022 	jnc	00104$
                                   2023 ;	main.c:503: free(new_buffer[itr++]);
      0007E8 8E*00            [24] 2024 	mov	__mulint_PARM_2,r6
      0007EA 8F*01            [24] 2025 	mov	(__mulint_PARM_2 + 1),r7
      0007EC 90 00 03         [24] 2026 	mov	dptr,#0x0003
      0007EF C0 07            [24] 2027 	push	ar7
      0007F1 C0 06            [24] 2028 	push	ar6
      0007F3 12r00r00         [24] 2029 	lcall	__mulint
      0007F6 AC 82            [24] 2030 	mov	r4,dpl
      0007F8 D0 06            [24] 2031 	pop	ar6
      0007FA D0 07            [24] 2032 	pop	ar7
      0007FC 0E               [12] 2033 	inc	r6
      0007FD BE 00 01         [24] 2034 	cjne	r6,#0x00,00116$
      000800 0F               [12] 2035 	inc	r7
      000801                       2036 00116$:
      000801 EC               [12] 2037 	mov	a,r4
      000802 24r06            [12] 2038 	add	a,#_new_buffer
      000804 F9               [12] 2039 	mov	r1,a
      000805 87 03            [24] 2040 	mov	ar3,@r1
      000807 09               [12] 2041 	inc	r1
      000808 87 04            [24] 2042 	mov	ar4,@r1
      00080A 09               [12] 2043 	inc	r1
      00080B 87 05            [24] 2044 	mov	ar5,@r1
      00080D 19               [12] 2045 	dec	r1
      00080E 19               [12] 2046 	dec	r1
      00080F 8B 82            [24] 2047 	mov	dpl,r3
      000811 8C 83            [24] 2048 	mov	dph,r4
      000813 8D F0            [24] 2049 	mov	b,r5
      000815 C0 07            [24] 2050 	push	ar7
      000817 C0 06            [24] 2051 	push	ar6
      000819 12r00r00         [24] 2052 	lcall	_free
      00081C D0 06            [24] 2053 	pop	ar6
      00081E D0 07            [24] 2054 	pop	ar7
      000820 80 B5            [24] 2055 	sjmp	00101$
      000822                       2056 00104$:
                                   2057 ;	main.c:505: }
      000822 22               [24] 2058 	ret
                                   2059 ;------------------------------------------------------------
                                   2060 ;Allocation info for local variables in function 'main'
                                   2061 ;------------------------------------------------------------
                                   2062 ;stay                      Allocated with name '_main_stay_65536_111'
                                   2063 ;i                         Allocated to registers r6 r7 
                                   2064 ;i                         Allocated to registers r6 r7 
                                   2065 ;idx                       Allocated with name '_main_idx_65537_121'
                                   2066 ;buffer_number             Allocated to registers r6 r7 
                                   2067 ;itr                       Allocated to registers 
                                   2068 ;ch                        Allocated with name '_main_ch_131073_122'
                                   2069 ;character_type            Allocated to registers r2 r3 
                                   2070 ;temp_buffer0              Allocated to registers 
                                   2071 ;character                 Allocated to registers r4 
                                   2072 ;temp                      Allocated to registers r3 r5 
                                   2073 ;i                         Allocated with name '_main_i_327682_139'
                                   2074 ;temp                      Allocated to registers r2 r3 
                                   2075 ;i                         Allocated with name '_main_i_524291_143'
                                   2076 ;------------------------------------------------------------
                                   2077 ;	main.c:507: void main()
                                   2078 ;	-----------------------------------------
                                   2079 ;	 function main
                                   2080 ;	-----------------------------------------
      000823                       2081 _main:
                                   2082 ;	main.c:511: START:
      000823                       2083 00101$:
                                   2084 ;	main.c:512: stay = true;
      000823 75*4A 01         [24] 2085 	mov	_main_stay_65536_111,#0x01
                                   2086 ;	main.c:513: new_buffer_index = 0;
      000826 E4               [12] 2087 	clr	a
      000827 F5*38            [12] 2088 	mov	_new_buffer_index,a
      000829 F5*39            [12] 2089 	mov	(_new_buffer_index + 1),a
                                   2090 ;	main.c:515: while(stay)
      00082B                       2091 00110$:
      00082B E5*4A            [12] 2092 	mov	a,_main_stay_65536_111
      00082D 70 03            [24] 2093 	jnz	00322$
      00082F 02r09rEA         [24] 2094 	ljmp	00112$
      000832                       2095 00322$:
                                   2096 ;	main.c:518: buffer_0_and_1_size = fetch_buffer_size(type_buffer0_and_1);
      000832 75 82 00         [24] 2097 	mov	dpl,#0x00
      000835 12r00rDF         [24] 2098 	lcall	_fetch_buffer_size
                                   2099 ;	main.c:521: if(( buffer0 = (__xdata char*) malloc(buffer_0_and_1_size)) == 0)
      000838 85 82*3C         [24] 2100 	mov	_buffer_0_and_1_size,dpl
      00083B 85 83*3D         [24] 2101 	mov  (_buffer_0_and_1_size + 1),dph
      00083E 12r00r00         [24] 2102 	lcall	_malloc
      000841 AE 82            [24] 2103 	mov	r6,dpl
      000843 AF 83            [24] 2104 	mov	r7,dph
      000845 7D 00            [12] 2105 	mov	r5,#0x00
      000847 8E*00            [24] 2106 	mov	_buffer0,r6
      000849 8F*01            [24] 2107 	mov	(_buffer0 + 1),r7
      00084B 8D*02            [24] 2108 	mov	(_buffer0 + 2),r5
      00084D EE               [12] 2109 	mov	a,r6
      00084E 4F               [12] 2110 	orl	a,r7
      00084F 70 39            [24] 2111 	jnz	00104$
                                   2112 ;	main.c:523: new_buffer[new_buffer_index] = buffer0;
      000851 85*38*00         [24] 2113 	mov	__mulint_PARM_2,_new_buffer_index
      000854 85*39*01         [24] 2114 	mov	(__mulint_PARM_2 + 1),(_new_buffer_index + 1)
      000857 90 00 03         [24] 2115 	mov	dptr,#0x0003
      00085A 12r00r00         [24] 2116 	lcall	__mulint
      00085D E5 82            [12] 2117 	mov	a,dpl
      00085F 24r06            [12] 2118 	add	a,#_new_buffer
      000861 F8               [12] 2119 	mov	r0,a
      000862 A6*00            [24] 2120 	mov	@r0,_buffer0
      000864 08               [12] 2121 	inc	r0
      000865 A6*01            [24] 2122 	mov	@r0,(_buffer0 + 1)
      000867 08               [12] 2123 	inc	r0
      000868 A6*02            [24] 2124 	mov	@r0,(_buffer0 + 2)
                                   2125 ;	main.c:526: printf_tiny("FAILURE: malloc for buffer0 failed\n\r");
      00086A 74r67            [12] 2126 	mov	a,#___str_39
      00086C C0 E0            [24] 2127 	push	acc
      00086E 74s05            [12] 2128 	mov	a,#(___str_39 >> 8)
      000870 C0 E0            [24] 2129 	push	acc
      000872 12r00r00         [24] 2130 	lcall	_printf_tiny
      000875 15 81            [12] 2131 	dec	sp
      000877 15 81            [12] 2132 	dec	sp
                                   2133 ;	main.c:529: free(buffer0);
      000879 AD*00            [24] 2134 	mov	r5,_buffer0
      00087B AE*01            [24] 2135 	mov	r6,(_buffer0 + 1)
      00087D AF*02            [24] 2136 	mov	r7,(_buffer0 + 2)
      00087F 8D 82            [24] 2137 	mov	dpl,r5
      000881 8E 83            [24] 2138 	mov	dph,r6
      000883 8F F0            [24] 2139 	mov	b,r7
      000885 12r00r00         [24] 2140 	lcall	_free
      000888 80 7B            [24] 2141 	sjmp	00105$
      00088A                       2142 00104$:
                                   2143 ;	main.c:533: printf_tiny("SUCCESS: buffer0 malloc done\n\r");
      00088A 74r8C            [12] 2144 	mov	a,#___str_40
      00088C C0 E0            [24] 2145 	push	acc
      00088E 74s05            [12] 2146 	mov	a,#(___str_40 >> 8)
      000890 C0 E0            [24] 2147 	push	acc
      000892 12r00r00         [24] 2148 	lcall	_printf_tiny
      000895 15 81            [12] 2149 	dec	sp
      000897 15 81            [12] 2150 	dec	sp
                                   2151 ;	main.c:536: new_buffer[new_buffer_index] = buffer0;
      000899 85*38*00         [24] 2152 	mov	__mulint_PARM_2,_new_buffer_index
      00089C 85*39*01         [24] 2153 	mov	(__mulint_PARM_2 + 1),(_new_buffer_index + 1)
      00089F 90 00 03         [24] 2154 	mov	dptr,#0x0003
      0008A2 12r00r00         [24] 2155 	lcall	__mulint
      0008A5 E5 82            [12] 2156 	mov	a,dpl
      0008A7 24r06            [12] 2157 	add	a,#_new_buffer
      0008A9 F8               [12] 2158 	mov	r0,a
      0008AA A6*00            [24] 2159 	mov	@r0,_buffer0
      0008AC 08               [12] 2160 	inc	r0
      0008AD A6*01            [24] 2161 	mov	@r0,(_buffer0 + 1)
      0008AF 08               [12] 2162 	inc	r0
      0008B0 A6*02            [24] 2163 	mov	@r0,(_buffer0 + 2)
                                   2164 ;	main.c:540: new_buffer_size[0] = buffer_0_and_1_size;
      0008B2 85*3C*24         [24] 2165 	mov	(_new_buffer_size + 0),_buffer_0_and_1_size
      0008B5 85*3D*25         [24] 2166 	mov	(_new_buffer_size + 1),(_buffer_0_and_1_size + 1)
                                   2167 ;	main.c:541: printf_tiny(" Buffer0 size is : %d\n\r", new_buffer_size[0]);
      0008B8 C0*3C            [24] 2168 	push	_buffer_0_and_1_size
      0008BA C0*3D            [24] 2169 	push	(_buffer_0_and_1_size + 1)
      0008BC 74rAB            [12] 2170 	mov	a,#___str_41
      0008BE C0 E0            [24] 2171 	push	acc
      0008C0 74s05            [12] 2172 	mov	a,#(___str_41 >> 8)
      0008C2 C0 E0            [24] 2173 	push	acc
      0008C4 12r00r00         [24] 2174 	lcall	_printf_tiny
      0008C7 E5 81            [12] 2175 	mov	a,sp
      0008C9 24 FC            [12] 2176 	add	a,#0xfc
      0008CB F5 81            [12] 2177 	mov	sp,a
                                   2178 ;	main.c:546: for(int i = 0; i < buffer_0_and_1_size; i++)
      0008CD 7E 00            [12] 2179 	mov	r6,#0x00
      0008CF 7F 00            [12] 2180 	mov	r7,#0x00
      0008D1                       2181 00156$:
      0008D1 C3               [12] 2182 	clr	c
      0008D2 EE               [12] 2183 	mov	a,r6
      0008D3 95*3C            [12] 2184 	subb	a,_buffer_0_and_1_size
      0008D5 EF               [12] 2185 	mov	a,r7
      0008D6 64 80            [12] 2186 	xrl	a,#0x80
      0008D8 85*3D F0         [24] 2187 	mov	b,(_buffer_0_and_1_size + 1)
      0008DB 63 F0 80         [24] 2188 	xrl	b,#0x80
      0008DE 95 F0            [12] 2189 	subb	a,b
      0008E0 50 1B            [24] 2190 	jnc	00102$
                                   2191 ;	main.c:548: buffer0[i] = '\0';
      0008E2 EE               [12] 2192 	mov	a,r6
      0008E3 25*00            [12] 2193 	add	a,_buffer0
      0008E5 FB               [12] 2194 	mov	r3,a
      0008E6 EF               [12] 2195 	mov	a,r7
      0008E7 35*01            [12] 2196 	addc	a,(_buffer0 + 1)
      0008E9 FC               [12] 2197 	mov	r4,a
      0008EA AD*02            [24] 2198 	mov	r5,(_buffer0 + 2)
      0008EC 8B 82            [24] 2199 	mov	dpl,r3
      0008EE 8C 83            [24] 2200 	mov	dph,r4
      0008F0 8D F0            [24] 2201 	mov	b,r5
      0008F2 E4               [12] 2202 	clr	a
      0008F3 12r00r00         [24] 2203 	lcall	__gptrput
                                   2204 ;	main.c:546: for(int i = 0; i < buffer_0_and_1_size; i++)
      0008F6 0E               [12] 2205 	inc	r6
      0008F7 BE 00 D7         [24] 2206 	cjne	r6,#0x00,00156$
      0008FA 0F               [12] 2207 	inc	r7
      0008FB 80 D4            [24] 2208 	sjmp	00156$
      0008FD                       2209 00102$:
                                   2210 ;	main.c:552: new_buffer_index++;
      0008FD 05*38            [12] 2211 	inc	_new_buffer_index
      0008FF E4               [12] 2212 	clr	a
      000900 B5*38 02         [24] 2213 	cjne	a,_new_buffer_index,00326$
      000903 05*39            [12] 2214 	inc	(_new_buffer_index + 1)
      000905                       2215 00326$:
      000905                       2216 00105$:
                                   2217 ;	main.c:555: if (( buffer1 = (__xdata char*) malloc(buffer_0_and_1_size)) == 0)
      000905 85*3C 82         [24] 2218 	mov	dpl,_buffer_0_and_1_size
      000908 85*3D 83         [24] 2219 	mov	dph,(_buffer_0_and_1_size + 1)
      00090B 12r00r00         [24] 2220 	lcall	_malloc
      00090E AE 82            [24] 2221 	mov	r6,dpl
      000910 AF 83            [24] 2222 	mov	r7,dph
      000912 7D 00            [12] 2223 	mov	r5,#0x00
      000914 8E*03            [24] 2224 	mov	_buffer1,r6
      000916 8F*04            [24] 2225 	mov	(_buffer1 + 1),r7
      000918 8D*05            [24] 2226 	mov	(_buffer1 + 2),r5
      00091A EE               [12] 2227 	mov	a,r6
      00091B 4F               [12] 2228 	orl	a,r7
      00091C 70 4B            [24] 2229 	jnz	00108$
                                   2230 ;	main.c:557: buffer1 = new_buffer[new_buffer_index];
      00091E 85*38*00         [24] 2231 	mov	__mulint_PARM_2,_new_buffer_index
      000921 85*39*01         [24] 2232 	mov	(__mulint_PARM_2 + 1),(_new_buffer_index + 1)
      000924 90 00 03         [24] 2233 	mov	dptr,#0x0003
      000927 12r00r00         [24] 2234 	lcall	__mulint
      00092A E5 82            [12] 2235 	mov	a,dpl
      00092C 24r06            [12] 2236 	add	a,#_new_buffer
      00092E F9               [12] 2237 	mov	r1,a
      00092F 87*03            [24] 2238 	mov	_buffer1,@r1
      000931 09               [12] 2239 	inc	r1
      000932 87*04            [24] 2240 	mov	(_buffer1 + 1),@r1
      000934 09               [12] 2241 	inc	r1
      000935 87*05            [24] 2242 	mov	(_buffer1 + 2),@r1
      000937 19               [12] 2243 	dec	r1
      000938 19               [12] 2244 	dec	r1
                                   2245 ;	main.c:558: printf_tiny("FALIURE: malloc for buffer1 failed\n\r");
      000939 74rC3            [12] 2246 	mov	a,#___str_42
      00093B C0 E0            [24] 2247 	push	acc
      00093D 74s05            [12] 2248 	mov	a,#(___str_42 >> 8)
      00093F C0 E0            [24] 2249 	push	acc
      000941 12r00r00         [24] 2250 	lcall	_printf_tiny
      000944 15 81            [12] 2251 	dec	sp
      000946 15 81            [12] 2252 	dec	sp
                                   2253 ;	main.c:561: free (buffer0);
      000948 AD*00            [24] 2254 	mov	r5,_buffer0
      00094A AE*01            [24] 2255 	mov	r6,(_buffer0 + 1)
      00094C AF*02            [24] 2256 	mov	r7,(_buffer0 + 2)
      00094E 8D 82            [24] 2257 	mov	dpl,r5
      000950 8E 83            [24] 2258 	mov	dph,r6
      000952 8F F0            [24] 2259 	mov	b,r7
      000954 12r00r00         [24] 2260 	lcall	_free
                                   2261 ;	main.c:562: free (buffer1);
      000957 AD*03            [24] 2262 	mov	r5,_buffer1
      000959 AE*04            [24] 2263 	mov	r6,(_buffer1 + 1)
      00095B AF*05            [24] 2264 	mov	r7,(_buffer1 + 2)
      00095D 8D 82            [24] 2265 	mov	dpl,r5
      00095F 8E 83            [24] 2266 	mov	dph,r6
      000961 8F F0            [24] 2267 	mov	b,r7
      000963 12r00r00         [24] 2268 	lcall	_free
      000966 02r08r2B         [24] 2269 	ljmp	00110$
      000969                       2270 00108$:
                                   2271 ;	main.c:566: printf_tiny("SUCCESS: buffer1 malloc done\n\r");
      000969 74rE8            [12] 2272 	mov	a,#___str_43
      00096B C0 E0            [24] 2273 	push	acc
      00096D 74s05            [12] 2274 	mov	a,#(___str_43 >> 8)
      00096F C0 E0            [24] 2275 	push	acc
      000971 12r00r00         [24] 2276 	lcall	_printf_tiny
      000974 15 81            [12] 2277 	dec	sp
      000976 15 81            [12] 2278 	dec	sp
                                   2279 ;	main.c:569: new_buffer[new_buffer_index] = buffer1;
      000978 85*38*00         [24] 2280 	mov	__mulint_PARM_2,_new_buffer_index
      00097B 85*39*01         [24] 2281 	mov	(__mulint_PARM_2 + 1),(_new_buffer_index + 1)
      00097E 90 00 03         [24] 2282 	mov	dptr,#0x0003
      000981 12r00r00         [24] 2283 	lcall	__mulint
      000984 E5 82            [12] 2284 	mov	a,dpl
      000986 24r06            [12] 2285 	add	a,#_new_buffer
      000988 F8               [12] 2286 	mov	r0,a
      000989 A6*03            [24] 2287 	mov	@r0,_buffer1
      00098B 08               [12] 2288 	inc	r0
      00098C A6*04            [24] 2289 	mov	@r0,(_buffer1 + 1)
      00098E 08               [12] 2290 	inc	r0
      00098F A6*05            [24] 2291 	mov	@r0,(_buffer1 + 2)
                                   2292 ;	main.c:573: new_buffer_size[1] = buffer_0_and_1_size;
      000991 85*3C*26         [24] 2293 	mov	((_new_buffer_size + 0x0002) + 0),_buffer_0_and_1_size
      000994 85*3D*27         [24] 2294 	mov	((_new_buffer_size + 0x0002) + 1),(_buffer_0_and_1_size + 1)
                                   2295 ;	main.c:574: printf_tiny(" Buffer1 size is : %d\n\r", new_buffer_size[1]);
      000997 C0*3C            [24] 2296 	push	_buffer_0_and_1_size
      000999 C0*3D            [24] 2297 	push	(_buffer_0_and_1_size + 1)
      00099B 74r07            [12] 2298 	mov	a,#___str_44
      00099D C0 E0            [24] 2299 	push	acc
      00099F 74s06            [12] 2300 	mov	a,#(___str_44 >> 8)
      0009A1 C0 E0            [24] 2301 	push	acc
      0009A3 12r00r00         [24] 2302 	lcall	_printf_tiny
      0009A6 E5 81            [12] 2303 	mov	a,sp
      0009A8 24 FC            [12] 2304 	add	a,#0xfc
      0009AA F5 81            [12] 2305 	mov	sp,a
                                   2306 ;	main.c:579: for(int i = 0; i < buffer_0_and_1_size; i++)
      0009AC 7E 00            [12] 2307 	mov	r6,#0x00
      0009AE 7F 00            [12] 2308 	mov	r7,#0x00
      0009B0                       2309 00159$:
      0009B0 C3               [12] 2310 	clr	c
      0009B1 EE               [12] 2311 	mov	a,r6
      0009B2 95*3C            [12] 2312 	subb	a,_buffer_0_and_1_size
      0009B4 EF               [12] 2313 	mov	a,r7
      0009B5 64 80            [12] 2314 	xrl	a,#0x80
      0009B7 85*3D F0         [24] 2315 	mov	b,(_buffer_0_and_1_size + 1)
      0009BA 63 F0 80         [24] 2316 	xrl	b,#0x80
      0009BD 95 F0            [12] 2317 	subb	a,b
      0009BF 50 1B            [24] 2318 	jnc	00106$
                                   2319 ;	main.c:581: buffer1[i] = '\0';
      0009C1 EE               [12] 2320 	mov	a,r6
      0009C2 25*03            [12] 2321 	add	a,_buffer1
      0009C4 FB               [12] 2322 	mov	r3,a
      0009C5 EF               [12] 2323 	mov	a,r7
      0009C6 35*04            [12] 2324 	addc	a,(_buffer1 + 1)
      0009C8 FC               [12] 2325 	mov	r4,a
      0009C9 AD*05            [24] 2326 	mov	r5,(_buffer1 + 2)
      0009CB 8B 82            [24] 2327 	mov	dpl,r3
      0009CD 8C 83            [24] 2328 	mov	dph,r4
      0009CF 8D F0            [24] 2329 	mov	b,r5
      0009D1 E4               [12] 2330 	clr	a
      0009D2 12r00r00         [24] 2331 	lcall	__gptrput
                                   2332 ;	main.c:579: for(int i = 0; i < buffer_0_and_1_size; i++)
      0009D5 0E               [12] 2333 	inc	r6
      0009D6 BE 00 D7         [24] 2334 	cjne	r6,#0x00,00159$
      0009D9 0F               [12] 2335 	inc	r7
      0009DA 80 D4            [24] 2336 	sjmp	00159$
      0009DC                       2337 00106$:
                                   2338 ;	main.c:585: new_buffer_index++;
      0009DC 05*38            [12] 2339 	inc	_new_buffer_index
      0009DE E4               [12] 2340 	clr	a
      0009DF B5*38 02         [24] 2341 	cjne	a,_new_buffer_index,00330$
      0009E2 05*39            [12] 2342 	inc	(_new_buffer_index + 1)
      0009E4                       2343 00330$:
                                   2344 ;	main.c:588: stay = false;
      0009E4 75*4A 00         [24] 2345 	mov	_main_stay_65536_111,#0x00
      0009E7 02r08r2B         [24] 2346 	ljmp	00110$
      0009EA                       2347 00112$:
                                   2348 ;	main.c:595: int idx = 0;
      0009EA E4               [12] 2349 	clr	a
      0009EB F5*4B            [12] 2350 	mov	_main_idx_65537_121,a
      0009ED F5*4C            [12] 2351 	mov	(_main_idx_65537_121 + 1),a
                                   2352 ;	main.c:601: storage_characters_buffer_0 = 0;
      0009EF F5*42            [12] 2353 	mov	_storage_characters_buffer_0,a
      0009F1 F5*43            [12] 2354 	mov	(_storage_characters_buffer_0 + 1),a
                                   2355 ;	main.c:602: total_characters = 0;
      0009F3 F5*40            [12] 2356 	mov	_total_characters,a
      0009F5 F5*41            [12] 2357 	mov	(_total_characters + 1),a
                                   2358 ;	main.c:604: while(1)
      0009F7                       2359 00153$:
                                   2360 ;	main.c:606: char ch = '\0';
      0009F7 75*4D 00         [24] 2361 	mov	_main_ch_131073_122,#0x00
                                   2362 ;	main.c:609: int character_type = fetch_character(&ch);
      0009FA 90r00r4D         [24] 2363 	mov	dptr,#_main_ch_131073_122
      0009FD 75 F0 40         [24] 2364 	mov	b,#0x40
      000A00 12r06r4F         [24] 2365 	lcall	_fetch_character
      000A03 AC 82            [24] 2366 	mov	r4,dpl
      000A05 AD 83            [24] 2367 	mov	r5,dph
      000A07 8C 02            [24] 2368 	mov	ar2,r4
      000A09 8D 03            [24] 2369 	mov	ar3,r5
                                   2370 ;	main.c:614: if(character_type == type_storage_characters)
      000A0B EC               [12] 2371 	mov	a,r4
      000A0C 4D               [12] 2372 	orl	a,r5
      000A0D 70 46            [24] 2373 	jnz	00150$
                                   2374 ;	main.c:620: total_characters++;
      000A0F 05*40            [12] 2375 	inc	_total_characters
      000A11 E4               [12] 2376 	clr	a
      000A12 B5*40 02         [24] 2377 	cjne	a,_total_characters,00332$
      000A15 05*41            [12] 2378 	inc	(_total_characters + 1)
      000A17                       2379 00332$:
                                   2380 ;	main.c:622: if(idx < new_buffer_size[0])
      000A17 C3               [12] 2381 	clr	c
      000A18 E5*4B            [12] 2382 	mov	a,_main_idx_65537_121
      000A1A 95*24            [12] 2383 	subb	a,_new_buffer_size
      000A1C E5*4C            [12] 2384 	mov	a,(_main_idx_65537_121 + 1)
      000A1E 64 80            [12] 2385 	xrl	a,#0x80
      000A20 85*25 F0         [24] 2386 	mov	b,(_new_buffer_size + 1)
      000A23 63 F0 80         [24] 2387 	xrl	b,#0x80
      000A26 95 F0            [12] 2388 	subb	a,b
      000A28 50 21            [24] 2389 	jnc	00114$
                                   2390 ;	main.c:625: char** temp_buffer0 = new_buffer;
                                   2391 ;	main.c:630: temp_buffer0[0][idx] = ch;
      000A2A AC*06            [24] 2392 	mov	r4,(_new_buffer + 0)
      000A2C AD*07            [24] 2393 	mov	r5,(_new_buffer + 1)
      000A2E AF*08            [24] 2394 	mov	r7,(_new_buffer + 2)
      000A30 E5*4B            [12] 2395 	mov	a,_main_idx_65537_121
      000A32 2C               [12] 2396 	add	a,r4
      000A33 FC               [12] 2397 	mov	r4,a
      000A34 E5*4C            [12] 2398 	mov	a,(_main_idx_65537_121 + 1)
      000A36 3D               [12] 2399 	addc	a,r5
      000A37 FD               [12] 2400 	mov	r5,a
      000A38 8C 82            [24] 2401 	mov	dpl,r4
      000A3A 8D 83            [24] 2402 	mov	dph,r5
      000A3C 8F F0            [24] 2403 	mov	b,r7
      000A3E E5*4D            [12] 2404 	mov	a,_main_ch_131073_122
      000A40 12r00r00         [24] 2405 	lcall	__gptrput
                                   2406 ;	main.c:635: storage_characters_buffer_0++;
      000A43 05*42            [12] 2407 	inc	_storage_characters_buffer_0
      000A45 E4               [12] 2408 	clr	a
      000A46 B5*42 02         [24] 2409 	cjne	a,_storage_characters_buffer_0,00334$
      000A49 05*43            [12] 2410 	inc	(_storage_characters_buffer_0 + 1)
      000A4B                       2411 00334$:
      000A4B                       2412 00114$:
                                   2413 ;	main.c:638: idx++;
      000A4B 05*4B            [12] 2414 	inc	_main_idx_65537_121
      000A4D E4               [12] 2415 	clr	a
      000A4E B5*4B A6         [24] 2416 	cjne	a,_main_idx_65537_121,00153$
      000A51 05*4C            [12] 2417 	inc	(_main_idx_65537_121 + 1)
      000A53 80 A2            [24] 2418 	sjmp	00153$
      000A55                       2419 00150$:
                                   2420 ;	main.c:642: else if(character_type == type_command_characters)
      000A55 BA 02 05         [24] 2421 	cjne	r2,#0x02,00336$
      000A58 BB 00 02         [24] 2422 	cjne	r3,#0x00,00336$
      000A5B 80 03            [24] 2423 	sjmp	00337$
      000A5D                       2424 00336$:
      000A5D 02r0Er44         [24] 2425 	ljmp	00147$
      000A60                       2426 00337$:
                                   2427 ;	main.c:648: total_characters++;
      000A60 05*40            [12] 2428 	inc	_total_characters
      000A62 E4               [12] 2429 	clr	a
      000A63 B5*40 02         [24] 2430 	cjne	a,_total_characters,00338$
      000A66 05*41            [12] 2431 	inc	(_total_characters + 1)
      000A68                       2432 00338$:
                                   2433 ;	main.c:650: switch(ch)
      000A68 74 2B            [12] 2434 	mov	a,#0x2b
      000A6A B5*4D 02         [24] 2435 	cjne	a,_main_ch_131073_122,00339$
      000A6D 80 23            [24] 2436 	sjmp	00115$
      000A6F                       2437 00339$:
      000A6F 74 2D            [12] 2438 	mov	a,#0x2d
      000A71 B5*4D 03         [24] 2439 	cjne	a,_main_ch_131073_122,00340$
      000A74 02r0Br11         [24] 2440 	ljmp	00119$
      000A77                       2441 00340$:
      000A77 74 3D            [12] 2442 	mov	a,#0x3d
      000A79 B5*4D 03         [24] 2443 	cjne	a,_main_ch_131073_122,00341$
      000A7C 02r0Cr56         [24] 2444 	ljmp	00137$
      000A7F                       2445 00341$:
      000A7F 74 3F            [12] 2446 	mov	a,#0x3f
      000A81 B5*4D 03         [24] 2447 	cjne	a,_main_ch_131073_122,00342$
      000A84 02r0Cr5C         [24] 2448 	ljmp	00138$
      000A87                       2449 00342$:
      000A87 74 40            [12] 2450 	mov	a,#0x40
      000A89 B5*4D 03         [24] 2451 	cjne	a,_main_ch_131073_122,00343$
      000A8C 02r0Er2F         [24] 2452 	ljmp	00143$
      000A8F                       2453 00343$:
      000A8F 02r09rF7         [24] 2454 	ljmp	00153$
                                   2455 ;	main.c:652: case '+':
      000A92                       2456 00115$:
                                   2457 ;	main.c:661: other_buffer_size = fetch_buffer_size(type_other_buffer);
      000A92 75 82 02         [24] 2458 	mov	dpl,#0x02
      000A95 12r00rDF         [24] 2459 	lcall	_fetch_buffer_size
      000A98 85 82*3E         [24] 2460 	mov	_other_buffer_size,dpl
      000A9B 85 83*3F         [24] 2461 	mov	(_other_buffer_size + 1),dph
                                   2462 ;	main.c:675: if ((new_buffer[new_buffer_index] = (__xdata char*) malloc(other_buffer_size)) == 0)
      000A9E 85*38*00         [24] 2463 	mov	__mulint_PARM_2,_new_buffer_index
      000AA1 85*39*01         [24] 2464 	mov	(__mulint_PARM_2 + 1),(_new_buffer_index + 1)
      000AA4 90 00 03         [24] 2465 	mov	dptr,#0x0003
      000AA7 12r00r00         [24] 2466 	lcall	__mulint
      000AAA E5 82            [12] 2467 	mov	a,dpl
      000AAC 24r06            [12] 2468 	add	a,#_new_buffer
      000AAE F9               [12] 2469 	mov	r1,a
      000AAF 85*3E 82         [24] 2470 	mov	dpl,_other_buffer_size
      000AB2 85*3F 83         [24] 2471 	mov	dph,(_other_buffer_size + 1)
      000AB5 C0 01            [24] 2472 	push	ar1
      000AB7 12r00r00         [24] 2473 	lcall	_malloc
      000ABA AE 82            [24] 2474 	mov	r6,dpl
      000ABC AF 83            [24] 2475 	mov	r7,dph
      000ABE D0 01            [24] 2476 	pop	ar1
      000AC0 7D 00            [12] 2477 	mov	r5,#0x00
      000AC2 A7 06            [24] 2478 	mov	@r1,ar6
      000AC4 09               [12] 2479 	inc	r1
      000AC5 A7 07            [24] 2480 	mov	@r1,ar7
      000AC7 09               [12] 2481 	inc	r1
      000AC8 A7 05            [24] 2482 	mov	@r1,ar5
      000ACA 19               [12] 2483 	dec	r1
      000ACB 19               [12] 2484 	dec	r1
      000ACC EE               [12] 2485 	mov	a,r6
      000ACD 4F               [12] 2486 	orl	a,r7
      000ACE 70 11            [24] 2487 	jnz	00117$
                                   2488 ;	main.c:678: printf_tiny("\n\rFAILURE: new_buffer malloc failed\n\r");
      000AD0 74r1F            [12] 2489 	mov	a,#___str_45
      000AD2 C0 E0            [24] 2490 	push	acc
      000AD4 74s06            [12] 2491 	mov	a,#(___str_45 >> 8)
      000AD6 C0 E0            [24] 2492 	push	acc
      000AD8 12r00r00         [24] 2493 	lcall	_printf_tiny
      000ADB 15 81            [12] 2494 	dec	sp
      000ADD 15 81            [12] 2495 	dec	sp
      000ADF 80 28            [24] 2496 	sjmp	00118$
      000AE1                       2497 00117$:
                                   2498 ;	main.c:684: new_buffer_size[new_buffer_index] = other_buffer_size;
      000AE1 E5*38            [12] 2499 	mov	a,_new_buffer_index
      000AE3 25*38            [12] 2500 	add	a,_new_buffer_index
      000AE5 FE               [12] 2501 	mov	r6,a
      000AE6 E5*39            [12] 2502 	mov	a,(_new_buffer_index + 1)
      000AE8 33               [12] 2503 	rlc	a
      000AE9 EE               [12] 2504 	mov	a,r6
      000AEA 24r24            [12] 2505 	add	a,#_new_buffer_size
      000AEC F8               [12] 2506 	mov	r0,a
      000AED A6*3E            [24] 2507 	mov	@r0,_other_buffer_size
      000AEF 08               [12] 2508 	inc	r0
      000AF0 A6*3F            [24] 2509 	mov	@r0,(_other_buffer_size + 1)
                                   2510 ;	main.c:686: new_buffer_index++;
      000AF2 05*38            [12] 2511 	inc	_new_buffer_index
      000AF4 E4               [12] 2512 	clr	a
      000AF5 B5*38 02         [24] 2513 	cjne	a,_new_buffer_index,00345$
      000AF8 05*39            [12] 2514 	inc	(_new_buffer_index + 1)
      000AFA                       2515 00345$:
                                   2516 ;	main.c:688: printf_tiny("\n\rSUCCESS: new_buffer malloc passed\n\r");
      000AFA 74r45            [12] 2517 	mov	a,#___str_46
      000AFC C0 E0            [24] 2518 	push	acc
      000AFE 74s06            [12] 2519 	mov	a,#(___str_46 >> 8)
      000B00 C0 E0            [24] 2520 	push	acc
      000B02 12r00r00         [24] 2521 	lcall	_printf_tiny
      000B05 15 81            [12] 2522 	dec	sp
      000B07 15 81            [12] 2523 	dec	sp
      000B09                       2524 00118$:
                                   2525 ;	main.c:692: other_buffer_size = 0;
      000B09 E4               [12] 2526 	clr	a
      000B0A F5*3E            [12] 2527 	mov	_other_buffer_size,a
      000B0C F5*3F            [12] 2528 	mov	(_other_buffer_size + 1),a
                                   2529 ;	main.c:694: break;
      000B0E 02r09rF7         [24] 2530 	ljmp	00153$
                                   2531 ;	main.c:696: case '-':
      000B11                       2532 00119$:
                                   2533 ;	main.c:713: buffer_number = 0;
      000B11 7E 00            [12] 2534 	mov	r6,#0x00
      000B13 7F 00            [12] 2535 	mov	r7,#0x00
                                   2536 ;	main.c:715: printf_tiny("\n\rEnter a valid buffer no. for deletion: ");
      000B15 C0 07            [24] 2537 	push	ar7
      000B17 C0 06            [24] 2538 	push	ar6
      000B19 74r6B            [12] 2539 	mov	a,#___str_47
      000B1B C0 E0            [24] 2540 	push	acc
      000B1D 74s06            [12] 2541 	mov	a,#(___str_47 >> 8)
      000B1F C0 E0            [24] 2542 	push	acc
      000B21 12r00r00         [24] 2543 	lcall	_printf_tiny
      000B24 15 81            [12] 2544 	dec	sp
      000B26 15 81            [12] 2545 	dec	sp
                                   2546 ;	main.c:717: char character = getchar();putchar(character);//printf_tiny("\n\r");
      000B28 12r00r07         [24] 2547 	lcall	_getchar
      000B2B AC 82            [24] 2548 	mov	r4,dpl
      000B2D 8C 03            [24] 2549 	mov	ar3,r4
      000B2F 7D 00            [12] 2550 	mov	r5,#0x00
      000B31 8B 82            [24] 2551 	mov	dpl,r3
      000B33 8D 83            [24] 2552 	mov	dph,r5
      000B35 C0 04            [24] 2553 	push	ar4
      000B37 12r00r15         [24] 2554 	lcall	_putchar
      000B3A D0 04            [24] 2555 	pop	ar4
      000B3C D0 06            [24] 2556 	pop	ar6
      000B3E D0 07            [24] 2557 	pop	ar7
                                   2558 ;	main.c:719: if(character == '\r')
      000B40 BC 0D 12         [24] 2559 	cjne	r4,#0x0d,00126$
                                   2560 ;	main.c:721: printf_tiny("\n\rNO entry -> directly ENTER is pressed\n\r");
      000B43 74r95            [12] 2561 	mov	a,#___str_48
      000B45 C0 E0            [24] 2562 	push	acc
      000B47 74s06            [12] 2563 	mov	a,#(___str_48 >> 8)
      000B49 C0 E0            [24] 2564 	push	acc
      000B4B 12r00r00         [24] 2565 	lcall	_printf_tiny
      000B4E 15 81            [12] 2566 	dec	sp
      000B50 15 81            [12] 2567 	dec	sp
                                   2568 ;	main.c:722: break;
      000B52 02r09rF7         [24] 2569 	ljmp	00153$
                                   2570 ;	main.c:726: while(1)
      000B55                       2571 00126$:
                                   2572 ;	main.c:728: if(character < '0' || character > '9')
      000B55 BC 30 00         [24] 2573 	cjne	r4,#0x30,00348$
      000B58                       2574 00348$:
      000B58 40 05            [24] 2575 	jc	00120$
      000B5A EC               [12] 2576 	mov	a,r4
      000B5B 24 C6            [12] 2577 	add	a,#0xff - 0x39
      000B5D 50 19            [24] 2578 	jnc	00121$
      000B5F                       2579 00120$:
                                   2580 ;	main.c:730: printf_tiny("\n\rFAILURE: invalid digits entered \n\r");
      000B5F C0 07            [24] 2581 	push	ar7
      000B61 C0 06            [24] 2582 	push	ar6
      000B63 74rBF            [12] 2583 	mov	a,#___str_49
      000B65 C0 E0            [24] 2584 	push	acc
      000B67 74s06            [12] 2585 	mov	a,#(___str_49 >> 8)
      000B69 C0 E0            [24] 2586 	push	acc
      000B6B 12r00r00         [24] 2587 	lcall	_printf_tiny
      000B6E 15 81            [12] 2588 	dec	sp
      000B70 15 81            [12] 2589 	dec	sp
      000B72 D0 06            [24] 2590 	pop	ar6
      000B74 D0 07            [24] 2591 	pop	ar7
                                   2592 ;	main.c:731: break;
      000B76 80 4A            [24] 2593 	sjmp	00130$
      000B78                       2594 00121$:
                                   2595 ;	main.c:734: int temp = character - '0';
      000B78 8C 03            [24] 2596 	mov	ar3,r4
      000B7A 7D 00            [12] 2597 	mov	r5,#0x00
      000B7C EB               [12] 2598 	mov	a,r3
      000B7D 24 D0            [12] 2599 	add	a,#0xd0
      000B7F FB               [12] 2600 	mov	r3,a
      000B80 ED               [12] 2601 	mov	a,r5
      000B81 34 FF            [12] 2602 	addc	a,#0xff
      000B83 FD               [12] 2603 	mov	r5,a
                                   2604 ;	main.c:736: buffer_number = buffer_number*10 + temp; //we enter seperate numbers so if 1 and 2 and 3 then its 123(only single number)
      000B84 8E*00            [24] 2605 	mov	__mulint_PARM_2,r6
      000B86 8F*01            [24] 2606 	mov	(__mulint_PARM_2 + 1),r7
      000B88 90 00 0A         [24] 2607 	mov	dptr,#0x000a
      000B8B C0 05            [24] 2608 	push	ar5
      000B8D C0 03            [24] 2609 	push	ar3
      000B8F 12r00r00         [24] 2610 	lcall	__mulint
      000B92 E5 82            [12] 2611 	mov	a,dpl
      000B94 85 83 F0         [24] 2612 	mov	b,dph
      000B97 D0 03            [24] 2613 	pop	ar3
      000B99 D0 05            [24] 2614 	pop	ar5
      000B9B 2B               [12] 2615 	add	a,r3
      000B9C FE               [12] 2616 	mov	r6,a
      000B9D ED               [12] 2617 	mov	a,r5
      000B9E 35 F0            [12] 2618 	addc	a,b
      000BA0 FF               [12] 2619 	mov	r7,a
                                   2620 ;	main.c:738: character = getchar();putchar(character);
      000BA1 C0 07            [24] 2621 	push	ar7
      000BA3 C0 06            [24] 2622 	push	ar6
      000BA5 12r00r07         [24] 2623 	lcall	_getchar
      000BA8 AB 82            [24] 2624 	mov	r3,dpl
      000BAA 8B 04            [24] 2625 	mov	ar4,r3
      000BAC 8C 03            [24] 2626 	mov	ar3,r4
      000BAE 7D 00            [12] 2627 	mov	r5,#0x00
      000BB0 8B 82            [24] 2628 	mov	dpl,r3
      000BB2 8D 83            [24] 2629 	mov	dph,r5
      000BB4 C0 04            [24] 2630 	push	ar4
      000BB6 12r00r15         [24] 2631 	lcall	_putchar
      000BB9 D0 04            [24] 2632 	pop	ar4
      000BBB D0 06            [24] 2633 	pop	ar6
      000BBD D0 07            [24] 2634 	pop	ar7
                                   2635 ;	main.c:740: if(character == '\r') { break; }
      000BBF BC 0D 93         [24] 2636 	cjne	r4,#0x0d,00126$
      000BC2                       2637 00130$:
                                   2638 ;	main.c:748: if(buffer_number == 0)
      000BC2 EE               [12] 2639 	mov	a,r6
      000BC3 4F               [12] 2640 	orl	a,r7
      000BC4 70 12            [24] 2641 	jnz	00132$
                                   2642 ;	main.c:750: printf_tiny("\n\rBuffer number can't be 0\n\r");
      000BC6 74rE4            [12] 2643 	mov	a,#___str_50
      000BC8 C0 E0            [24] 2644 	push	acc
      000BCA 74s06            [12] 2645 	mov	a,#(___str_50 >> 8)
      000BCC C0 E0            [24] 2646 	push	acc
      000BCE 12r00r00         [24] 2647 	lcall	_printf_tiny
      000BD1 15 81            [12] 2648 	dec	sp
      000BD3 15 81            [12] 2649 	dec	sp
                                   2650 ;	main.c:751: break;
      000BD5 02r09rF7         [24] 2651 	ljmp	00153$
      000BD8                       2652 00132$:
                                   2653 ;	main.c:756: if(buffer_number >= new_buffer_index - 1)
      000BD8 E5*38            [12] 2654 	mov	a,_new_buffer_index
      000BDA 24 FF            [12] 2655 	add	a,#0xff
      000BDC FC               [12] 2656 	mov	r4,a
      000BDD E5*39            [12] 2657 	mov	a,(_new_buffer_index + 1)
      000BDF 34 FF            [12] 2658 	addc	a,#0xff
      000BE1 FD               [12] 2659 	mov	r5,a
      000BE2 C3               [12] 2660 	clr	c
      000BE3 EE               [12] 2661 	mov	a,r6
      000BE4 9C               [12] 2662 	subb	a,r4
      000BE5 EF               [12] 2663 	mov	a,r7
      000BE6 64 80            [12] 2664 	xrl	a,#0x80
      000BE8 8D F0            [24] 2665 	mov	b,r5
      000BEA 63 F0 80         [24] 2666 	xrl	b,#0x80
      000BED 95 F0            [12] 2667 	subb	a,b
      000BEF 40 12            [24] 2668 	jc	00134$
                                   2669 ;	main.c:758: printf_tiny("\n\rFAILURE: Buffer doesn't exist\n\r");
      000BF1 74r01            [12] 2670 	mov	a,#___str_51
      000BF3 C0 E0            [24] 2671 	push	acc
      000BF5 74s07            [12] 2672 	mov	a,#(___str_51 >> 8)
      000BF7 C0 E0            [24] 2673 	push	acc
      000BF9 12r00r00         [24] 2674 	lcall	_printf_tiny
      000BFC 15 81            [12] 2675 	dec	sp
      000BFE 15 81            [12] 2676 	dec	sp
                                   2677 ;	main.c:759: break;
      000C00 02r09rF7         [24] 2678 	ljmp	00153$
      000C03                       2679 00134$:
                                   2680 ;	main.c:762: if(new_buffer[buffer_number] == 0)
      000C03 8E*00            [24] 2681 	mov	__mulint_PARM_2,r6
      000C05 8F*01            [24] 2682 	mov	(__mulint_PARM_2 + 1),r7
      000C07 90 00 03         [24] 2683 	mov	dptr,#0x0003
      000C0A 12r00r00         [24] 2684 	lcall	__mulint
      000C0D E5 82            [12] 2685 	mov	a,dpl
      000C0F 24r06            [12] 2686 	add	a,#_new_buffer
      000C11 F9               [12] 2687 	mov	r1,a
      000C12 87 05            [24] 2688 	mov	ar5,@r1
      000C14 09               [12] 2689 	inc	r1
      000C15 87 06            [24] 2690 	mov	ar6,@r1
      000C17 09               [12] 2691 	inc	r1
      000C18 87 07            [24] 2692 	mov	ar7,@r1
      000C1A 19               [12] 2693 	dec	r1
      000C1B 19               [12] 2694 	dec	r1
      000C1C ED               [12] 2695 	mov	a,r5
      000C1D 4E               [12] 2696 	orl	a,r6
      000C1E 70 12            [24] 2697 	jnz	00136$
                                   2698 ;	main.c:764: printf_tiny("\n\rFAILURE: Buffer doesn't exist\n\r");
      000C20 74r01            [12] 2699 	mov	a,#___str_51
      000C22 C0 E0            [24] 2700 	push	acc
      000C24 74s07            [12] 2701 	mov	a,#(___str_51 >> 8)
      000C26 C0 E0            [24] 2702 	push	acc
      000C28 12r00r00         [24] 2703 	lcall	_printf_tiny
      000C2B 15 81            [12] 2704 	dec	sp
      000C2D 15 81            [12] 2705 	dec	sp
                                   2706 ;	main.c:765: break;
      000C2F 02r09rF7         [24] 2707 	ljmp	00153$
      000C32                       2708 00136$:
                                   2709 ;	main.c:769: free(new_buffer[buffer_number]);
      000C32 8D 82            [24] 2710 	mov	dpl,r5
      000C34 8E 83            [24] 2711 	mov	dph,r6
      000C36 8F F0            [24] 2712 	mov	b,r7
      000C38 12r00r00         [24] 2713 	lcall	_free
                                   2714 ;	main.c:771: printf_tiny("\n\rSUCCESS: Buffer freed\n\r");
      000C3B 74r23            [12] 2715 	mov	a,#___str_52
      000C3D C0 E0            [24] 2716 	push	acc
      000C3F 74s07            [12] 2717 	mov	a,#(___str_52 >> 8)
      000C41 C0 E0            [24] 2718 	push	acc
      000C43 12r00r00         [24] 2719 	lcall	_printf_tiny
      000C46 15 81            [12] 2720 	dec	sp
      000C48 15 81            [12] 2721 	dec	sp
                                   2722 ;	main.c:773: new_buffer_index--;
      000C4A 15*38            [12] 2723 	dec	_new_buffer_index
      000C4C 74 FF            [12] 2724 	mov	a,#0xff
      000C4E B5*38 02         [24] 2725 	cjne	a,_new_buffer_index,00356$
      000C51 15*39            [12] 2726 	dec	(_new_buffer_index + 1)
      000C53                       2727 00356$:
                                   2728 ;	main.c:775: break;
      000C53 02r09rF7         [24] 2729 	ljmp	00153$
                                   2730 ;	main.c:777: case '=':
      000C56                       2731 00137$:
                                   2732 ;	main.c:796: flush_buffer0();
      000C56 12r05r15         [24] 2733 	lcall	_flush_buffer0
                                   2734 ;	main.c:798: break;
      000C59 02r09rF7         [24] 2735 	ljmp	00153$
                                   2736 ;	main.c:800: case '?':
      000C5C                       2737 00138$:
                                   2738 ;	main.c:805: printf_tiny("\n\r************  HEAP REPORT  **************\n\r");
      000C5C 74r3D            [12] 2739 	mov	a,#___str_53
      000C5E C0 E0            [24] 2740 	push	acc
      000C60 74s07            [12] 2741 	mov	a,#(___str_53 >> 8)
      000C62 C0 E0            [24] 2742 	push	acc
      000C64 12r00r00         [24] 2743 	lcall	_printf_tiny
      000C67 15 81            [12] 2744 	dec	sp
      000C69 15 81            [12] 2745 	dec	sp
                                   2746 ;	main.c:807: printf_tiny("total number of characters received since the last '?' : %d\n\r", total_characters);
      000C6B C0*40            [24] 2747 	push	_total_characters
      000C6D C0*41            [24] 2748 	push	(_total_characters + 1)
      000C6F 74r6B            [12] 2749 	mov	a,#___str_54
      000C71 C0 E0            [24] 2750 	push	acc
      000C73 74s07            [12] 2751 	mov	a,#(___str_54 >> 8)
      000C75 C0 E0            [24] 2752 	push	acc
      000C77 12r00r00         [24] 2753 	lcall	_printf_tiny
      000C7A E5 81            [12] 2754 	mov	a,sp
      000C7C 24 FC            [12] 2755 	add	a,#0xfc
      000C7E F5 81            [12] 2756 	mov	sp,a
                                   2757 ;	main.c:808: printf_tiny("total number of buffers : %d\n\r", new_buffer_index);
      000C80 C0*38            [24] 2758 	push	_new_buffer_index
      000C82 C0*39            [24] 2759 	push	(_new_buffer_index + 1)
      000C84 74rA9            [12] 2760 	mov	a,#___str_55
      000C86 C0 E0            [24] 2761 	push	acc
      000C88 74s07            [12] 2762 	mov	a,#(___str_55 >> 8)
      000C8A C0 E0            [24] 2763 	push	acc
      000C8C 12r00r00         [24] 2764 	lcall	_printf_tiny
      000C8F E5 81            [12] 2765 	mov	a,sp
      000C91 24 FC            [12] 2766 	add	a,#0xfc
      000C93 F5 81            [12] 2767 	mov	sp,a
                                   2768 ;	main.c:835: for(int i = 0; i< new_buffer_index; i++)
      000C95 E4               [12] 2769 	clr	a
      000C96 F5*4E            [12] 2770 	mov	_main_i_327682_139,a
      000C98 F5*4F            [12] 2771 	mov	(_main_i_327682_139 + 1),a
      000C9A FC               [12] 2772 	mov	r4,a
      000C9B FD               [12] 2773 	mov	r5,a
      000C9C                       2774 00165$:
      000C9C C3               [12] 2775 	clr	c
      000C9D E5*4E            [12] 2776 	mov	a,_main_i_327682_139
      000C9F 95*38            [12] 2777 	subb	a,_new_buffer_index
      000CA1 E5*4F            [12] 2778 	mov	a,(_main_i_327682_139 + 1)
      000CA3 64 80            [12] 2779 	xrl	a,#0x80
      000CA5 85*39 F0         [24] 2780 	mov	b,(_new_buffer_index + 1)
      000CA8 63 F0 80         [24] 2781 	xrl	b,#0x80
      000CAB 95 F0            [12] 2782 	subb	a,b
      000CAD 40 03            [24] 2783 	jc	00357$
      000CAF 02r09rF7         [24] 2784 	ljmp	00153$
      000CB2                       2785 00357$:
                                   2786 ;	main.c:837: printf_tiny("\n\r\n\rBuffer #%d\n\r", i);
      000CB2 C0 05            [24] 2787 	push	ar5
      000CB4 C0 04            [24] 2788 	push	ar4
      000CB6 C0*4E            [24] 2789 	push	_main_i_327682_139
      000CB8 C0*4F            [24] 2790 	push	(_main_i_327682_139 + 1)
      000CBA 74rC8            [12] 2791 	mov	a,#___str_56
      000CBC C0 E0            [24] 2792 	push	acc
      000CBE 74s07            [12] 2793 	mov	a,#(___str_56 >> 8)
      000CC0 C0 E0            [24] 2794 	push	acc
      000CC2 12r00r00         [24] 2795 	lcall	_printf_tiny
      000CC5 E5 81            [12] 2796 	mov	a,sp
      000CC7 24 FC            [12] 2797 	add	a,#0xfc
      000CC9 F5 81            [12] 2798 	mov	sp,a
                                   2799 ;	main.c:839: printf_tiny("\n\rBuffer start address: ");
      000CCB 74rD9            [12] 2800 	mov	a,#___str_57
      000CCD C0 E0            [24] 2801 	push	acc
      000CCF 74s07            [12] 2802 	mov	a,#(___str_57 >> 8)
      000CD1 C0 E0            [24] 2803 	push	acc
      000CD3 12r00r00         [24] 2804 	lcall	_printf_tiny
      000CD6 15 81            [12] 2805 	dec	sp
      000CD8 15 81            [12] 2806 	dec	sp
      000CDA D0 04            [24] 2807 	pop	ar4
                                   2808 ;	main.c:841: temp = (int) (new_buffer[i]);
      000CDC EC               [12] 2809 	mov	a,r4
      000CDD 24r06            [12] 2810 	add	a,#_new_buffer
      000CDF F9               [12] 2811 	mov	r1,a
      000CE0 87 02            [24] 2812 	mov	ar2,@r1
      000CE2 09               [12] 2813 	inc	r1
      000CE3 87 03            [24] 2814 	mov	ar3,@r1
      000CE5 19               [12] 2815 	dec	r1
                                   2816 ;	main.c:842: printf_tiny("0x");
      000CE6 C0 04            [24] 2817 	push	ar4
      000CE8 C0 03            [24] 2818 	push	ar3
      000CEA C0 02            [24] 2819 	push	ar2
      000CEC C0 01            [24] 2820 	push	ar1
      000CEE 74rF2            [12] 2821 	mov	a,#___str_58
      000CF0 C0 E0            [24] 2822 	push	acc
      000CF2 74s07            [12] 2823 	mov	a,#(___str_58 >> 8)
      000CF4 C0 E0            [24] 2824 	push	acc
      000CF6 12r00r00         [24] 2825 	lcall	_printf_tiny
      000CF9 15 81            [12] 2826 	dec	sp
      000CFB 15 81            [12] 2827 	dec	sp
      000CFD D0 01            [24] 2828 	pop	ar1
      000CFF D0 02            [24] 2829 	pop	ar2
      000D01 D0 03            [24] 2830 	pop	ar3
                                   2831 ;	main.c:843: flush_address(temp);
      000D03 8A 82            [24] 2832 	mov	dpl,r2
      000D05 8B 83            [24] 2833 	mov	dph,r3
      000D07 C0 01            [24] 2834 	push	ar1
      000D09 12r03r74         [24] 2835 	lcall	_flush_address
                                   2836 ;	main.c:846: printf_tiny("\n\rBuffer end address:   ");
      000D0C 74rF5            [12] 2837 	mov	a,#___str_59
      000D0E C0 E0            [24] 2838 	push	acc
      000D10 74s07            [12] 2839 	mov	a,#(___str_59 >> 8)
      000D12 C0 E0            [24] 2840 	push	acc
      000D14 12r00r00         [24] 2841 	lcall	_printf_tiny
      000D17 15 81            [12] 2842 	dec	sp
      000D19 15 81            [12] 2843 	dec	sp
      000D1B D0 01            [24] 2844 	pop	ar1
      000D1D D0 04            [24] 2845 	pop	ar4
      000D1F D0 05            [24] 2846 	pop	ar5
                                   2847 ;	main.c:848: temp = (int) ( (new_buffer[i]) + new_buffer_size[i] );
      000D21 87 02            [24] 2848 	mov	ar2,@r1
      000D23 09               [12] 2849 	inc	r1
      000D24 87 03            [24] 2850 	mov	ar3,@r1
      000D26 09               [12] 2851 	inc	r1
      000D27 19               [12] 2852 	dec	r1
      000D28 19               [12] 2853 	dec	r1
      000D29 C0 04            [24] 2854 	push	ar4
      000D2B C0 05            [24] 2855 	push	ar5
      000D2D E5*4E            [12] 2856 	mov	a,_main_i_327682_139
      000D2F 25*4E            [12] 2857 	add	a,_main_i_327682_139
      000D31 FD               [12] 2858 	mov	r5,a
      000D32 E5*4F            [12] 2859 	mov	a,(_main_i_327682_139 + 1)
      000D34 33               [12] 2860 	rlc	a
      000D35 ED               [12] 2861 	mov	a,r5
      000D36 24r24            [12] 2862 	add	a,#_new_buffer_size
      000D38 F9               [12] 2863 	mov	r1,a
      000D39 87 05            [24] 2864 	mov	ar5,@r1
      000D3B 09               [12] 2865 	inc	r1
      000D3C 87 06            [24] 2866 	mov	ar6,@r1
      000D3E 19               [12] 2867 	dec	r1
      000D3F ED               [12] 2868 	mov	a,r5
      000D40 2A               [12] 2869 	add	a,r2
      000D41 FA               [12] 2870 	mov	r2,a
      000D42 EE               [12] 2871 	mov	a,r6
      000D43 3B               [12] 2872 	addc	a,r3
      000D44 FB               [12] 2873 	mov	r3,a
                                   2874 ;	main.c:849: printf_tiny("0x");
      000D45 C0 05            [24] 2875 	push	ar5
      000D47 C0 04            [24] 2876 	push	ar4
      000D49 C0 03            [24] 2877 	push	ar3
      000D4B C0 02            [24] 2878 	push	ar2
      000D4D C0 01            [24] 2879 	push	ar1
      000D4F 74rF2            [12] 2880 	mov	a,#___str_58
      000D51 C0 E0            [24] 2881 	push	acc
      000D53 74s07            [12] 2882 	mov	a,#(___str_58 >> 8)
      000D55 C0 E0            [24] 2883 	push	acc
      000D57 12r00r00         [24] 2884 	lcall	_printf_tiny
      000D5A 15 81            [12] 2885 	dec	sp
      000D5C 15 81            [12] 2886 	dec	sp
      000D5E D0 01            [24] 2887 	pop	ar1
      000D60 D0 02            [24] 2888 	pop	ar2
      000D62 D0 03            [24] 2889 	pop	ar3
                                   2890 ;	main.c:850: flush_address(temp);
      000D64 8A 82            [24] 2891 	mov	dpl,r2
      000D66 8B 83            [24] 2892 	mov	dph,r3
      000D68 C0 01            [24] 2893 	push	ar1
      000D6A 12r03r74         [24] 2894 	lcall	_flush_address
      000D6D D0 01            [24] 2895 	pop	ar1
                                   2896 ;	main.c:852: printf_tiny("\n\rTotal allocated size of the buffer (in bytes): %d", new_buffer_size[i]);
      000D6F 87 06            [24] 2897 	mov	ar6,@r1
      000D71 09               [12] 2898 	inc	r1
      000D72 87 07            [24] 2899 	mov	ar7,@r1
      000D74 19               [12] 2900 	dec	r1
      000D75 C0 01            [24] 2901 	push	ar1
      000D77 C0 06            [24] 2902 	push	ar6
      000D79 C0 07            [24] 2903 	push	ar7
      000D7B 74r0E            [12] 2904 	mov	a,#___str_60
      000D7D C0 E0            [24] 2905 	push	acc
      000D7F 74s08            [12] 2906 	mov	a,#(___str_60 >> 8)
      000D81 C0 E0            [24] 2907 	push	acc
      000D83 12r00r00         [24] 2908 	lcall	_printf_tiny
      000D86 E5 81            [12] 2909 	mov	a,sp
      000D88 24 FC            [12] 2910 	add	a,#0xfc
      000D8A F5 81            [12] 2911 	mov	sp,a
      000D8C D0 01            [24] 2912 	pop	ar1
                                   2913 ;	main.c:854: printf_tiny("\n\rNumber of free spaces remaining in that buffer: %d\n\r", new_buffer_size[i]);
      000D8E 87 06            [24] 2914 	mov	ar6,@r1
      000D90 09               [12] 2915 	inc	r1
      000D91 87 07            [24] 2916 	mov	ar7,@r1
      000D93 19               [12] 2917 	dec	r1
      000D94 C0 06            [24] 2918 	push	ar6
      000D96 C0 07            [24] 2919 	push	ar7
      000D98 74r42            [12] 2920 	mov	a,#___str_61
      000D9A C0 E0            [24] 2921 	push	acc
      000D9C 74s08            [12] 2922 	mov	a,#(___str_61 >> 8)
      000D9E C0 E0            [24] 2923 	push	acc
      000DA0 12r00r00         [24] 2924 	lcall	_printf_tiny
      000DA3 E5 81            [12] 2925 	mov	a,sp
      000DA5 24 FC            [12] 2926 	add	a,#0xfc
      000DA7 F5 81            [12] 2927 	mov	sp,a
      000DA9 D0 04            [24] 2928 	pop	ar4
      000DAB D0 05            [24] 2929 	pop	ar5
                                   2930 ;	main.c:856: if(i == 0)
      000DAD D0 05            [24] 2931 	pop	ar5
      000DAF D0 04            [24] 2932 	pop	ar4
      000DB1 E5*4E            [12] 2933 	mov	a,_main_i_327682_139
      000DB3 45*4F            [12] 2934 	orl	a,(_main_i_327682_139 + 1)
                                   2935 ;	main.c:860: for(int i = 0; i < new_buffer_size[i]; i++)
      000DB5 70 4F            [24] 2936 	jnz	00141$
      000DB7 F5*50            [12] 2937 	mov	_main_i_524291_143,a
      000DB9 F5*51            [12] 2938 	mov	(_main_i_524291_143 + 1),a
      000DBB                       2939 00162$:
      000DBB E5*50            [12] 2940 	mov	a,_main_i_524291_143
      000DBD 25*50            [12] 2941 	add	a,_main_i_524291_143
      000DBF FA               [12] 2942 	mov	r2,a
      000DC0 E5*51            [12] 2943 	mov	a,(_main_i_524291_143 + 1)
      000DC2 33               [12] 2944 	rlc	a
      000DC3 EA               [12] 2945 	mov	a,r2
      000DC4 24r24            [12] 2946 	add	a,#_new_buffer_size
      000DC6 F9               [12] 2947 	mov	r1,a
      000DC7 87 02            [24] 2948 	mov	ar2,@r1
      000DC9 09               [12] 2949 	inc	r1
      000DCA 87 03            [24] 2950 	mov	ar3,@r1
      000DCC 19               [12] 2951 	dec	r1
      000DCD C3               [12] 2952 	clr	c
      000DCE E5*50            [12] 2953 	mov	a,_main_i_524291_143
      000DD0 9A               [12] 2954 	subb	a,r2
      000DD1 E5*51            [12] 2955 	mov	a,(_main_i_524291_143 + 1)
      000DD3 64 80            [12] 2956 	xrl	a,#0x80
      000DD5 8B F0            [24] 2957 	mov	b,r3
      000DD7 63 F0 80         [24] 2958 	xrl	b,#0x80
      000DDA 95 F0            [12] 2959 	subb	a,b
      000DDC 50 1F            [24] 2960 	jnc	00139$
                                   2961 ;	main.c:862: buffer0[i] = '\0';
      000DDE E5*50            [12] 2962 	mov	a,_main_i_524291_143
      000DE0 25*00            [12] 2963 	add	a,_buffer0
      000DE2 FA               [12] 2964 	mov	r2,a
      000DE3 E5*51            [12] 2965 	mov	a,(_main_i_524291_143 + 1)
      000DE5 35*01            [12] 2966 	addc	a,(_buffer0 + 1)
      000DE7 FB               [12] 2967 	mov	r3,a
      000DE8 AF*02            [24] 2968 	mov	r7,(_buffer0 + 2)
      000DEA 8A 82            [24] 2969 	mov	dpl,r2
      000DEC 8B 83            [24] 2970 	mov	dph,r3
      000DEE 8F F0            [24] 2971 	mov	b,r7
      000DF0 E4               [12] 2972 	clr	a
      000DF1 12r00r00         [24] 2973 	lcall	__gptrput
                                   2974 ;	main.c:860: for(int i = 0; i < new_buffer_size[i]; i++)
      000DF4 05*50            [12] 2975 	inc	_main_i_524291_143
                                   2976 ;	genFromRTrack removed	clr	a
      000DF6 B5*50 C2         [24] 2977 	cjne	a,_main_i_524291_143,00162$
      000DF9 05*51            [12] 2978 	inc	(_main_i_524291_143 + 1)
      000DFB 80 BE            [24] 2979 	sjmp	00162$
      000DFD                       2980 00139$:
                                   2981 ;	main.c:867: storage_characters_buffer_0 = 0;
      000DFD E4               [12] 2982 	clr	a
      000DFE F5*42            [12] 2983 	mov	_storage_characters_buffer_0,a
      000E00 F5*43            [12] 2984 	mov	(_storage_characters_buffer_0 + 1),a
                                   2985 ;	main.c:869: idx = 0;
      000E02 F5*4B            [12] 2986 	mov	_main_idx_65537_121,a
      000E04 F5*4C            [12] 2987 	mov	(_main_idx_65537_121 + 1),a
      000E06                       2988 00141$:
                                   2989 ;	main.c:872: printf_tiny("\n\r");
      000E06 C0 05            [24] 2990 	push	ar5
      000E08 C0 04            [24] 2991 	push	ar4
      000E0A 74r00            [12] 2992 	mov	a,#___str_0
      000E0C C0 E0            [24] 2993 	push	acc
      000E0E 74s00            [12] 2994 	mov	a,#(___str_0 >> 8)
      000E10 C0 E0            [24] 2995 	push	acc
      000E12 12r00r00         [24] 2996 	lcall	_printf_tiny
      000E15 15 81            [12] 2997 	dec	sp
      000E17 15 81            [12] 2998 	dec	sp
      000E19 D0 04            [24] 2999 	pop	ar4
      000E1B D0 05            [24] 3000 	pop	ar5
                                   3001 ;	main.c:835: for(int i = 0; i< new_buffer_index; i++)
      000E1D 74 03            [12] 3002 	mov	a,#0x03
      000E1F 2C               [12] 3003 	add	a,r4
      000E20 FC               [12] 3004 	mov	r4,a
      000E21 E4               [12] 3005 	clr	a
      000E22 3D               [12] 3006 	addc	a,r5
      000E23 FD               [12] 3007 	mov	r5,a
      000E24 05*4E            [12] 3008 	inc	_main_i_327682_139
      000E26 E4               [12] 3009 	clr	a
      000E27 B5*4E 02         [24] 3010 	cjne	a,_main_i_327682_139,00361$
      000E2A 05*4F            [12] 3011 	inc	(_main_i_327682_139 + 1)
      000E2C                       3012 00361$:
      000E2C 02r0Cr9C         [24] 3013 	ljmp	00165$
                                   3014 ;	main.c:913: case '@':
      000E2F                       3015 00143$:
                                   3016 ;	main.c:922: free_buffers();
      000E2F 12r07rD3         [24] 3017 	lcall	_free_buffers
                                   3018 ;	main.c:924: printf_tiny("\n\rSUCCESS: All buffers are freed successfully\n\r");
      000E32 74r79            [12] 3019 	mov	a,#___str_62
      000E34 C0 E0            [24] 3020 	push	acc
      000E36 74s08            [12] 3021 	mov	a,#(___str_62 >> 8)
      000E38 C0 E0            [24] 3022 	push	acc
      000E3A 12r00r00         [24] 3023 	lcall	_printf_tiny
      000E3D 15 81            [12] 3024 	dec	sp
      000E3F 15 81            [12] 3025 	dec	sp
                                   3026 ;	main.c:927: goto START;
      000E41 02r08r23         [24] 3027 	ljmp	00101$
                                   3028 ;	main.c:933: }
      000E44                       3029 00147$:
                                   3030 ;	main.c:938: total_characters++;
      000E44 05*40            [12] 3031 	inc	_total_characters
      000E46 E4               [12] 3032 	clr	a
      000E47 B5*40 02         [24] 3033 	cjne	a,_total_characters,00362$
      000E4A 05*41            [12] 3034 	inc	(_total_characters + 1)
      000E4C                       3035 00362$:
                                   3036 ;	main.c:946: }
      000E4C 02r09rF7         [24] 3037 	ljmp	00153$
                                   3038 	.area CSEG    (CODE)
                                   3039 	.area CONST   (CODE)
                                   3040 	.area CONST   (CODE)
      000000                       3041 ___str_0:
      000000 0A                    3042 	.db 0x0a
      000001 0D                    3043 	.db 0x0d
      000002 00                    3044 	.db 0x00
                                   3045 	.area CSEG    (CODE)
                                   3046 	.area CONST   (CODE)
      000003                       3047 ___str_1:
      000003 2A 2A 2A 2A 2A 2A 2A  3048 	.ascii "************* Buffer Size Req **********************"
             2A 2A 2A 2A 2A 2A 20
             42 75 66 66 65 72 20
             53 69 7A 65 20 52 65
             71 20 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A
      000037 0A                    3049 	.db 0x0a
      000038 0D                    3050 	.db 0x0d
      000039 00                    3051 	.db 0x00
                                   3052 	.area CSEG    (CODE)
                                   3053 	.area CONST   (CODE)
      00003A                       3054 ___str_2:
      00003A 2A 20 20 53 69 7A 65  3055 	.ascii "*  Size should be b/w 64 and 5600 bytes inclusive  *"
             20 73 68 6F 75 6C 64
             20 62 65 20 62 2F 77
             20 36 34 20 61 6E 64
             20 35 36 30 30 20 62
             79 74 65 73 20 69 6E
             63 6C 75 73 69 76 65
             20 20 2A
      00006E 0A                    3056 	.db 0x0a
      00006F 0D                    3057 	.db 0x0d
      000070 00                    3058 	.db 0x00
                                   3059 	.area CSEG    (CODE)
                                   3060 	.area CONST   (CODE)
      000071                       3061 ___str_3:
      000071 2A 20 20 44 69 67 69  3062 	.ascii "*  Digits should be from 0-9                       *"
             74 73 20 73 68 6F 75
             6C 64 20 62 65 20 66
             72 6F 6D 20 30 2D 39
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 2A
      0000A5 0A                    3063 	.db 0x0a
      0000A6 0D                    3064 	.db 0x0d
      0000A7 00                    3065 	.db 0x00
                                   3066 	.area CSEG    (CODE)
                                   3067 	.area CONST   (CODE)
      0000A8                       3068 ___str_4:
      0000A8 2A 20 20 49 74 20 73  3069 	.ascii "*  It should be divisible by 32                    *"
             68 6F 75 6C 64 20 62
             65 20 64 69 76 69 73
             69 62 6C 65 20 62 79
             20 33 32 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 2A
      0000DC 0A                    3070 	.db 0x0a
      0000DD 0D                    3071 	.db 0x0d
      0000DE 00                    3072 	.db 0x00
                                   3073 	.area CSEG    (CODE)
                                   3074 	.area CONST   (CODE)
      0000DF                       3075 ___str_5:
      0000DF 2A 2A 2A 2A 2A 2A 2A  3076 	.ascii "****************************************************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A
      000113 0A                    3077 	.db 0x0a
      000114 0D                    3078 	.db 0x0d
      000115 00                    3079 	.db 0x00
                                   3080 	.area CSEG    (CODE)
                                   3081 	.area CONST   (CODE)
      000116                       3082 ___str_6:
      000116 2A 20 20 53 69 7A 65  3083 	.ascii "*  Size should be b/w 30 and 300 bytes inclusive   *"
             20 73 68 6F 75 6C 64
             20 62 65 20 62 2F 77
             20 33 30 20 61 6E 64
             20 33 30 30 20 62 79
             74 65 73 20 69 6E 63
             6C 75 73 69 76 65 20
             20 20 2A
      00014A 0A                    3084 	.db 0x0a
      00014B 0D                    3085 	.db 0x0d
      00014C 00                    3086 	.db 0x00
                                   3087 	.area CSEG    (CODE)
                                   3088 	.area CONST   (CODE)
      00014D                       3089 ___str_7:
      00014D 0A                    3090 	.db 0x0a
      00014E 0D                    3091 	.db 0x0d
      00014F 45 6E 74 65 72 20 61  3092 	.ascii "Enter a valid buffer size : "
             20 76 61 6C 69 64 20
             62 75 66 66 65 72 20
             73 69 7A 65 20 3A 20
      00016B 00                    3093 	.db 0x00
                                   3094 	.area CSEG    (CODE)
                                   3095 	.area CONST   (CODE)
      00016C                       3096 ___str_8:
      00016C 0A                    3097 	.db 0x0a
      00016D 0D                    3098 	.db 0x0d
      00016E 46 41 49 4C 55 52 45  3099 	.ascii "FAILURE: Invalid character added, now enter a valid size"
             3A 20 49 6E 76 61 6C
             69 64 20 63 68 61 72
             61 63 74 65 72 20 61
             64 64 65 64 2C 20 6E
             6F 77 20 65 6E 74 65
             72 20 61 20 76 61 6C
             69 64 20 73 69 7A 65
      0001A6 0A                    3100 	.db 0x0a
      0001A7 0D                    3101 	.db 0x0d
      0001A8 00                    3102 	.db 0x00
                                   3103 	.area CSEG    (CODE)
                                   3104 	.area CONST   (CODE)
      0001A9                       3105 ___str_9:
      0001A9 0A                    3106 	.db 0x0a
      0001AA 0D                    3107 	.db 0x0d
      0001AB 53 55 43 43 45 53 53  3108 	.ascii "SUCCESS: Valid divisible by 32 size entered"
             3A 20 56 61 6C 69 64
             20 64 69 76 69 73 69
             62 6C 65 20 62 79 20
             33 32 20 73 69 7A 65
             20 65 6E 74 65 72 65
             64
      0001D6 0A                    3109 	.db 0x0a
      0001D7 0D                    3110 	.db 0x0d
      0001D8 00                    3111 	.db 0x00
                                   3112 	.area CSEG    (CODE)
                                   3113 	.area CONST   (CODE)
      0001D9                       3114 ___str_10:
      0001D9 0A                    3115 	.db 0x0a
      0001DA 0D                    3116 	.db 0x0d
      0001DB 46 41 49 4C 55 52 45  3117 	.ascii "FAILURE: Input not divisible by 32, enter a valid input"
             3A 20 49 6E 70 75 74
             20 6E 6F 74 20 64 69
             76 69 73 69 62 6C 65
             20 62 79 20 33 32 2C
             20 65 6E 74 65 72 20
             61 20 76 61 6C 69 64
             20 69 6E 70 75 74
      000212 0A                    3118 	.db 0x0a
      000213 0D                    3119 	.db 0x0d
      000214 00                    3120 	.db 0x00
                                   3121 	.area CSEG    (CODE)
                                   3122 	.area CONST   (CODE)
      000215                       3123 ___str_11:
      000215 0A                    3124 	.db 0x0a
      000216 0D                    3125 	.db 0x0d
      000217 46 41 49 4C 55 52 45  3126 	.ascii "FAILURE: Input data should be in between 60 to 5600"
             3A 20 49 6E 70 75 74
             20 64 61 74 61 20 73
             68 6F 75 6C 64 20 62
             65 20 69 6E 20 62 65
             74 77 65 65 6E 20 36
             30 20 74 6F 20 35 36
             30 30
      00024A 0A                    3127 	.db 0x0a
      00024B 0D                    3128 	.db 0x0d
      00024C 00                    3129 	.db 0x00
                                   3130 	.area CSEG    (CODE)
                                   3131 	.area CONST   (CODE)
      00024D                       3132 ___str_12:
      00024D 0A                    3133 	.db 0x0a
      00024E 0D                    3134 	.db 0x0d
      00024F 53 55 43 43 45 53 53  3135 	.ascii "SUCCESS: Valid buffer size entered"
             3A 20 56 61 6C 69 64
             20 62 75 66 66 65 72
             20 73 69 7A 65 20 65
             6E 74 65 72 65 64
      000271 0A                    3136 	.db 0x0a
      000272 0D                    3137 	.db 0x0d
      000273 00                    3138 	.db 0x00
                                   3139 	.area CSEG    (CODE)
                                   3140 	.area CONST   (CODE)
      000274                       3141 ___str_13:
      000274 0A                    3142 	.db 0x0a
      000275 0D                    3143 	.db 0x0d
      000276 46 41 49 4C 55 52 45  3144 	.ascii "FAILURE: the buffer size should be in range [30, 300] "
             3A 20 74 68 65 20 62
             75 66 66 65 72 20 73
             69 7A 65 20 73 68 6F
             75 6C 64 20 62 65 20
             69 6E 20 72 61 6E 67
             65 20 5B 33 30 2C 20
             33 30 30 5D 20
      0002AC 0A                    3145 	.db 0x0a
      0002AD 0D                    3146 	.db 0x0d
      0002AE 00                    3147 	.db 0x00
                                   3148 	.area CSEG    (CODE)
                                   3149 	.area CONST   (CODE)
      0002AF                       3150 ___str_14:
      0002AF 25 78                 3151 	.ascii "%x"
      0002B1 00                    3152 	.db 0x00
                                   3153 	.area CSEG    (CODE)
                                   3154 	.area CONST   (CODE)
      0002B2                       3155 ___str_15:
      0002B2 30 25 78              3156 	.ascii "0%x"
      0002B5 00                    3157 	.db 0x00
                                   3158 	.area CSEG    (CODE)
                                   3159 	.area CONST   (CODE)
      0002B6                       3160 ___str_16:
      0002B6 30 30 25 78           3161 	.ascii "00%x"
      0002BA 00                    3162 	.db 0x00
                                   3163 	.area CSEG    (CODE)
                                   3164 	.area CONST   (CODE)
      0002BB                       3165 ___str_17:
      0002BB 30 30 30 25 78        3166 	.ascii "000%x"
      0002C0 00                    3167 	.db 0x00
                                   3168 	.area CSEG    (CODE)
                                   3169 	.area CONST   (CODE)
      0002C1                       3170 ___str_18:
      0002C1 3A                    3171 	.ascii ":"
      0002C2 00                    3172 	.db 0x00
                                   3173 	.area CSEG    (CODE)
                                   3174 	.area CONST   (CODE)
      0002C3                       3175 ___str_19:
      0002C3 20 30 30              3176 	.ascii " 00"
      0002C6 00                    3177 	.db 0x00
                                   3178 	.area CSEG    (CODE)
                                   3179 	.area CONST   (CODE)
      0002C7                       3180 ___str_20:
      0002C7 20 30 25 64           3181 	.ascii " 0%d"
      0002CB 00                    3182 	.db 0x00
                                   3183 	.area CSEG    (CODE)
                                   3184 	.area CONST   (CODE)
      0002CC                       3185 ___str_21:
      0002CC 20 25 64              3186 	.ascii " %d"
      0002CF 00                    3187 	.db 0x00
                                   3188 	.area CSEG    (CODE)
                                   3189 	.area CONST   (CODE)
      0002D0                       3190 ___str_22:
      0002D0 20 30 25 78           3191 	.ascii " 0%x"
      0002D4 00                    3192 	.db 0x00
                                   3193 	.area CSEG    (CODE)
                                   3194 	.area CONST   (CODE)
      0002D5                       3195 ___str_23:
      0002D5 20 25 78              3196 	.ascii " %x"
      0002D8 00                    3197 	.db 0x00
                                   3198 	.area CSEG    (CODE)
                                   3199 	.area CONST   (CODE)
      0002D9                       3200 ___str_24:
      0002D9 7C 2A 2A 2A 2A 2A 2A  3201 	.ascii "|***********************************************|"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 7C
      00030A 0A                    3202 	.db 0x0a
      00030B 0D                    3203 	.db 0x0d
      00030C 00                    3204 	.db 0x00
                                   3205 	.area CSEG    (CODE)
                                   3206 	.area CONST   (CODE)
      00030D                       3207 ___str_25:
      00030D 7C 2A 2A 2A 2A 2A 2A  3208 	.ascii "|************ USER Interfase *******************|"
             2A 2A 2A 2A 2A 2A 20
             55 53 45 52 20 49 6E
             74 65 72 66 61 73 65
             20 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 7C
      00033E 0A                    3209 	.db 0x0a
      00033F 0D                    3210 	.db 0x0d
      000340 00                    3211 	.db 0x00
                                   3212 	.area CSEG    (CODE)
                                   3213 	.area CONST   (CODE)
      000341                       3214 ___str_26:
      000341 7C 20 20 43 68 6F 6F  3215 	.ascii "|  Choose a character from the below options    |"
             73 65 20 61 20 63 68
             61 72 61 63 74 65 72
             20 66 72 6F 6D 20 74
             68 65 20 62 65 6C 6F
             77 20 6F 70 74 69 6F
             6E 73 20 20 20 20 7C
      000372 0A                    3216 	.db 0x0a
      000373 0D                    3217 	.db 0x0d
      000374 00                    3218 	.db 0x00
                                   3219 	.area CSEG    (CODE)
                                   3220 	.area CONST   (CODE)
      000375                       3221 ___str_27:
      000375 7C 20 20 61 2D 7A 20  3222 	.ascii "|  a-z  | Character to store in the buffer      |"
             20 7C 20 43 68 61 72
             61 63 74 65 72 20 74
             6F 20 73 74 6F 72 65
             20 69 6E 20 74 68 65
             20 62 75 66 66 65 72
             20 20 20 20 20 20 7C
      0003A6 0A                    3223 	.db 0x0a
      0003A7 0D                    3224 	.db 0x0d
      0003A8 00                    3225 	.db 0x00
                                   3226 	.area CSEG    (CODE)
                                   3227 	.area CONST   (CODE)
      0003A9                       3228 ___str_28:
      0003A9 7C 20 20 2B 20 20 20  3229 	.ascii "|  +    | Allocate a new buffer                 |"
             20 7C 20 41 6C 6C 6F
             63 61 74 65 20 61 20
             6E 65 77 20 62 75 66
             66 65 72 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 7C
      0003DA 0A                    3230 	.db 0x0a
      0003DB 0D                    3231 	.db 0x0d
      0003DC 00                    3232 	.db 0x00
                                   3233 	.area CSEG    (CODE)
                                   3234 	.area CONST   (CODE)
      0003DD                       3235 ___str_29:
      0003DD 7C 20 20 2D 20 20 20  3236 	.ascii "|  -    | Delete a buffer                       |"
             20 7C 20 44 65 6C 65
             74 65 20 61 20 62 75
             66 66 65 72 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 7C
      00040E 0A                    3237 	.db 0x0a
      00040F 0D                    3238 	.db 0x0d
      000410 00                    3239 	.db 0x00
                                   3240 	.area CSEG    (CODE)
                                   3241 	.area CONST   (CODE)
      000411                       3242 ___str_30:
      000411 7C 20 20 3F 20 20 20  3243 	.ascii "|  ?    | Display the heap report               |"
             20 7C 20 44 69 73 70
             6C 61 79 20 74 68 65
             20 68 65 61 70 20 72
             65 70 6F 72 74 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 7C
      000442 0A                    3244 	.db 0x0a
      000443 0D                    3245 	.db 0x0d
      000444 00                    3246 	.db 0x00
                                   3247 	.area CSEG    (CODE)
                                   3248 	.area CONST   (CODE)
      000445                       3249 ___str_31:
      000445 7C 20 20 3D 20 20 20  3250 	.ascii "|  =    | Display contents of Buffer_0          |"
             20 7C 20 44 69 73 70
             6C 61 79 20 63 6F 6E
             74 65 6E 74 73 20 6F
             66 20 42 75 66 66 65
             72 5F 30 20 20 20 20
             20 20 20 20 20 20 7C
      000476 0A                    3251 	.db 0x0a
      000477 0D                    3252 	.db 0x0d
      000478 00                    3253 	.db 0x00
                                   3254 	.area CSEG    (CODE)
                                   3255 	.area CONST   (CODE)
      000479                       3256 ___str_32:
      000479 7C 20 20 40 20 20 20  3257 	.ascii "|  @    | Free all the buffers                  |"
             20 7C 20 46 72 65 65
             20 61 6C 6C 20 74 68
             65 20 62 75 66 66 65
             72 73 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 7C
      0004AA 0A                    3258 	.db 0x0a
      0004AB 0D                    3259 	.db 0x0d
      0004AC 00                    3260 	.db 0x00
                                   3261 	.area CSEG    (CODE)
                                   3262 	.area CONST   (CODE)
      0004AD                       3263 ___str_33:
      0004AD 0A                    3264 	.db 0x0a
      0004AE 0D                    3265 	.db 0x0d
      0004AF 45 6E 74 65 72 20 61  3266 	.ascii "Enter a character: "
             20 63 68 61 72 61 63
             74 65 72 3A 20
      0004C2 00                    3267 	.db 0x00
                                   3268 	.area CSEG    (CODE)
                                   3269 	.area CONST   (CODE)
      0004C3                       3270 ___str_34:
      0004C3 0A                    3271 	.db 0x0a
      0004C4 0D                    3272 	.db 0x0d
      0004C5 0A                    3273 	.db 0x0a
      0004C6 0D                    3274 	.db 0x0d
      0004C7 00                    3275 	.db 0x00
                                   3276 	.area CSEG    (CODE)
                                   3277 	.area CONST   (CODE)
      0004C8                       3278 ___str_35:
      0004C8 45 6E 74 65 72 20 69  3279 	.ascii "Enter is pressed straight away, enter a valid character"
             73 20 70 72 65 73 73
             65 64 20 73 74 72 61
             69 67 68 74 20 61 77
             61 79 2C 20 65 6E 74
             65 72 20 61 20 76 61
             6C 69 64 20 63 68 61
             72 61 63 74 65 72
      0004FF 0A                    3280 	.db 0x0a
      000500 0D                    3281 	.db 0x0d
      000501 00                    3282 	.db 0x00
                                   3283 	.area CSEG    (CODE)
                                   3284 	.area CONST   (CODE)
      000502                       3285 ___str_36:
      000502 53 74 6F 72 61 67 65  3286 	.ascii "Storage character entered"
             20 63 68 61 72 61 63
             74 65 72 20 65 6E 74
             65 72 65 64
      00051B 0A                    3287 	.db 0x0a
      00051C 0D                    3288 	.db 0x0d
      00051D 0A                    3289 	.db 0x0a
      00051E 0D                    3290 	.db 0x0d
      00051F 00                    3291 	.db 0x00
                                   3292 	.area CSEG    (CODE)
                                   3293 	.area CONST   (CODE)
      000520                       3294 ___str_37:
      000520 43 6F 6D 6D 61 6E 64  3295 	.ascii "Command character entered"
             20 63 68 61 72 61 63
             74 65 72 20 65 6E 74
             65 72 65 64
      000539 0A                    3296 	.db 0x0a
      00053A 0D                    3297 	.db 0x0d
      00053B 0A                    3298 	.db 0x0a
      00053C 0D                    3299 	.db 0x0d
      00053D 00                    3300 	.db 0x00
                                   3301 	.area CSEG    (CODE)
                                   3302 	.area CONST   (CODE)
      00053E                       3303 ___str_38:
      00053E 4E 6F 74 20 61 20 76  3304 	.ascii "Not a valid character for the system"
             61 6C 69 64 20 63 68
             61 72 61 63 74 65 72
             20 66 6F 72 20 74 68
             65 20 73 79 73 74 65
             6D
      000562 0A                    3305 	.db 0x0a
      000563 0D                    3306 	.db 0x0d
      000564 0A                    3307 	.db 0x0a
      000565 0D                    3308 	.db 0x0d
      000566 00                    3309 	.db 0x00
                                   3310 	.area CSEG    (CODE)
                                   3311 	.area CONST   (CODE)
      000567                       3312 ___str_39:
      000567 46 41 49 4C 55 52 45  3313 	.ascii "FAILURE: malloc for buffer0 failed"
             3A 20 6D 61 6C 6C 6F
             63 20 66 6F 72 20 62
             75 66 66 65 72 30 20
             66 61 69 6C 65 64
      000589 0A                    3314 	.db 0x0a
      00058A 0D                    3315 	.db 0x0d
      00058B 00                    3316 	.db 0x00
                                   3317 	.area CSEG    (CODE)
                                   3318 	.area CONST   (CODE)
      00058C                       3319 ___str_40:
      00058C 53 55 43 43 45 53 53  3320 	.ascii "SUCCESS: buffer0 malloc done"
             3A 20 62 75 66 66 65
             72 30 20 6D 61 6C 6C
             6F 63 20 64 6F 6E 65
      0005A8 0A                    3321 	.db 0x0a
      0005A9 0D                    3322 	.db 0x0d
      0005AA 00                    3323 	.db 0x00
                                   3324 	.area CSEG    (CODE)
                                   3325 	.area CONST   (CODE)
      0005AB                       3326 ___str_41:
      0005AB 20 42 75 66 66 65 72  3327 	.ascii " Buffer0 size is : %d"
             30 20 73 69 7A 65 20
             69 73 20 3A 20 25 64
      0005C0 0A                    3328 	.db 0x0a
      0005C1 0D                    3329 	.db 0x0d
      0005C2 00                    3330 	.db 0x00
                                   3331 	.area CSEG    (CODE)
                                   3332 	.area CONST   (CODE)
      0005C3                       3333 ___str_42:
      0005C3 46 41 4C 49 55 52 45  3334 	.ascii "FALIURE: malloc for buffer1 failed"
             3A 20 6D 61 6C 6C 6F
             63 20 66 6F 72 20 62
             75 66 66 65 72 31 20
             66 61 69 6C 65 64
      0005E5 0A                    3335 	.db 0x0a
      0005E6 0D                    3336 	.db 0x0d
      0005E7 00                    3337 	.db 0x00
                                   3338 	.area CSEG    (CODE)
                                   3339 	.area CONST   (CODE)
      0005E8                       3340 ___str_43:
      0005E8 53 55 43 43 45 53 53  3341 	.ascii "SUCCESS: buffer1 malloc done"
             3A 20 62 75 66 66 65
             72 31 20 6D 61 6C 6C
             6F 63 20 64 6F 6E 65
      000604 0A                    3342 	.db 0x0a
      000605 0D                    3343 	.db 0x0d
      000606 00                    3344 	.db 0x00
                                   3345 	.area CSEG    (CODE)
                                   3346 	.area CONST   (CODE)
      000607                       3347 ___str_44:
      000607 20 42 75 66 66 65 72  3348 	.ascii " Buffer1 size is : %d"
             31 20 73 69 7A 65 20
             69 73 20 3A 20 25 64
      00061C 0A                    3349 	.db 0x0a
      00061D 0D                    3350 	.db 0x0d
      00061E 00                    3351 	.db 0x00
                                   3352 	.area CSEG    (CODE)
                                   3353 	.area CONST   (CODE)
      00061F                       3354 ___str_45:
      00061F 0A                    3355 	.db 0x0a
      000620 0D                    3356 	.db 0x0d
      000621 46 41 49 4C 55 52 45  3357 	.ascii "FAILURE: new_buffer malloc failed"
             3A 20 6E 65 77 5F 62
             75 66 66 65 72 20 6D
             61 6C 6C 6F 63 20 66
             61 69 6C 65 64
      000642 0A                    3358 	.db 0x0a
      000643 0D                    3359 	.db 0x0d
      000644 00                    3360 	.db 0x00
                                   3361 	.area CSEG    (CODE)
                                   3362 	.area CONST   (CODE)
      000645                       3363 ___str_46:
      000645 0A                    3364 	.db 0x0a
      000646 0D                    3365 	.db 0x0d
      000647 53 55 43 43 45 53 53  3366 	.ascii "SUCCESS: new_buffer malloc passed"
             3A 20 6E 65 77 5F 62
             75 66 66 65 72 20 6D
             61 6C 6C 6F 63 20 70
             61 73 73 65 64
      000668 0A                    3367 	.db 0x0a
      000669 0D                    3368 	.db 0x0d
      00066A 00                    3369 	.db 0x00
                                   3370 	.area CSEG    (CODE)
                                   3371 	.area CONST   (CODE)
      00066B                       3372 ___str_47:
      00066B 0A                    3373 	.db 0x0a
      00066C 0D                    3374 	.db 0x0d
      00066D 45 6E 74 65 72 20 61  3375 	.ascii "Enter a valid buffer no. for deletion: "
             20 76 61 6C 69 64 20
             62 75 66 66 65 72 20
             6E 6F 2E 20 66 6F 72
             20 64 65 6C 65 74 69
             6F 6E 3A 20
      000694 00                    3376 	.db 0x00
                                   3377 	.area CSEG    (CODE)
                                   3378 	.area CONST   (CODE)
      000695                       3379 ___str_48:
      000695 0A                    3380 	.db 0x0a
      000696 0D                    3381 	.db 0x0d
      000697 4E 4F 20 65 6E 74 72  3382 	.ascii "NO entry -> directly ENTER is pressed"
             79 20 2D 3E 20 64 69
             72 65 63 74 6C 79 20
             45 4E 54 45 52 20 69
             73 20 70 72 65 73 73
             65 64
      0006BC 0A                    3383 	.db 0x0a
      0006BD 0D                    3384 	.db 0x0d
      0006BE 00                    3385 	.db 0x00
                                   3386 	.area CSEG    (CODE)
                                   3387 	.area CONST   (CODE)
      0006BF                       3388 ___str_49:
      0006BF 0A                    3389 	.db 0x0a
      0006C0 0D                    3390 	.db 0x0d
      0006C1 46 41 49 4C 55 52 45  3391 	.ascii "FAILURE: invalid digits entered "
             3A 20 69 6E 76 61 6C
             69 64 20 64 69 67 69
             74 73 20 65 6E 74 65
             72 65 64 20
      0006E1 0A                    3392 	.db 0x0a
      0006E2 0D                    3393 	.db 0x0d
      0006E3 00                    3394 	.db 0x00
                                   3395 	.area CSEG    (CODE)
                                   3396 	.area CONST   (CODE)
      0006E4                       3397 ___str_50:
      0006E4 0A                    3398 	.db 0x0a
      0006E5 0D                    3399 	.db 0x0d
      0006E6 42 75 66 66 65 72 20  3400 	.ascii "Buffer number can't be 0"
             6E 75 6D 62 65 72 20
             63 61 6E 27 74 20 62
             65 20 30
      0006FE 0A                    3401 	.db 0x0a
      0006FF 0D                    3402 	.db 0x0d
      000700 00                    3403 	.db 0x00
                                   3404 	.area CSEG    (CODE)
                                   3405 	.area CONST   (CODE)
      000701                       3406 ___str_51:
      000701 0A                    3407 	.db 0x0a
      000702 0D                    3408 	.db 0x0d
      000703 46 41 49 4C 55 52 45  3409 	.ascii "FAILURE: Buffer doesn't exist"
             3A 20 42 75 66 66 65
             72 20 64 6F 65 73 6E
             27 74 20 65 78 69 73
             74
      000720 0A                    3410 	.db 0x0a
      000721 0D                    3411 	.db 0x0d
      000722 00                    3412 	.db 0x00
                                   3413 	.area CSEG    (CODE)
                                   3414 	.area CONST   (CODE)
      000723                       3415 ___str_52:
      000723 0A                    3416 	.db 0x0a
      000724 0D                    3417 	.db 0x0d
      000725 53 55 43 43 45 53 53  3418 	.ascii "SUCCESS: Buffer freed"
             3A 20 42 75 66 66 65
             72 20 66 72 65 65 64
      00073A 0A                    3419 	.db 0x0a
      00073B 0D                    3420 	.db 0x0d
      00073C 00                    3421 	.db 0x00
                                   3422 	.area CSEG    (CODE)
                                   3423 	.area CONST   (CODE)
      00073D                       3424 ___str_53:
      00073D 0A                    3425 	.db 0x0a
      00073E 0D                    3426 	.db 0x0d
      00073F 2A 2A 2A 2A 2A 2A 2A  3427 	.ascii "************  HEAP REPORT  **************"
             2A 2A 2A 2A 2A 20 20
             48 45 41 50 20 52 45
             50 4F 52 54 20 20 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A
      000768 0A                    3428 	.db 0x0a
      000769 0D                    3429 	.db 0x0d
      00076A 00                    3430 	.db 0x00
                                   3431 	.area CSEG    (CODE)
                                   3432 	.area CONST   (CODE)
      00076B                       3433 ___str_54:
      00076B 74 6F 74 61 6C 20 6E  3434 	.ascii "total number of characters received since the last '?' : %d"
             75 6D 62 65 72 20 6F
             66 20 63 68 61 72 61
             63 74 65 72 73 20 72
             65 63 65 69 76 65 64
             20 73 69 6E 63 65 20
             74 68 65 20 6C 61 73
             74 20 27 3F 27 20 3A
             20 25 64
      0007A6 0A                    3435 	.db 0x0a
      0007A7 0D                    3436 	.db 0x0d
      0007A8 00                    3437 	.db 0x00
                                   3438 	.area CSEG    (CODE)
                                   3439 	.area CONST   (CODE)
      0007A9                       3440 ___str_55:
      0007A9 74 6F 74 61 6C 20 6E  3441 	.ascii "total number of buffers : %d"
             75 6D 62 65 72 20 6F
             66 20 62 75 66 66 65
             72 73 20 3A 20 25 64
      0007C5 0A                    3442 	.db 0x0a
      0007C6 0D                    3443 	.db 0x0d
      0007C7 00                    3444 	.db 0x00
                                   3445 	.area CSEG    (CODE)
                                   3446 	.area CONST   (CODE)
      0007C8                       3447 ___str_56:
      0007C8 0A                    3448 	.db 0x0a
      0007C9 0D                    3449 	.db 0x0d
      0007CA 0A                    3450 	.db 0x0a
      0007CB 0D                    3451 	.db 0x0d
      0007CC 42 75 66 66 65 72 20  3452 	.ascii "Buffer #%d"
             23 25 64
      0007D6 0A                    3453 	.db 0x0a
      0007D7 0D                    3454 	.db 0x0d
      0007D8 00                    3455 	.db 0x00
                                   3456 	.area CSEG    (CODE)
                                   3457 	.area CONST   (CODE)
      0007D9                       3458 ___str_57:
      0007D9 0A                    3459 	.db 0x0a
      0007DA 0D                    3460 	.db 0x0d
      0007DB 42 75 66 66 65 72 20  3461 	.ascii "Buffer start address: "
             73 74 61 72 74 20 61
             64 64 72 65 73 73 3A
             20
      0007F1 00                    3462 	.db 0x00
                                   3463 	.area CSEG    (CODE)
                                   3464 	.area CONST   (CODE)
      0007F2                       3465 ___str_58:
      0007F2 30 78                 3466 	.ascii "0x"
      0007F4 00                    3467 	.db 0x00
                                   3468 	.area CSEG    (CODE)
                                   3469 	.area CONST   (CODE)
      0007F5                       3470 ___str_59:
      0007F5 0A                    3471 	.db 0x0a
      0007F6 0D                    3472 	.db 0x0d
      0007F7 42 75 66 66 65 72 20  3473 	.ascii "Buffer end address:   "
             65 6E 64 20 61 64 64
             72 65 73 73 3A 20 20
             20
      00080D 00                    3474 	.db 0x00
                                   3475 	.area CSEG    (CODE)
                                   3476 	.area CONST   (CODE)
      00080E                       3477 ___str_60:
      00080E 0A                    3478 	.db 0x0a
      00080F 0D                    3479 	.db 0x0d
      000810 54 6F 74 61 6C 20 61  3480 	.ascii "Total allocated size of the buffer (in bytes): %d"
             6C 6C 6F 63 61 74 65
             64 20 73 69 7A 65 20
             6F 66 20 74 68 65 20
             62 75 66 66 65 72 20
             28 69 6E 20 62 79 74
             65 73 29 3A 20 25 64
      000841 00                    3481 	.db 0x00
                                   3482 	.area CSEG    (CODE)
                                   3483 	.area CONST   (CODE)
      000842                       3484 ___str_61:
      000842 0A                    3485 	.db 0x0a
      000843 0D                    3486 	.db 0x0d
      000844 4E 75 6D 62 65 72 20  3487 	.ascii "Number of free spaces remaining in that buffer: %d"
             6F 66 20 66 72 65 65
             20 73 70 61 63 65 73
             20 72 65 6D 61 69 6E
             69 6E 67 20 69 6E 20
             74 68 61 74 20 62 75
             66 66 65 72 3A 20 25
             64
      000876 0A                    3488 	.db 0x0a
      000877 0D                    3489 	.db 0x0d
      000878 00                    3490 	.db 0x00
                                   3491 	.area CSEG    (CODE)
                                   3492 	.area CONST   (CODE)
      000879                       3493 ___str_62:
      000879 0A                    3494 	.db 0x0a
      00087A 0D                    3495 	.db 0x0d
      00087B 53 55 43 43 45 53 53  3496 	.ascii "SUCCESS: All buffers are freed successfully"
             3A 20 41 6C 6C 20 62
             75 66 66 65 72 73 20
             61 72 65 20 66 72 65
             65 64 20 73 75 63 63
             65 73 73 66 75 6C 6C
             79
      0008A6 0A                    3497 	.db 0x0a
      0008A7 0D                    3498 	.db 0x0d
      0008A8 00                    3499 	.db 0x00
                                   3500 	.area CSEG    (CODE)
                                   3501 	.area XINIT   (CODE)
                                   3502 	.area CABS    (ABS,CODE)
